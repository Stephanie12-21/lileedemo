
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



//pour la newsletter
model newsletter {
  id                Int     @id @default(autoincrement())
  email             String  @unique
  unsubscribeToken  String? 
}

//pour les utilisateurs

model user {
  id                            Int            @id @default(autoincrement())
  nom                           String
  prenom                        String
  email                         String         @unique
  phone                         String         @unique
  hashPassword                  String
  statutUser                    statutUser
  role                          role
  profileImages                 profileImage[]
  createdAt                     DateTime       @default(now())
  updatedAt                     DateTime       @updatedAt
  companyId                     Int?
  company                       company?       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  annonces                      annonces[]
  commentaire                   commentaire[]
  favoris                       favoris[]
  temoignages                   temoignages[]
  moyenpaiement                 moyenpaiement[]

  // <--
  stripeAccountId               String?
  stripeAccountCompleted        Boolean         @default(false)          
  // -->

}

enum statutUser {
  ACTIF
  SUSPENDU
}

model company {
  id              Int          @id @default(autoincrement())
  siret           String       @unique
  nomSociete      String       @unique
  codePostal      String
  adresse         String
  ville           String
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  secteurActivite secteurActivite
  typeSociete     typeSociete
  users           user[]       
}

enum secteurActivite {
  IMMOBILIER
  VETEMENT
  EMPLOI
  SERVICE
  VOITURE
  LOISIR
  MATERIEL
  MOBILIER
}

enum role {
  PERSO     
  PRO 
  ADMIN       
}

enum typeSociete {
  ENTREPRISE_INDIVIDUELLE
  SOCIETE_PRIVEE
  SOCIETE_PUBLIQUE
  COOPERATIVE
  ASSOCIATION
}

model profileImage {
  id        Int      @id @default(autoincrement())
  path      String   
  userId    Int      
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade)
}



//pour les favoris
model favoris {
  id                Int         @id @default(autoincrement())
  saveDate          DateTime    @default(now())
  userId            Int
  annonceId         Int
  user              user        @relation(fields: [userId], references: [id], onDelete: Cascade)
  annonce           annonces    @relation(fields: [annonceId], references: [id], onDelete: Cascade)
  
}


//pour les annonces
model annonces {
  id                Int          @id @default(autoincrement())
  titre             String       @unique
  description       String
  prix              Decimal?
  typeTarif         typeTarif?  
  priority          priority?
  localisation      String?
  adresse           String
  statut            statut?      @default(EN_ATTENTE_DE_VALIDATION)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  imageAnnonces     imageAnnonce[]
  categorieAnnonce  categorieAnnonce
  sousCategorie     String
  userId            Int         
  user              user          @relation(fields: [userId], references: [id], onDelete: Cascade)
  commentaire       commentaire[] 
  favoris           favoris[]  
  
  // <--
  priceId          String?
  // -->
}

enum statut {
  PUBLIEE       
  DESACTIVEE  
  EN_ATTENTE_DE_VALIDATION      
}

enum typeTarif {
  JOURNALIER
  NUITEE
  FIXE
  MENSUEL
}

enum priority {
  URGENT
  POPULAIRE
  RECOMMANDATION
}

model imageAnnonce {
  id            Int      @id @default(autoincrement())
  path          String   
  annoncesId    Int      
  annonces      annonces  @relation(fields: [annoncesId], references: [id], onDelete: Cascade)
}

enum categorieAnnonce {
  IMMOBILIER
  VETEMENT
  EMPLOI_SERVICE
  VOITURE
  LOISIR
  MATERIEL
  MOBILIER
  DONS
}


//pour les commentaires
model commentaire { 
  id                Int       @id @default(autoincrement())
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  commentaire       String
  note              Int?
  annoncesId        Int
  annonces          annonces   @relation(fields: [annoncesId], references: [id])
  userId            Int
  user              user      @relation(fields: [userId], references: [id])
}


//pour les t√©moignages
model temoignages{
  id                Int @id @default(autoincrement())
  temoignage        String
  noteLilee         Int
  ville             String?
  pays              String?
  userId            Int
  user              user      @relation(fields: [userId], references: [id])
}

//pour les moyens de paiement
model moyenpaiement {
  id              Int       @id @default(autoincrement())
  cardNumber      String    @unique
  nameOnCard      String
  cardCVC         Int       @unique
  cardExpiry      DateTime
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  userId          Int
  user            user      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

//pour les partenariats

model engagement {
  id              Int       @id @default(autoincrement())
  nom             String    @unique
  logo            logo[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  statutPartenaire statutPartenaire @default(ACTIF)
  siteWeb         String?
  adresse         String
  email           String    @unique
  phone           String    @unique
  facebook        String?
  instagram       String?
  twitter         String?
  linkedin        String?
  tikTok          String?
  youtube         String?
  duree           duree   
  description     String?
  contenuPartenaire       contenuPartenaire[]
}

enum duree {
  MENSUEL
  TRIMESTRIEL
  SEMESTRIEL
  ANNUEL
}

enum statutPartenaire {
 ACTIF
 SUSPENDU
}

model contenuPartenaire {
  id           Int           @id @default(autoincrement())
  path         String
  engagementId Int
  engagement   engagement    @relation(fields: [engagementId], references: [id], onDelete: Cascade)
}


model logo {
  id              Int       @id @default(autoincrement())
  path            String
  engagementId    Int
  engagement      engagement @relation(fields: [engagementId], references: [id], onDelete: Cascade)
}

//pour les articles

model article {
  id              Int       @id @default(autoincrement())
  titre           String
  contenu         String
  categorieArticle String
  images          image[]  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model image {
  id        Int      @id @default(autoincrement())
  path      String   
  articleId Int      
  article   article  @relation(fields: [articleId], references: [id])
}


