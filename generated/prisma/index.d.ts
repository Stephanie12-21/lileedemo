
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model newsletter
 * 
 */
export type newsletter = $Result.DefaultSelection<Prisma.$newsletterPayload>
/**
 * Model user
 * 
 */
export type user = $Result.DefaultSelection<Prisma.$userPayload>
/**
 * Model company
 * 
 */
export type company = $Result.DefaultSelection<Prisma.$companyPayload>
/**
 * Model profileImage
 * 
 */
export type profileImage = $Result.DefaultSelection<Prisma.$profileImagePayload>
/**
 * Model favoris
 * 
 */
export type favoris = $Result.DefaultSelection<Prisma.$favorisPayload>
/**
 * Model annonces
 * 
 */
export type annonces = $Result.DefaultSelection<Prisma.$annoncesPayload>
/**
 * Model imageAnnonce
 * 
 */
export type imageAnnonce = $Result.DefaultSelection<Prisma.$imageAnnoncePayload>
/**
 * Model commentaire
 * 
 */
export type commentaire = $Result.DefaultSelection<Prisma.$commentairePayload>
/**
 * Model temoignages
 * 
 */
export type temoignages = $Result.DefaultSelection<Prisma.$temoignagesPayload>
/**
 * Model adresseFacturation
 * 
 */
export type adresseFacturation = $Result.DefaultSelection<Prisma.$adresseFacturationPayload>
/**
 * Model engagement
 * 
 */
export type engagement = $Result.DefaultSelection<Prisma.$engagementPayload>
/**
 * Model contenuPartenaire
 * 
 */
export type contenuPartenaire = $Result.DefaultSelection<Prisma.$contenuPartenairePayload>
/**
 * Model logo
 * 
 */
export type logo = $Result.DefaultSelection<Prisma.$logoPayload>
/**
 * Model article
 * 
 */
export type article = $Result.DefaultSelection<Prisma.$articlePayload>
/**
 * Model image
 * 
 */
export type image = $Result.DefaultSelection<Prisma.$imagePayload>
/**
 * Model transactions
 * 
 */
export type transactions = $Result.DefaultSelection<Prisma.$transactionsPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const statutUser: {
  ACTIF: 'ACTIF',
  SUSPENDU: 'SUSPENDU'
};

export type statutUser = (typeof statutUser)[keyof typeof statutUser]


export const secteurActivite: {
  IMMOBILIER: 'IMMOBILIER',
  VETEMENT: 'VETEMENT',
  EMPLOI: 'EMPLOI',
  SERVICE: 'SERVICE',
  VOITURE: 'VOITURE',
  LOISIR: 'LOISIR',
  MATERIEL: 'MATERIEL',
  MOBILIER: 'MOBILIER'
};

export type secteurActivite = (typeof secteurActivite)[keyof typeof secteurActivite]


export const role: {
  PERSO: 'PERSO',
  PRO: 'PRO',
  ADMIN: 'ADMIN'
};

export type role = (typeof role)[keyof typeof role]


export const typeSociete: {
  ENTREPRISE_INDIVIDUELLE: 'ENTREPRISE_INDIVIDUELLE',
  SOCIETE_PRIVEE: 'SOCIETE_PRIVEE',
  SOCIETE_PUBLIQUE: 'SOCIETE_PUBLIQUE',
  COOPERATIVE: 'COOPERATIVE',
  ASSOCIATION: 'ASSOCIATION'
};

export type typeSociete = (typeof typeSociete)[keyof typeof typeSociete]


export const statut: {
  PUBLIEE: 'PUBLIEE',
  DESACTIVEE: 'DESACTIVEE',
  EN_ATTENTE_DE_VALIDATION: 'EN_ATTENTE_DE_VALIDATION'
};

export type statut = (typeof statut)[keyof typeof statut]


export const typeTarif: {
  JOURNALIER: 'JOURNALIER',
  NUITEE: 'NUITEE',
  FIXE: 'FIXE',
  MENSUEL: 'MENSUEL'
};

export type typeTarif = (typeof typeTarif)[keyof typeof typeTarif]


export const priority: {
  URGENT: 'URGENT',
  POPULAIRE: 'POPULAIRE',
  RECOMMANDATION: 'RECOMMANDATION'
};

export type priority = (typeof priority)[keyof typeof priority]


export const categorieAnnonce: {
  IMMOBILIER: 'IMMOBILIER',
  VETEMENT: 'VETEMENT',
  EMPLOI_SERVICE: 'EMPLOI_SERVICE',
  VOITURE: 'VOITURE',
  LOISIR: 'LOISIR',
  MATERIEL: 'MATERIEL',
  MOBILIER: 'MOBILIER',
  DONS: 'DONS'
};

export type categorieAnnonce = (typeof categorieAnnonce)[keyof typeof categorieAnnonce]


export const duree: {
  MENSUEL: 'MENSUEL',
  TRIMESTRIEL: 'TRIMESTRIEL',
  SEMESTRIEL: 'SEMESTRIEL',
  ANNUEL: 'ANNUEL'
};

export type duree = (typeof duree)[keyof typeof duree]


export const statutPartenaire: {
  ACTIF: 'ACTIF',
  SUSPENDU: 'SUSPENDU'
};

export type statutPartenaire = (typeof statutPartenaire)[keyof typeof statutPartenaire]


export const transactionStatus: {
  PENDING: 'PENDING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED'
};

export type transactionStatus = (typeof transactionStatus)[keyof typeof transactionStatus]

}

export type statutUser = $Enums.statutUser

export const statutUser: typeof $Enums.statutUser

export type secteurActivite = $Enums.secteurActivite

export const secteurActivite: typeof $Enums.secteurActivite

export type role = $Enums.role

export const role: typeof $Enums.role

export type typeSociete = $Enums.typeSociete

export const typeSociete: typeof $Enums.typeSociete

export type statut = $Enums.statut

export const statut: typeof $Enums.statut

export type typeTarif = $Enums.typeTarif

export const typeTarif: typeof $Enums.typeTarif

export type priority = $Enums.priority

export const priority: typeof $Enums.priority

export type categorieAnnonce = $Enums.categorieAnnonce

export const categorieAnnonce: typeof $Enums.categorieAnnonce

export type duree = $Enums.duree

export const duree: typeof $Enums.duree

export type statutPartenaire = $Enums.statutPartenaire

export const statutPartenaire: typeof $Enums.statutPartenaire

export type transactionStatus = $Enums.transactionStatus

export const transactionStatus: typeof $Enums.transactionStatus

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Newsletters
 * const newsletters = await prisma.newsletter.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Newsletters
   * const newsletters = await prisma.newsletter.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.newsletter`: Exposes CRUD operations for the **newsletter** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Newsletters
    * const newsletters = await prisma.newsletter.findMany()
    * ```
    */
  get newsletter(): Prisma.newsletterDelegate<ExtArgs>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **user** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.userDelegate<ExtArgs>;

  /**
   * `prisma.company`: Exposes CRUD operations for the **company** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Companies
    * const companies = await prisma.company.findMany()
    * ```
    */
  get company(): Prisma.companyDelegate<ExtArgs>;

  /**
   * `prisma.profileImage`: Exposes CRUD operations for the **profileImage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProfileImages
    * const profileImages = await prisma.profileImage.findMany()
    * ```
    */
  get profileImage(): Prisma.profileImageDelegate<ExtArgs>;

  /**
   * `prisma.favoris`: Exposes CRUD operations for the **favoris** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Favorises
    * const favorises = await prisma.favoris.findMany()
    * ```
    */
  get favoris(): Prisma.favorisDelegate<ExtArgs>;

  /**
   * `prisma.annonces`: Exposes CRUD operations for the **annonces** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Annonces
    * const annonces = await prisma.annonces.findMany()
    * ```
    */
  get annonces(): Prisma.annoncesDelegate<ExtArgs>;

  /**
   * `prisma.imageAnnonce`: Exposes CRUD operations for the **imageAnnonce** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ImageAnnonces
    * const imageAnnonces = await prisma.imageAnnonce.findMany()
    * ```
    */
  get imageAnnonce(): Prisma.imageAnnonceDelegate<ExtArgs>;

  /**
   * `prisma.commentaire`: Exposes CRUD operations for the **commentaire** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Commentaires
    * const commentaires = await prisma.commentaire.findMany()
    * ```
    */
  get commentaire(): Prisma.commentaireDelegate<ExtArgs>;

  /**
   * `prisma.temoignages`: Exposes CRUD operations for the **temoignages** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Temoignages
    * const temoignages = await prisma.temoignages.findMany()
    * ```
    */
  get temoignages(): Prisma.temoignagesDelegate<ExtArgs>;

  /**
   * `prisma.adresseFacturation`: Exposes CRUD operations for the **adresseFacturation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AdresseFacturations
    * const adresseFacturations = await prisma.adresseFacturation.findMany()
    * ```
    */
  get adresseFacturation(): Prisma.adresseFacturationDelegate<ExtArgs>;

  /**
   * `prisma.engagement`: Exposes CRUD operations for the **engagement** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Engagements
    * const engagements = await prisma.engagement.findMany()
    * ```
    */
  get engagement(): Prisma.engagementDelegate<ExtArgs>;

  /**
   * `prisma.contenuPartenaire`: Exposes CRUD operations for the **contenuPartenaire** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ContenuPartenaires
    * const contenuPartenaires = await prisma.contenuPartenaire.findMany()
    * ```
    */
  get contenuPartenaire(): Prisma.contenuPartenaireDelegate<ExtArgs>;

  /**
   * `prisma.logo`: Exposes CRUD operations for the **logo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Logos
    * const logos = await prisma.logo.findMany()
    * ```
    */
  get logo(): Prisma.logoDelegate<ExtArgs>;

  /**
   * `prisma.article`: Exposes CRUD operations for the **article** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Articles
    * const articles = await prisma.article.findMany()
    * ```
    */
  get article(): Prisma.articleDelegate<ExtArgs>;

  /**
   * `prisma.image`: Exposes CRUD operations for the **image** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Images
    * const images = await prisma.image.findMany()
    * ```
    */
  get image(): Prisma.imageDelegate<ExtArgs>;

  /**
   * `prisma.transactions`: Exposes CRUD operations for the **transactions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Transactions
    * const transactions = await prisma.transactions.findMany()
    * ```
    */
  get transactions(): Prisma.transactionsDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.1.0
   * Query Engine version: 11f085a2012c0f4778414c8db2651556ee0ef959
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    newsletter: 'newsletter',
    user: 'user',
    company: 'company',
    profileImage: 'profileImage',
    favoris: 'favoris',
    annonces: 'annonces',
    imageAnnonce: 'imageAnnonce',
    commentaire: 'commentaire',
    temoignages: 'temoignages',
    adresseFacturation: 'adresseFacturation',
    engagement: 'engagement',
    contenuPartenaire: 'contenuPartenaire',
    logo: 'logo',
    article: 'article',
    image: 'image',
    transactions: 'transactions'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "newsletter" | "user" | "company" | "profileImage" | "favoris" | "annonces" | "imageAnnonce" | "commentaire" | "temoignages" | "adresseFacturation" | "engagement" | "contenuPartenaire" | "logo" | "article" | "image" | "transactions"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      newsletter: {
        payload: Prisma.$newsletterPayload<ExtArgs>
        fields: Prisma.newsletterFieldRefs
        operations: {
          findUnique: {
            args: Prisma.newsletterFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$newsletterPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.newsletterFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$newsletterPayload>
          }
          findFirst: {
            args: Prisma.newsletterFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$newsletterPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.newsletterFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$newsletterPayload>
          }
          findMany: {
            args: Prisma.newsletterFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$newsletterPayload>[]
          }
          create: {
            args: Prisma.newsletterCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$newsletterPayload>
          }
          createMany: {
            args: Prisma.newsletterCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.newsletterCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$newsletterPayload>[]
          }
          delete: {
            args: Prisma.newsletterDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$newsletterPayload>
          }
          update: {
            args: Prisma.newsletterUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$newsletterPayload>
          }
          deleteMany: {
            args: Prisma.newsletterDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.newsletterUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.newsletterUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$newsletterPayload>
          }
          aggregate: {
            args: Prisma.NewsletterAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNewsletter>
          }
          groupBy: {
            args: Prisma.newsletterGroupByArgs<ExtArgs>
            result: $Utils.Optional<NewsletterGroupByOutputType>[]
          }
          count: {
            args: Prisma.newsletterCountArgs<ExtArgs>
            result: $Utils.Optional<NewsletterCountAggregateOutputType> | number
          }
        }
      }
      user: {
        payload: Prisma.$userPayload<ExtArgs>
        fields: Prisma.userFieldRefs
        operations: {
          findUnique: {
            args: Prisma.userFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.userFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          findFirst: {
            args: Prisma.userFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.userFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          findMany: {
            args: Prisma.userFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>[]
          }
          create: {
            args: Prisma.userCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          createMany: {
            args: Prisma.userCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.userCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>[]
          }
          delete: {
            args: Prisma.userDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          update: {
            args: Prisma.userUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          deleteMany: {
            args: Prisma.userDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.userUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.userUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.userGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.userCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      company: {
        payload: Prisma.$companyPayload<ExtArgs>
        fields: Prisma.companyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.companyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$companyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.companyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$companyPayload>
          }
          findFirst: {
            args: Prisma.companyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$companyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.companyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$companyPayload>
          }
          findMany: {
            args: Prisma.companyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$companyPayload>[]
          }
          create: {
            args: Prisma.companyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$companyPayload>
          }
          createMany: {
            args: Prisma.companyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.companyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$companyPayload>[]
          }
          delete: {
            args: Prisma.companyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$companyPayload>
          }
          update: {
            args: Prisma.companyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$companyPayload>
          }
          deleteMany: {
            args: Prisma.companyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.companyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.companyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$companyPayload>
          }
          aggregate: {
            args: Prisma.CompanyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCompany>
          }
          groupBy: {
            args: Prisma.companyGroupByArgs<ExtArgs>
            result: $Utils.Optional<CompanyGroupByOutputType>[]
          }
          count: {
            args: Prisma.companyCountArgs<ExtArgs>
            result: $Utils.Optional<CompanyCountAggregateOutputType> | number
          }
        }
      }
      profileImage: {
        payload: Prisma.$profileImagePayload<ExtArgs>
        fields: Prisma.profileImageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.profileImageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$profileImagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.profileImageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$profileImagePayload>
          }
          findFirst: {
            args: Prisma.profileImageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$profileImagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.profileImageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$profileImagePayload>
          }
          findMany: {
            args: Prisma.profileImageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$profileImagePayload>[]
          }
          create: {
            args: Prisma.profileImageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$profileImagePayload>
          }
          createMany: {
            args: Prisma.profileImageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.profileImageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$profileImagePayload>[]
          }
          delete: {
            args: Prisma.profileImageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$profileImagePayload>
          }
          update: {
            args: Prisma.profileImageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$profileImagePayload>
          }
          deleteMany: {
            args: Prisma.profileImageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.profileImageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.profileImageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$profileImagePayload>
          }
          aggregate: {
            args: Prisma.ProfileImageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProfileImage>
          }
          groupBy: {
            args: Prisma.profileImageGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProfileImageGroupByOutputType>[]
          }
          count: {
            args: Prisma.profileImageCountArgs<ExtArgs>
            result: $Utils.Optional<ProfileImageCountAggregateOutputType> | number
          }
        }
      }
      favoris: {
        payload: Prisma.$favorisPayload<ExtArgs>
        fields: Prisma.favorisFieldRefs
        operations: {
          findUnique: {
            args: Prisma.favorisFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$favorisPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.favorisFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$favorisPayload>
          }
          findFirst: {
            args: Prisma.favorisFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$favorisPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.favorisFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$favorisPayload>
          }
          findMany: {
            args: Prisma.favorisFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$favorisPayload>[]
          }
          create: {
            args: Prisma.favorisCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$favorisPayload>
          }
          createMany: {
            args: Prisma.favorisCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.favorisCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$favorisPayload>[]
          }
          delete: {
            args: Prisma.favorisDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$favorisPayload>
          }
          update: {
            args: Prisma.favorisUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$favorisPayload>
          }
          deleteMany: {
            args: Prisma.favorisDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.favorisUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.favorisUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$favorisPayload>
          }
          aggregate: {
            args: Prisma.FavorisAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFavoris>
          }
          groupBy: {
            args: Prisma.favorisGroupByArgs<ExtArgs>
            result: $Utils.Optional<FavorisGroupByOutputType>[]
          }
          count: {
            args: Prisma.favorisCountArgs<ExtArgs>
            result: $Utils.Optional<FavorisCountAggregateOutputType> | number
          }
        }
      }
      annonces: {
        payload: Prisma.$annoncesPayload<ExtArgs>
        fields: Prisma.annoncesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.annoncesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$annoncesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.annoncesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$annoncesPayload>
          }
          findFirst: {
            args: Prisma.annoncesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$annoncesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.annoncesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$annoncesPayload>
          }
          findMany: {
            args: Prisma.annoncesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$annoncesPayload>[]
          }
          create: {
            args: Prisma.annoncesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$annoncesPayload>
          }
          createMany: {
            args: Prisma.annoncesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.annoncesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$annoncesPayload>[]
          }
          delete: {
            args: Prisma.annoncesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$annoncesPayload>
          }
          update: {
            args: Prisma.annoncesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$annoncesPayload>
          }
          deleteMany: {
            args: Prisma.annoncesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.annoncesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.annoncesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$annoncesPayload>
          }
          aggregate: {
            args: Prisma.AnnoncesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAnnonces>
          }
          groupBy: {
            args: Prisma.annoncesGroupByArgs<ExtArgs>
            result: $Utils.Optional<AnnoncesGroupByOutputType>[]
          }
          count: {
            args: Prisma.annoncesCountArgs<ExtArgs>
            result: $Utils.Optional<AnnoncesCountAggregateOutputType> | number
          }
        }
      }
      imageAnnonce: {
        payload: Prisma.$imageAnnoncePayload<ExtArgs>
        fields: Prisma.imageAnnonceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.imageAnnonceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$imageAnnoncePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.imageAnnonceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$imageAnnoncePayload>
          }
          findFirst: {
            args: Prisma.imageAnnonceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$imageAnnoncePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.imageAnnonceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$imageAnnoncePayload>
          }
          findMany: {
            args: Prisma.imageAnnonceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$imageAnnoncePayload>[]
          }
          create: {
            args: Prisma.imageAnnonceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$imageAnnoncePayload>
          }
          createMany: {
            args: Prisma.imageAnnonceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.imageAnnonceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$imageAnnoncePayload>[]
          }
          delete: {
            args: Prisma.imageAnnonceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$imageAnnoncePayload>
          }
          update: {
            args: Prisma.imageAnnonceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$imageAnnoncePayload>
          }
          deleteMany: {
            args: Prisma.imageAnnonceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.imageAnnonceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.imageAnnonceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$imageAnnoncePayload>
          }
          aggregate: {
            args: Prisma.ImageAnnonceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateImageAnnonce>
          }
          groupBy: {
            args: Prisma.imageAnnonceGroupByArgs<ExtArgs>
            result: $Utils.Optional<ImageAnnonceGroupByOutputType>[]
          }
          count: {
            args: Prisma.imageAnnonceCountArgs<ExtArgs>
            result: $Utils.Optional<ImageAnnonceCountAggregateOutputType> | number
          }
        }
      }
      commentaire: {
        payload: Prisma.$commentairePayload<ExtArgs>
        fields: Prisma.commentaireFieldRefs
        operations: {
          findUnique: {
            args: Prisma.commentaireFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$commentairePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.commentaireFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$commentairePayload>
          }
          findFirst: {
            args: Prisma.commentaireFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$commentairePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.commentaireFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$commentairePayload>
          }
          findMany: {
            args: Prisma.commentaireFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$commentairePayload>[]
          }
          create: {
            args: Prisma.commentaireCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$commentairePayload>
          }
          createMany: {
            args: Prisma.commentaireCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.commentaireCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$commentairePayload>[]
          }
          delete: {
            args: Prisma.commentaireDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$commentairePayload>
          }
          update: {
            args: Prisma.commentaireUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$commentairePayload>
          }
          deleteMany: {
            args: Prisma.commentaireDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.commentaireUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.commentaireUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$commentairePayload>
          }
          aggregate: {
            args: Prisma.CommentaireAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCommentaire>
          }
          groupBy: {
            args: Prisma.commentaireGroupByArgs<ExtArgs>
            result: $Utils.Optional<CommentaireGroupByOutputType>[]
          }
          count: {
            args: Prisma.commentaireCountArgs<ExtArgs>
            result: $Utils.Optional<CommentaireCountAggregateOutputType> | number
          }
        }
      }
      temoignages: {
        payload: Prisma.$temoignagesPayload<ExtArgs>
        fields: Prisma.temoignagesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.temoignagesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$temoignagesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.temoignagesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$temoignagesPayload>
          }
          findFirst: {
            args: Prisma.temoignagesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$temoignagesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.temoignagesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$temoignagesPayload>
          }
          findMany: {
            args: Prisma.temoignagesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$temoignagesPayload>[]
          }
          create: {
            args: Prisma.temoignagesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$temoignagesPayload>
          }
          createMany: {
            args: Prisma.temoignagesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.temoignagesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$temoignagesPayload>[]
          }
          delete: {
            args: Prisma.temoignagesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$temoignagesPayload>
          }
          update: {
            args: Prisma.temoignagesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$temoignagesPayload>
          }
          deleteMany: {
            args: Prisma.temoignagesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.temoignagesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.temoignagesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$temoignagesPayload>
          }
          aggregate: {
            args: Prisma.TemoignagesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTemoignages>
          }
          groupBy: {
            args: Prisma.temoignagesGroupByArgs<ExtArgs>
            result: $Utils.Optional<TemoignagesGroupByOutputType>[]
          }
          count: {
            args: Prisma.temoignagesCountArgs<ExtArgs>
            result: $Utils.Optional<TemoignagesCountAggregateOutputType> | number
          }
        }
      }
      adresseFacturation: {
        payload: Prisma.$adresseFacturationPayload<ExtArgs>
        fields: Prisma.adresseFacturationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.adresseFacturationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adresseFacturationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.adresseFacturationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adresseFacturationPayload>
          }
          findFirst: {
            args: Prisma.adresseFacturationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adresseFacturationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.adresseFacturationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adresseFacturationPayload>
          }
          findMany: {
            args: Prisma.adresseFacturationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adresseFacturationPayload>[]
          }
          create: {
            args: Prisma.adresseFacturationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adresseFacturationPayload>
          }
          createMany: {
            args: Prisma.adresseFacturationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.adresseFacturationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adresseFacturationPayload>[]
          }
          delete: {
            args: Prisma.adresseFacturationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adresseFacturationPayload>
          }
          update: {
            args: Prisma.adresseFacturationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adresseFacturationPayload>
          }
          deleteMany: {
            args: Prisma.adresseFacturationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.adresseFacturationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.adresseFacturationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adresseFacturationPayload>
          }
          aggregate: {
            args: Prisma.AdresseFacturationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAdresseFacturation>
          }
          groupBy: {
            args: Prisma.adresseFacturationGroupByArgs<ExtArgs>
            result: $Utils.Optional<AdresseFacturationGroupByOutputType>[]
          }
          count: {
            args: Prisma.adresseFacturationCountArgs<ExtArgs>
            result: $Utils.Optional<AdresseFacturationCountAggregateOutputType> | number
          }
        }
      }
      engagement: {
        payload: Prisma.$engagementPayload<ExtArgs>
        fields: Prisma.engagementFieldRefs
        operations: {
          findUnique: {
            args: Prisma.engagementFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$engagementPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.engagementFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$engagementPayload>
          }
          findFirst: {
            args: Prisma.engagementFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$engagementPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.engagementFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$engagementPayload>
          }
          findMany: {
            args: Prisma.engagementFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$engagementPayload>[]
          }
          create: {
            args: Prisma.engagementCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$engagementPayload>
          }
          createMany: {
            args: Prisma.engagementCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.engagementCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$engagementPayload>[]
          }
          delete: {
            args: Prisma.engagementDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$engagementPayload>
          }
          update: {
            args: Prisma.engagementUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$engagementPayload>
          }
          deleteMany: {
            args: Prisma.engagementDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.engagementUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.engagementUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$engagementPayload>
          }
          aggregate: {
            args: Prisma.EngagementAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEngagement>
          }
          groupBy: {
            args: Prisma.engagementGroupByArgs<ExtArgs>
            result: $Utils.Optional<EngagementGroupByOutputType>[]
          }
          count: {
            args: Prisma.engagementCountArgs<ExtArgs>
            result: $Utils.Optional<EngagementCountAggregateOutputType> | number
          }
        }
      }
      contenuPartenaire: {
        payload: Prisma.$contenuPartenairePayload<ExtArgs>
        fields: Prisma.contenuPartenaireFieldRefs
        operations: {
          findUnique: {
            args: Prisma.contenuPartenaireFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contenuPartenairePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.contenuPartenaireFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contenuPartenairePayload>
          }
          findFirst: {
            args: Prisma.contenuPartenaireFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contenuPartenairePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.contenuPartenaireFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contenuPartenairePayload>
          }
          findMany: {
            args: Prisma.contenuPartenaireFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contenuPartenairePayload>[]
          }
          create: {
            args: Prisma.contenuPartenaireCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contenuPartenairePayload>
          }
          createMany: {
            args: Prisma.contenuPartenaireCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.contenuPartenaireCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contenuPartenairePayload>[]
          }
          delete: {
            args: Prisma.contenuPartenaireDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contenuPartenairePayload>
          }
          update: {
            args: Prisma.contenuPartenaireUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contenuPartenairePayload>
          }
          deleteMany: {
            args: Prisma.contenuPartenaireDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.contenuPartenaireUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.contenuPartenaireUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contenuPartenairePayload>
          }
          aggregate: {
            args: Prisma.ContenuPartenaireAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateContenuPartenaire>
          }
          groupBy: {
            args: Prisma.contenuPartenaireGroupByArgs<ExtArgs>
            result: $Utils.Optional<ContenuPartenaireGroupByOutputType>[]
          }
          count: {
            args: Prisma.contenuPartenaireCountArgs<ExtArgs>
            result: $Utils.Optional<ContenuPartenaireCountAggregateOutputType> | number
          }
        }
      }
      logo: {
        payload: Prisma.$logoPayload<ExtArgs>
        fields: Prisma.logoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.logoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$logoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.logoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$logoPayload>
          }
          findFirst: {
            args: Prisma.logoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$logoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.logoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$logoPayload>
          }
          findMany: {
            args: Prisma.logoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$logoPayload>[]
          }
          create: {
            args: Prisma.logoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$logoPayload>
          }
          createMany: {
            args: Prisma.logoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.logoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$logoPayload>[]
          }
          delete: {
            args: Prisma.logoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$logoPayload>
          }
          update: {
            args: Prisma.logoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$logoPayload>
          }
          deleteMany: {
            args: Prisma.logoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.logoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.logoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$logoPayload>
          }
          aggregate: {
            args: Prisma.LogoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLogo>
          }
          groupBy: {
            args: Prisma.logoGroupByArgs<ExtArgs>
            result: $Utils.Optional<LogoGroupByOutputType>[]
          }
          count: {
            args: Prisma.logoCountArgs<ExtArgs>
            result: $Utils.Optional<LogoCountAggregateOutputType> | number
          }
        }
      }
      article: {
        payload: Prisma.$articlePayload<ExtArgs>
        fields: Prisma.articleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.articleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$articlePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.articleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$articlePayload>
          }
          findFirst: {
            args: Prisma.articleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$articlePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.articleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$articlePayload>
          }
          findMany: {
            args: Prisma.articleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$articlePayload>[]
          }
          create: {
            args: Prisma.articleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$articlePayload>
          }
          createMany: {
            args: Prisma.articleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.articleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$articlePayload>[]
          }
          delete: {
            args: Prisma.articleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$articlePayload>
          }
          update: {
            args: Prisma.articleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$articlePayload>
          }
          deleteMany: {
            args: Prisma.articleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.articleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.articleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$articlePayload>
          }
          aggregate: {
            args: Prisma.ArticleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateArticle>
          }
          groupBy: {
            args: Prisma.articleGroupByArgs<ExtArgs>
            result: $Utils.Optional<ArticleGroupByOutputType>[]
          }
          count: {
            args: Prisma.articleCountArgs<ExtArgs>
            result: $Utils.Optional<ArticleCountAggregateOutputType> | number
          }
        }
      }
      image: {
        payload: Prisma.$imagePayload<ExtArgs>
        fields: Prisma.imageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.imageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$imagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.imageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$imagePayload>
          }
          findFirst: {
            args: Prisma.imageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$imagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.imageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$imagePayload>
          }
          findMany: {
            args: Prisma.imageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$imagePayload>[]
          }
          create: {
            args: Prisma.imageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$imagePayload>
          }
          createMany: {
            args: Prisma.imageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.imageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$imagePayload>[]
          }
          delete: {
            args: Prisma.imageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$imagePayload>
          }
          update: {
            args: Prisma.imageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$imagePayload>
          }
          deleteMany: {
            args: Prisma.imageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.imageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.imageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$imagePayload>
          }
          aggregate: {
            args: Prisma.ImageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateImage>
          }
          groupBy: {
            args: Prisma.imageGroupByArgs<ExtArgs>
            result: $Utils.Optional<ImageGroupByOutputType>[]
          }
          count: {
            args: Prisma.imageCountArgs<ExtArgs>
            result: $Utils.Optional<ImageCountAggregateOutputType> | number
          }
        }
      }
      transactions: {
        payload: Prisma.$transactionsPayload<ExtArgs>
        fields: Prisma.transactionsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.transactionsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transactionsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.transactionsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transactionsPayload>
          }
          findFirst: {
            args: Prisma.transactionsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transactionsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.transactionsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transactionsPayload>
          }
          findMany: {
            args: Prisma.transactionsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transactionsPayload>[]
          }
          create: {
            args: Prisma.transactionsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transactionsPayload>
          }
          createMany: {
            args: Prisma.transactionsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.transactionsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transactionsPayload>[]
          }
          delete: {
            args: Prisma.transactionsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transactionsPayload>
          }
          update: {
            args: Prisma.transactionsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transactionsPayload>
          }
          deleteMany: {
            args: Prisma.transactionsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.transactionsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.transactionsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transactionsPayload>
          }
          aggregate: {
            args: Prisma.TransactionsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTransactions>
          }
          groupBy: {
            args: Prisma.transactionsGroupByArgs<ExtArgs>
            result: $Utils.Optional<TransactionsGroupByOutputType>[]
          }
          count: {
            args: Prisma.transactionsCountArgs<ExtArgs>
            result: $Utils.Optional<TransactionsCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    profileImages: number
    annonces: number
    commentaire: number
    favoris: number
    temoignages: number
    transactions: number
    adresseFacturation: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profileImages?: boolean | UserCountOutputTypeCountProfileImagesArgs
    annonces?: boolean | UserCountOutputTypeCountAnnoncesArgs
    commentaire?: boolean | UserCountOutputTypeCountCommentaireArgs
    favoris?: boolean | UserCountOutputTypeCountFavorisArgs
    temoignages?: boolean | UserCountOutputTypeCountTemoignagesArgs
    transactions?: boolean | UserCountOutputTypeCountTransactionsArgs
    adresseFacturation?: boolean | UserCountOutputTypeCountAdresseFacturationArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountProfileImagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: profileImageWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAnnoncesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: annoncesWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCommentaireArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: commentaireWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFavorisArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: favorisWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTemoignagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: temoignagesWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: transactionsWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAdresseFacturationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: adresseFacturationWhereInput
  }


  /**
   * Count Type CompanyCountOutputType
   */

  export type CompanyCountOutputType = {
    users: number
  }

  export type CompanyCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | CompanyCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyCountOutputType
     */
    select?: CompanyCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: userWhereInput
  }


  /**
   * Count Type AnnoncesCountOutputType
   */

  export type AnnoncesCountOutputType = {
    imageAnnonces: number
    commentaire: number
    favoris: number
    transactions: number
  }

  export type AnnoncesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    imageAnnonces?: boolean | AnnoncesCountOutputTypeCountImageAnnoncesArgs
    commentaire?: boolean | AnnoncesCountOutputTypeCountCommentaireArgs
    favoris?: boolean | AnnoncesCountOutputTypeCountFavorisArgs
    transactions?: boolean | AnnoncesCountOutputTypeCountTransactionsArgs
  }

  // Custom InputTypes
  /**
   * AnnoncesCountOutputType without action
   */
  export type AnnoncesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnnoncesCountOutputType
     */
    select?: AnnoncesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AnnoncesCountOutputType without action
   */
  export type AnnoncesCountOutputTypeCountImageAnnoncesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: imageAnnonceWhereInput
  }

  /**
   * AnnoncesCountOutputType without action
   */
  export type AnnoncesCountOutputTypeCountCommentaireArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: commentaireWhereInput
  }

  /**
   * AnnoncesCountOutputType without action
   */
  export type AnnoncesCountOutputTypeCountFavorisArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: favorisWhereInput
  }

  /**
   * AnnoncesCountOutputType without action
   */
  export type AnnoncesCountOutputTypeCountTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: transactionsWhereInput
  }


  /**
   * Count Type EngagementCountOutputType
   */

  export type EngagementCountOutputType = {
    logo: number
    contenuPartenaire: number
  }

  export type EngagementCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    logo?: boolean | EngagementCountOutputTypeCountLogoArgs
    contenuPartenaire?: boolean | EngagementCountOutputTypeCountContenuPartenaireArgs
  }

  // Custom InputTypes
  /**
   * EngagementCountOutputType without action
   */
  export type EngagementCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EngagementCountOutputType
     */
    select?: EngagementCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EngagementCountOutputType without action
   */
  export type EngagementCountOutputTypeCountLogoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: logoWhereInput
  }

  /**
   * EngagementCountOutputType without action
   */
  export type EngagementCountOutputTypeCountContenuPartenaireArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: contenuPartenaireWhereInput
  }


  /**
   * Count Type ArticleCountOutputType
   */

  export type ArticleCountOutputType = {
    images: number
  }

  export type ArticleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    images?: boolean | ArticleCountOutputTypeCountImagesArgs
  }

  // Custom InputTypes
  /**
   * ArticleCountOutputType without action
   */
  export type ArticleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArticleCountOutputType
     */
    select?: ArticleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ArticleCountOutputType without action
   */
  export type ArticleCountOutputTypeCountImagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: imageWhereInput
  }


  /**
   * Models
   */

  /**
   * Model newsletter
   */

  export type AggregateNewsletter = {
    _count: NewsletterCountAggregateOutputType | null
    _avg: NewsletterAvgAggregateOutputType | null
    _sum: NewsletterSumAggregateOutputType | null
    _min: NewsletterMinAggregateOutputType | null
    _max: NewsletterMaxAggregateOutputType | null
  }

  export type NewsletterAvgAggregateOutputType = {
    id: number | null
  }

  export type NewsletterSumAggregateOutputType = {
    id: number | null
  }

  export type NewsletterMinAggregateOutputType = {
    id: number | null
    email: string | null
    unsubscribeToken: string | null
  }

  export type NewsletterMaxAggregateOutputType = {
    id: number | null
    email: string | null
    unsubscribeToken: string | null
  }

  export type NewsletterCountAggregateOutputType = {
    id: number
    email: number
    unsubscribeToken: number
    _all: number
  }


  export type NewsletterAvgAggregateInputType = {
    id?: true
  }

  export type NewsletterSumAggregateInputType = {
    id?: true
  }

  export type NewsletterMinAggregateInputType = {
    id?: true
    email?: true
    unsubscribeToken?: true
  }

  export type NewsletterMaxAggregateInputType = {
    id?: true
    email?: true
    unsubscribeToken?: true
  }

  export type NewsletterCountAggregateInputType = {
    id?: true
    email?: true
    unsubscribeToken?: true
    _all?: true
  }

  export type NewsletterAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which newsletter to aggregate.
     */
    where?: newsletterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of newsletters to fetch.
     */
    orderBy?: newsletterOrderByWithRelationInput | newsletterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: newsletterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` newsletters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` newsletters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned newsletters
    **/
    _count?: true | NewsletterCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NewsletterAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NewsletterSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NewsletterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NewsletterMaxAggregateInputType
  }

  export type GetNewsletterAggregateType<T extends NewsletterAggregateArgs> = {
        [P in keyof T & keyof AggregateNewsletter]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNewsletter[P]>
      : GetScalarType<T[P], AggregateNewsletter[P]>
  }




  export type newsletterGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: newsletterWhereInput
    orderBy?: newsletterOrderByWithAggregationInput | newsletterOrderByWithAggregationInput[]
    by: NewsletterScalarFieldEnum[] | NewsletterScalarFieldEnum
    having?: newsletterScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NewsletterCountAggregateInputType | true
    _avg?: NewsletterAvgAggregateInputType
    _sum?: NewsletterSumAggregateInputType
    _min?: NewsletterMinAggregateInputType
    _max?: NewsletterMaxAggregateInputType
  }

  export type NewsletterGroupByOutputType = {
    id: number
    email: string
    unsubscribeToken: string | null
    _count: NewsletterCountAggregateOutputType | null
    _avg: NewsletterAvgAggregateOutputType | null
    _sum: NewsletterSumAggregateOutputType | null
    _min: NewsletterMinAggregateOutputType | null
    _max: NewsletterMaxAggregateOutputType | null
  }

  type GetNewsletterGroupByPayload<T extends newsletterGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NewsletterGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NewsletterGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NewsletterGroupByOutputType[P]>
            : GetScalarType<T[P], NewsletterGroupByOutputType[P]>
        }
      >
    >


  export type newsletterSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    unsubscribeToken?: boolean
  }, ExtArgs["result"]["newsletter"]>

  export type newsletterSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    unsubscribeToken?: boolean
  }, ExtArgs["result"]["newsletter"]>

  export type newsletterSelectScalar = {
    id?: boolean
    email?: boolean
    unsubscribeToken?: boolean
  }


  export type $newsletterPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "newsletter"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      unsubscribeToken: string | null
    }, ExtArgs["result"]["newsletter"]>
    composites: {}
  }

  type newsletterGetPayload<S extends boolean | null | undefined | newsletterDefaultArgs> = $Result.GetResult<Prisma.$newsletterPayload, S>

  type newsletterCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<newsletterFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NewsletterCountAggregateInputType | true
    }

  export interface newsletterDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['newsletter'], meta: { name: 'newsletter' } }
    /**
     * Find zero or one Newsletter that matches the filter.
     * @param {newsletterFindUniqueArgs} args - Arguments to find a Newsletter
     * @example
     * // Get one Newsletter
     * const newsletter = await prisma.newsletter.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends newsletterFindUniqueArgs>(args: SelectSubset<T, newsletterFindUniqueArgs<ExtArgs>>): Prisma__newsletterClient<$Result.GetResult<Prisma.$newsletterPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Newsletter that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {newsletterFindUniqueOrThrowArgs} args - Arguments to find a Newsletter
     * @example
     * // Get one Newsletter
     * const newsletter = await prisma.newsletter.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends newsletterFindUniqueOrThrowArgs>(args: SelectSubset<T, newsletterFindUniqueOrThrowArgs<ExtArgs>>): Prisma__newsletterClient<$Result.GetResult<Prisma.$newsletterPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Newsletter that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {newsletterFindFirstArgs} args - Arguments to find a Newsletter
     * @example
     * // Get one Newsletter
     * const newsletter = await prisma.newsletter.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends newsletterFindFirstArgs>(args?: SelectSubset<T, newsletterFindFirstArgs<ExtArgs>>): Prisma__newsletterClient<$Result.GetResult<Prisma.$newsletterPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Newsletter that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {newsletterFindFirstOrThrowArgs} args - Arguments to find a Newsletter
     * @example
     * // Get one Newsletter
     * const newsletter = await prisma.newsletter.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends newsletterFindFirstOrThrowArgs>(args?: SelectSubset<T, newsletterFindFirstOrThrowArgs<ExtArgs>>): Prisma__newsletterClient<$Result.GetResult<Prisma.$newsletterPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Newsletters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {newsletterFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Newsletters
     * const newsletters = await prisma.newsletter.findMany()
     * 
     * // Get first 10 Newsletters
     * const newsletters = await prisma.newsletter.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const newsletterWithIdOnly = await prisma.newsletter.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends newsletterFindManyArgs>(args?: SelectSubset<T, newsletterFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$newsletterPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Newsletter.
     * @param {newsletterCreateArgs} args - Arguments to create a Newsletter.
     * @example
     * // Create one Newsletter
     * const Newsletter = await prisma.newsletter.create({
     *   data: {
     *     // ... data to create a Newsletter
     *   }
     * })
     * 
     */
    create<T extends newsletterCreateArgs>(args: SelectSubset<T, newsletterCreateArgs<ExtArgs>>): Prisma__newsletterClient<$Result.GetResult<Prisma.$newsletterPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Newsletters.
     * @param {newsletterCreateManyArgs} args - Arguments to create many Newsletters.
     * @example
     * // Create many Newsletters
     * const newsletter = await prisma.newsletter.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends newsletterCreateManyArgs>(args?: SelectSubset<T, newsletterCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Newsletters and returns the data saved in the database.
     * @param {newsletterCreateManyAndReturnArgs} args - Arguments to create many Newsletters.
     * @example
     * // Create many Newsletters
     * const newsletter = await prisma.newsletter.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Newsletters and only return the `id`
     * const newsletterWithIdOnly = await prisma.newsletter.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends newsletterCreateManyAndReturnArgs>(args?: SelectSubset<T, newsletterCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$newsletterPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Newsletter.
     * @param {newsletterDeleteArgs} args - Arguments to delete one Newsletter.
     * @example
     * // Delete one Newsletter
     * const Newsletter = await prisma.newsletter.delete({
     *   where: {
     *     // ... filter to delete one Newsletter
     *   }
     * })
     * 
     */
    delete<T extends newsletterDeleteArgs>(args: SelectSubset<T, newsletterDeleteArgs<ExtArgs>>): Prisma__newsletterClient<$Result.GetResult<Prisma.$newsletterPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Newsletter.
     * @param {newsletterUpdateArgs} args - Arguments to update one Newsletter.
     * @example
     * // Update one Newsletter
     * const newsletter = await prisma.newsletter.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends newsletterUpdateArgs>(args: SelectSubset<T, newsletterUpdateArgs<ExtArgs>>): Prisma__newsletterClient<$Result.GetResult<Prisma.$newsletterPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Newsletters.
     * @param {newsletterDeleteManyArgs} args - Arguments to filter Newsletters to delete.
     * @example
     * // Delete a few Newsletters
     * const { count } = await prisma.newsletter.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends newsletterDeleteManyArgs>(args?: SelectSubset<T, newsletterDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Newsletters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {newsletterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Newsletters
     * const newsletter = await prisma.newsletter.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends newsletterUpdateManyArgs>(args: SelectSubset<T, newsletterUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Newsletter.
     * @param {newsletterUpsertArgs} args - Arguments to update or create a Newsletter.
     * @example
     * // Update or create a Newsletter
     * const newsletter = await prisma.newsletter.upsert({
     *   create: {
     *     // ... data to create a Newsletter
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Newsletter we want to update
     *   }
     * })
     */
    upsert<T extends newsletterUpsertArgs>(args: SelectSubset<T, newsletterUpsertArgs<ExtArgs>>): Prisma__newsletterClient<$Result.GetResult<Prisma.$newsletterPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Newsletters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {newsletterCountArgs} args - Arguments to filter Newsletters to count.
     * @example
     * // Count the number of Newsletters
     * const count = await prisma.newsletter.count({
     *   where: {
     *     // ... the filter for the Newsletters we want to count
     *   }
     * })
    **/
    count<T extends newsletterCountArgs>(
      args?: Subset<T, newsletterCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NewsletterCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Newsletter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsletterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NewsletterAggregateArgs>(args: Subset<T, NewsletterAggregateArgs>): Prisma.PrismaPromise<GetNewsletterAggregateType<T>>

    /**
     * Group by Newsletter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {newsletterGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends newsletterGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: newsletterGroupByArgs['orderBy'] }
        : { orderBy?: newsletterGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, newsletterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNewsletterGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the newsletter model
   */
  readonly fields: newsletterFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for newsletter.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__newsletterClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the newsletter model
   */ 
  interface newsletterFieldRefs {
    readonly id: FieldRef<"newsletter", 'Int'>
    readonly email: FieldRef<"newsletter", 'String'>
    readonly unsubscribeToken: FieldRef<"newsletter", 'String'>
  }
    

  // Custom InputTypes
  /**
   * newsletter findUnique
   */
  export type newsletterFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the newsletter
     */
    select?: newsletterSelect<ExtArgs> | null
    /**
     * Filter, which newsletter to fetch.
     */
    where: newsletterWhereUniqueInput
  }

  /**
   * newsletter findUniqueOrThrow
   */
  export type newsletterFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the newsletter
     */
    select?: newsletterSelect<ExtArgs> | null
    /**
     * Filter, which newsletter to fetch.
     */
    where: newsletterWhereUniqueInput
  }

  /**
   * newsletter findFirst
   */
  export type newsletterFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the newsletter
     */
    select?: newsletterSelect<ExtArgs> | null
    /**
     * Filter, which newsletter to fetch.
     */
    where?: newsletterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of newsletters to fetch.
     */
    orderBy?: newsletterOrderByWithRelationInput | newsletterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for newsletters.
     */
    cursor?: newsletterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` newsletters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` newsletters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of newsletters.
     */
    distinct?: NewsletterScalarFieldEnum | NewsletterScalarFieldEnum[]
  }

  /**
   * newsletter findFirstOrThrow
   */
  export type newsletterFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the newsletter
     */
    select?: newsletterSelect<ExtArgs> | null
    /**
     * Filter, which newsletter to fetch.
     */
    where?: newsletterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of newsletters to fetch.
     */
    orderBy?: newsletterOrderByWithRelationInput | newsletterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for newsletters.
     */
    cursor?: newsletterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` newsletters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` newsletters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of newsletters.
     */
    distinct?: NewsletterScalarFieldEnum | NewsletterScalarFieldEnum[]
  }

  /**
   * newsletter findMany
   */
  export type newsletterFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the newsletter
     */
    select?: newsletterSelect<ExtArgs> | null
    /**
     * Filter, which newsletters to fetch.
     */
    where?: newsletterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of newsletters to fetch.
     */
    orderBy?: newsletterOrderByWithRelationInput | newsletterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing newsletters.
     */
    cursor?: newsletterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` newsletters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` newsletters.
     */
    skip?: number
    distinct?: NewsletterScalarFieldEnum | NewsletterScalarFieldEnum[]
  }

  /**
   * newsletter create
   */
  export type newsletterCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the newsletter
     */
    select?: newsletterSelect<ExtArgs> | null
    /**
     * The data needed to create a newsletter.
     */
    data: XOR<newsletterCreateInput, newsletterUncheckedCreateInput>
  }

  /**
   * newsletter createMany
   */
  export type newsletterCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many newsletters.
     */
    data: newsletterCreateManyInput | newsletterCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * newsletter createManyAndReturn
   */
  export type newsletterCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the newsletter
     */
    select?: newsletterSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many newsletters.
     */
    data: newsletterCreateManyInput | newsletterCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * newsletter update
   */
  export type newsletterUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the newsletter
     */
    select?: newsletterSelect<ExtArgs> | null
    /**
     * The data needed to update a newsletter.
     */
    data: XOR<newsletterUpdateInput, newsletterUncheckedUpdateInput>
    /**
     * Choose, which newsletter to update.
     */
    where: newsletterWhereUniqueInput
  }

  /**
   * newsletter updateMany
   */
  export type newsletterUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update newsletters.
     */
    data: XOR<newsletterUpdateManyMutationInput, newsletterUncheckedUpdateManyInput>
    /**
     * Filter which newsletters to update
     */
    where?: newsletterWhereInput
  }

  /**
   * newsletter upsert
   */
  export type newsletterUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the newsletter
     */
    select?: newsletterSelect<ExtArgs> | null
    /**
     * The filter to search for the newsletter to update in case it exists.
     */
    where: newsletterWhereUniqueInput
    /**
     * In case the newsletter found by the `where` argument doesn't exist, create a new newsletter with this data.
     */
    create: XOR<newsletterCreateInput, newsletterUncheckedCreateInput>
    /**
     * In case the newsletter was found with the provided `where` argument, update it with this data.
     */
    update: XOR<newsletterUpdateInput, newsletterUncheckedUpdateInput>
  }

  /**
   * newsletter delete
   */
  export type newsletterDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the newsletter
     */
    select?: newsletterSelect<ExtArgs> | null
    /**
     * Filter which newsletter to delete.
     */
    where: newsletterWhereUniqueInput
  }

  /**
   * newsletter deleteMany
   */
  export type newsletterDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which newsletters to delete
     */
    where?: newsletterWhereInput
  }

  /**
   * newsletter without action
   */
  export type newsletterDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the newsletter
     */
    select?: newsletterSelect<ExtArgs> | null
  }


  /**
   * Model user
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    companyId: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    companyId: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    nom: string | null
    prenom: string | null
    email: string | null
    phone: string | null
    hashPassword: string | null
    statutUser: $Enums.statutUser | null
    role: $Enums.role | null
    createdAt: Date | null
    updatedAt: Date | null
    companyId: number | null
    stripeAccountId: string | null
    stripeAccountCompleted: boolean | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    nom: string | null
    prenom: string | null
    email: string | null
    phone: string | null
    hashPassword: string | null
    statutUser: $Enums.statutUser | null
    role: $Enums.role | null
    createdAt: Date | null
    updatedAt: Date | null
    companyId: number | null
    stripeAccountId: string | null
    stripeAccountCompleted: boolean | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    nom: number
    prenom: number
    email: number
    phone: number
    hashPassword: number
    statutUser: number
    role: number
    createdAt: number
    updatedAt: number
    companyId: number
    stripeAccountId: number
    stripeAccountCompleted: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    companyId?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    companyId?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    nom?: true
    prenom?: true
    email?: true
    phone?: true
    hashPassword?: true
    statutUser?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    companyId?: true
    stripeAccountId?: true
    stripeAccountCompleted?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    nom?: true
    prenom?: true
    email?: true
    phone?: true
    hashPassword?: true
    statutUser?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    companyId?: true
    stripeAccountId?: true
    stripeAccountCompleted?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    nom?: true
    prenom?: true
    email?: true
    phone?: true
    hashPassword?: true
    statutUser?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    companyId?: true
    stripeAccountId?: true
    stripeAccountCompleted?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which user to aggregate.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type userGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: userWhereInput
    orderBy?: userOrderByWithAggregationInput | userOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: userScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    nom: string
    prenom: string
    email: string
    phone: string
    hashPassword: string
    statutUser: $Enums.statutUser
    role: $Enums.role
    createdAt: Date
    updatedAt: Date
    companyId: number | null
    stripeAccountId: string | null
    stripeAccountCompleted: boolean
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends userGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type userSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
    prenom?: boolean
    email?: boolean
    phone?: boolean
    hashPassword?: boolean
    statutUser?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    companyId?: boolean
    stripeAccountId?: boolean
    stripeAccountCompleted?: boolean
    profileImages?: boolean | user$profileImagesArgs<ExtArgs>
    company?: boolean | user$companyArgs<ExtArgs>
    annonces?: boolean | user$annoncesArgs<ExtArgs>
    commentaire?: boolean | user$commentaireArgs<ExtArgs>
    favoris?: boolean | user$favorisArgs<ExtArgs>
    temoignages?: boolean | user$temoignagesArgs<ExtArgs>
    transactions?: boolean | user$transactionsArgs<ExtArgs>
    adresseFacturation?: boolean | user$adresseFacturationArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type userSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
    prenom?: boolean
    email?: boolean
    phone?: boolean
    hashPassword?: boolean
    statutUser?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    companyId?: boolean
    stripeAccountId?: boolean
    stripeAccountCompleted?: boolean
    company?: boolean | user$companyArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type userSelectScalar = {
    id?: boolean
    nom?: boolean
    prenom?: boolean
    email?: boolean
    phone?: boolean
    hashPassword?: boolean
    statutUser?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    companyId?: boolean
    stripeAccountId?: boolean
    stripeAccountCompleted?: boolean
  }

  export type userInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profileImages?: boolean | user$profileImagesArgs<ExtArgs>
    company?: boolean | user$companyArgs<ExtArgs>
    annonces?: boolean | user$annoncesArgs<ExtArgs>
    commentaire?: boolean | user$commentaireArgs<ExtArgs>
    favoris?: boolean | user$favorisArgs<ExtArgs>
    temoignages?: boolean | user$temoignagesArgs<ExtArgs>
    transactions?: boolean | user$transactionsArgs<ExtArgs>
    adresseFacturation?: boolean | user$adresseFacturationArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type userIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | user$companyArgs<ExtArgs>
  }

  export type $userPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "user"
    objects: {
      profileImages: Prisma.$profileImagePayload<ExtArgs>[]
      company: Prisma.$companyPayload<ExtArgs> | null
      annonces: Prisma.$annoncesPayload<ExtArgs>[]
      commentaire: Prisma.$commentairePayload<ExtArgs>[]
      favoris: Prisma.$favorisPayload<ExtArgs>[]
      temoignages: Prisma.$temoignagesPayload<ExtArgs>[]
      transactions: Prisma.$transactionsPayload<ExtArgs>[]
      adresseFacturation: Prisma.$adresseFacturationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nom: string
      prenom: string
      email: string
      phone: string
      hashPassword: string
      statutUser: $Enums.statutUser
      role: $Enums.role
      createdAt: Date
      updatedAt: Date
      companyId: number | null
      stripeAccountId: string | null
      stripeAccountCompleted: boolean
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type userGetPayload<S extends boolean | null | undefined | userDefaultArgs> = $Result.GetResult<Prisma.$userPayload, S>

  type userCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<userFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface userDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['user'], meta: { name: 'user' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {userFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends userFindUniqueArgs>(args: SelectSubset<T, userFindUniqueArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {userFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends userFindUniqueOrThrowArgs>(args: SelectSubset<T, userFindUniqueOrThrowArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends userFindFirstArgs>(args?: SelectSubset<T, userFindFirstArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends userFindFirstOrThrowArgs>(args?: SelectSubset<T, userFindFirstOrThrowArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends userFindManyArgs>(args?: SelectSubset<T, userFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {userCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends userCreateArgs>(args: SelectSubset<T, userCreateArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {userCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends userCreateManyArgs>(args?: SelectSubset<T, userCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {userCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends userCreateManyAndReturnArgs>(args?: SelectSubset<T, userCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {userDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends userDeleteArgs>(args: SelectSubset<T, userDeleteArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {userUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends userUpdateArgs>(args: SelectSubset<T, userUpdateArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {userDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends userDeleteManyArgs>(args?: SelectSubset<T, userDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends userUpdateManyArgs>(args: SelectSubset<T, userUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {userUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends userUpsertArgs>(args: SelectSubset<T, userUpsertArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends userCountArgs>(
      args?: Subset<T, userCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends userGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: userGroupByArgs['orderBy'] }
        : { orderBy?: userGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, userGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the user model
   */
  readonly fields: userFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for user.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__userClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    profileImages<T extends user$profileImagesArgs<ExtArgs> = {}>(args?: Subset<T, user$profileImagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$profileImagePayload<ExtArgs>, T, "findMany"> | Null>
    company<T extends user$companyArgs<ExtArgs> = {}>(args?: Subset<T, user$companyArgs<ExtArgs>>): Prisma__companyClient<$Result.GetResult<Prisma.$companyPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    annonces<T extends user$annoncesArgs<ExtArgs> = {}>(args?: Subset<T, user$annoncesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$annoncesPayload<ExtArgs>, T, "findMany"> | Null>
    commentaire<T extends user$commentaireArgs<ExtArgs> = {}>(args?: Subset<T, user$commentaireArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$commentairePayload<ExtArgs>, T, "findMany"> | Null>
    favoris<T extends user$favorisArgs<ExtArgs> = {}>(args?: Subset<T, user$favorisArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$favorisPayload<ExtArgs>, T, "findMany"> | Null>
    temoignages<T extends user$temoignagesArgs<ExtArgs> = {}>(args?: Subset<T, user$temoignagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$temoignagesPayload<ExtArgs>, T, "findMany"> | Null>
    transactions<T extends user$transactionsArgs<ExtArgs> = {}>(args?: Subset<T, user$transactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$transactionsPayload<ExtArgs>, T, "findMany"> | Null>
    adresseFacturation<T extends user$adresseFacturationArgs<ExtArgs> = {}>(args?: Subset<T, user$adresseFacturationArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$adresseFacturationPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the user model
   */ 
  interface userFieldRefs {
    readonly id: FieldRef<"user", 'Int'>
    readonly nom: FieldRef<"user", 'String'>
    readonly prenom: FieldRef<"user", 'String'>
    readonly email: FieldRef<"user", 'String'>
    readonly phone: FieldRef<"user", 'String'>
    readonly hashPassword: FieldRef<"user", 'String'>
    readonly statutUser: FieldRef<"user", 'statutUser'>
    readonly role: FieldRef<"user", 'role'>
    readonly createdAt: FieldRef<"user", 'DateTime'>
    readonly updatedAt: FieldRef<"user", 'DateTime'>
    readonly companyId: FieldRef<"user", 'Int'>
    readonly stripeAccountId: FieldRef<"user", 'String'>
    readonly stripeAccountCompleted: FieldRef<"user", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * user findUnique
   */
  export type userFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where: userWhereUniqueInput
  }

  /**
   * user findUniqueOrThrow
   */
  export type userFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where: userWhereUniqueInput
  }

  /**
   * user findFirst
   */
  export type userFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * user findFirstOrThrow
   */
  export type userFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * user findMany
   */
  export type userFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * user create
   */
  export type userCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * The data needed to create a user.
     */
    data: XOR<userCreateInput, userUncheckedCreateInput>
  }

  /**
   * user createMany
   */
  export type userCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: userCreateManyInput | userCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * user createManyAndReturn
   */
  export type userCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many users.
     */
    data: userCreateManyInput | userCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * user update
   */
  export type userUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * The data needed to update a user.
     */
    data: XOR<userUpdateInput, userUncheckedUpdateInput>
    /**
     * Choose, which user to update.
     */
    where: userWhereUniqueInput
  }

  /**
   * user updateMany
   */
  export type userUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<userUpdateManyMutationInput, userUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: userWhereInput
  }

  /**
   * user upsert
   */
  export type userUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * The filter to search for the user to update in case it exists.
     */
    where: userWhereUniqueInput
    /**
     * In case the user found by the `where` argument doesn't exist, create a new user with this data.
     */
    create: XOR<userCreateInput, userUncheckedCreateInput>
    /**
     * In case the user was found with the provided `where` argument, update it with this data.
     */
    update: XOR<userUpdateInput, userUncheckedUpdateInput>
  }

  /**
   * user delete
   */
  export type userDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter which user to delete.
     */
    where: userWhereUniqueInput
  }

  /**
   * user deleteMany
   */
  export type userDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: userWhereInput
  }

  /**
   * user.profileImages
   */
  export type user$profileImagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the profileImage
     */
    select?: profileImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: profileImageInclude<ExtArgs> | null
    where?: profileImageWhereInput
    orderBy?: profileImageOrderByWithRelationInput | profileImageOrderByWithRelationInput[]
    cursor?: profileImageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProfileImageScalarFieldEnum | ProfileImageScalarFieldEnum[]
  }

  /**
   * user.company
   */
  export type user$companyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the company
     */
    select?: companySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: companyInclude<ExtArgs> | null
    where?: companyWhereInput
  }

  /**
   * user.annonces
   */
  export type user$annoncesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the annonces
     */
    select?: annoncesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: annoncesInclude<ExtArgs> | null
    where?: annoncesWhereInput
    orderBy?: annoncesOrderByWithRelationInput | annoncesOrderByWithRelationInput[]
    cursor?: annoncesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AnnoncesScalarFieldEnum | AnnoncesScalarFieldEnum[]
  }

  /**
   * user.commentaire
   */
  export type user$commentaireArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the commentaire
     */
    select?: commentaireSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: commentaireInclude<ExtArgs> | null
    where?: commentaireWhereInput
    orderBy?: commentaireOrderByWithRelationInput | commentaireOrderByWithRelationInput[]
    cursor?: commentaireWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentaireScalarFieldEnum | CommentaireScalarFieldEnum[]
  }

  /**
   * user.favoris
   */
  export type user$favorisArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the favoris
     */
    select?: favorisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: favorisInclude<ExtArgs> | null
    where?: favorisWhereInput
    orderBy?: favorisOrderByWithRelationInput | favorisOrderByWithRelationInput[]
    cursor?: favorisWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FavorisScalarFieldEnum | FavorisScalarFieldEnum[]
  }

  /**
   * user.temoignages
   */
  export type user$temoignagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the temoignages
     */
    select?: temoignagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: temoignagesInclude<ExtArgs> | null
    where?: temoignagesWhereInput
    orderBy?: temoignagesOrderByWithRelationInput | temoignagesOrderByWithRelationInput[]
    cursor?: temoignagesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TemoignagesScalarFieldEnum | TemoignagesScalarFieldEnum[]
  }

  /**
   * user.transactions
   */
  export type user$transactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactionsInclude<ExtArgs> | null
    where?: transactionsWhereInput
    orderBy?: transactionsOrderByWithRelationInput | transactionsOrderByWithRelationInput[]
    cursor?: transactionsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransactionsScalarFieldEnum | TransactionsScalarFieldEnum[]
  }

  /**
   * user.adresseFacturation
   */
  export type user$adresseFacturationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the adresseFacturation
     */
    select?: adresseFacturationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: adresseFacturationInclude<ExtArgs> | null
    where?: adresseFacturationWhereInput
    orderBy?: adresseFacturationOrderByWithRelationInput | adresseFacturationOrderByWithRelationInput[]
    cursor?: adresseFacturationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AdresseFacturationScalarFieldEnum | AdresseFacturationScalarFieldEnum[]
  }

  /**
   * user without action
   */
  export type userDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
  }


  /**
   * Model company
   */

  export type AggregateCompany = {
    _count: CompanyCountAggregateOutputType | null
    _avg: CompanyAvgAggregateOutputType | null
    _sum: CompanySumAggregateOutputType | null
    _min: CompanyMinAggregateOutputType | null
    _max: CompanyMaxAggregateOutputType | null
  }

  export type CompanyAvgAggregateOutputType = {
    id: number | null
  }

  export type CompanySumAggregateOutputType = {
    id: number | null
  }

  export type CompanyMinAggregateOutputType = {
    id: number | null
    siret: string | null
    nomSociete: string | null
    codePostal: string | null
    adresse: string | null
    ville: string | null
    createdAt: Date | null
    updatedAt: Date | null
    secteurActivite: $Enums.secteurActivite | null
    typeSociete: $Enums.typeSociete | null
  }

  export type CompanyMaxAggregateOutputType = {
    id: number | null
    siret: string | null
    nomSociete: string | null
    codePostal: string | null
    adresse: string | null
    ville: string | null
    createdAt: Date | null
    updatedAt: Date | null
    secteurActivite: $Enums.secteurActivite | null
    typeSociete: $Enums.typeSociete | null
  }

  export type CompanyCountAggregateOutputType = {
    id: number
    siret: number
    nomSociete: number
    codePostal: number
    adresse: number
    ville: number
    createdAt: number
    updatedAt: number
    secteurActivite: number
    typeSociete: number
    _all: number
  }


  export type CompanyAvgAggregateInputType = {
    id?: true
  }

  export type CompanySumAggregateInputType = {
    id?: true
  }

  export type CompanyMinAggregateInputType = {
    id?: true
    siret?: true
    nomSociete?: true
    codePostal?: true
    adresse?: true
    ville?: true
    createdAt?: true
    updatedAt?: true
    secteurActivite?: true
    typeSociete?: true
  }

  export type CompanyMaxAggregateInputType = {
    id?: true
    siret?: true
    nomSociete?: true
    codePostal?: true
    adresse?: true
    ville?: true
    createdAt?: true
    updatedAt?: true
    secteurActivite?: true
    typeSociete?: true
  }

  export type CompanyCountAggregateInputType = {
    id?: true
    siret?: true
    nomSociete?: true
    codePostal?: true
    adresse?: true
    ville?: true
    createdAt?: true
    updatedAt?: true
    secteurActivite?: true
    typeSociete?: true
    _all?: true
  }

  export type CompanyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which company to aggregate.
     */
    where?: companyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of companies to fetch.
     */
    orderBy?: companyOrderByWithRelationInput | companyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: companyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned companies
    **/
    _count?: true | CompanyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CompanyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CompanySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompanyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompanyMaxAggregateInputType
  }

  export type GetCompanyAggregateType<T extends CompanyAggregateArgs> = {
        [P in keyof T & keyof AggregateCompany]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompany[P]>
      : GetScalarType<T[P], AggregateCompany[P]>
  }




  export type companyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: companyWhereInput
    orderBy?: companyOrderByWithAggregationInput | companyOrderByWithAggregationInput[]
    by: CompanyScalarFieldEnum[] | CompanyScalarFieldEnum
    having?: companyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompanyCountAggregateInputType | true
    _avg?: CompanyAvgAggregateInputType
    _sum?: CompanySumAggregateInputType
    _min?: CompanyMinAggregateInputType
    _max?: CompanyMaxAggregateInputType
  }

  export type CompanyGroupByOutputType = {
    id: number
    siret: string
    nomSociete: string
    codePostal: string
    adresse: string
    ville: string
    createdAt: Date
    updatedAt: Date
    secteurActivite: $Enums.secteurActivite
    typeSociete: $Enums.typeSociete
    _count: CompanyCountAggregateOutputType | null
    _avg: CompanyAvgAggregateOutputType | null
    _sum: CompanySumAggregateOutputType | null
    _min: CompanyMinAggregateOutputType | null
    _max: CompanyMaxAggregateOutputType | null
  }

  type GetCompanyGroupByPayload<T extends companyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CompanyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompanyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompanyGroupByOutputType[P]>
            : GetScalarType<T[P], CompanyGroupByOutputType[P]>
        }
      >
    >


  export type companySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    siret?: boolean
    nomSociete?: boolean
    codePostal?: boolean
    adresse?: boolean
    ville?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    secteurActivite?: boolean
    typeSociete?: boolean
    users?: boolean | company$usersArgs<ExtArgs>
    _count?: boolean | CompanyCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["company"]>

  export type companySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    siret?: boolean
    nomSociete?: boolean
    codePostal?: boolean
    adresse?: boolean
    ville?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    secteurActivite?: boolean
    typeSociete?: boolean
  }, ExtArgs["result"]["company"]>

  export type companySelectScalar = {
    id?: boolean
    siret?: boolean
    nomSociete?: boolean
    codePostal?: boolean
    adresse?: boolean
    ville?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    secteurActivite?: boolean
    typeSociete?: boolean
  }

  export type companyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | company$usersArgs<ExtArgs>
    _count?: boolean | CompanyCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type companyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $companyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "company"
    objects: {
      users: Prisma.$userPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      siret: string
      nomSociete: string
      codePostal: string
      adresse: string
      ville: string
      createdAt: Date
      updatedAt: Date
      secteurActivite: $Enums.secteurActivite
      typeSociete: $Enums.typeSociete
    }, ExtArgs["result"]["company"]>
    composites: {}
  }

  type companyGetPayload<S extends boolean | null | undefined | companyDefaultArgs> = $Result.GetResult<Prisma.$companyPayload, S>

  type companyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<companyFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CompanyCountAggregateInputType | true
    }

  export interface companyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['company'], meta: { name: 'company' } }
    /**
     * Find zero or one Company that matches the filter.
     * @param {companyFindUniqueArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends companyFindUniqueArgs>(args: SelectSubset<T, companyFindUniqueArgs<ExtArgs>>): Prisma__companyClient<$Result.GetResult<Prisma.$companyPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Company that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {companyFindUniqueOrThrowArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends companyFindUniqueOrThrowArgs>(args: SelectSubset<T, companyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__companyClient<$Result.GetResult<Prisma.$companyPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Company that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {companyFindFirstArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends companyFindFirstArgs>(args?: SelectSubset<T, companyFindFirstArgs<ExtArgs>>): Prisma__companyClient<$Result.GetResult<Prisma.$companyPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Company that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {companyFindFirstOrThrowArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends companyFindFirstOrThrowArgs>(args?: SelectSubset<T, companyFindFirstOrThrowArgs<ExtArgs>>): Prisma__companyClient<$Result.GetResult<Prisma.$companyPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Companies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {companyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Companies
     * const companies = await prisma.company.findMany()
     * 
     * // Get first 10 Companies
     * const companies = await prisma.company.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const companyWithIdOnly = await prisma.company.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends companyFindManyArgs>(args?: SelectSubset<T, companyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$companyPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Company.
     * @param {companyCreateArgs} args - Arguments to create a Company.
     * @example
     * // Create one Company
     * const Company = await prisma.company.create({
     *   data: {
     *     // ... data to create a Company
     *   }
     * })
     * 
     */
    create<T extends companyCreateArgs>(args: SelectSubset<T, companyCreateArgs<ExtArgs>>): Prisma__companyClient<$Result.GetResult<Prisma.$companyPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Companies.
     * @param {companyCreateManyArgs} args - Arguments to create many Companies.
     * @example
     * // Create many Companies
     * const company = await prisma.company.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends companyCreateManyArgs>(args?: SelectSubset<T, companyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Companies and returns the data saved in the database.
     * @param {companyCreateManyAndReturnArgs} args - Arguments to create many Companies.
     * @example
     * // Create many Companies
     * const company = await prisma.company.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Companies and only return the `id`
     * const companyWithIdOnly = await prisma.company.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends companyCreateManyAndReturnArgs>(args?: SelectSubset<T, companyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$companyPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Company.
     * @param {companyDeleteArgs} args - Arguments to delete one Company.
     * @example
     * // Delete one Company
     * const Company = await prisma.company.delete({
     *   where: {
     *     // ... filter to delete one Company
     *   }
     * })
     * 
     */
    delete<T extends companyDeleteArgs>(args: SelectSubset<T, companyDeleteArgs<ExtArgs>>): Prisma__companyClient<$Result.GetResult<Prisma.$companyPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Company.
     * @param {companyUpdateArgs} args - Arguments to update one Company.
     * @example
     * // Update one Company
     * const company = await prisma.company.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends companyUpdateArgs>(args: SelectSubset<T, companyUpdateArgs<ExtArgs>>): Prisma__companyClient<$Result.GetResult<Prisma.$companyPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Companies.
     * @param {companyDeleteManyArgs} args - Arguments to filter Companies to delete.
     * @example
     * // Delete a few Companies
     * const { count } = await prisma.company.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends companyDeleteManyArgs>(args?: SelectSubset<T, companyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {companyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Companies
     * const company = await prisma.company.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends companyUpdateManyArgs>(args: SelectSubset<T, companyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Company.
     * @param {companyUpsertArgs} args - Arguments to update or create a Company.
     * @example
     * // Update or create a Company
     * const company = await prisma.company.upsert({
     *   create: {
     *     // ... data to create a Company
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Company we want to update
     *   }
     * })
     */
    upsert<T extends companyUpsertArgs>(args: SelectSubset<T, companyUpsertArgs<ExtArgs>>): Prisma__companyClient<$Result.GetResult<Prisma.$companyPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {companyCountArgs} args - Arguments to filter Companies to count.
     * @example
     * // Count the number of Companies
     * const count = await prisma.company.count({
     *   where: {
     *     // ... the filter for the Companies we want to count
     *   }
     * })
    **/
    count<T extends companyCountArgs>(
      args?: Subset<T, companyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompanyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Company.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompanyAggregateArgs>(args: Subset<T, CompanyAggregateArgs>): Prisma.PrismaPromise<GetCompanyAggregateType<T>>

    /**
     * Group by Company.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {companyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends companyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: companyGroupByArgs['orderBy'] }
        : { orderBy?: companyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, companyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompanyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the company model
   */
  readonly fields: companyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for company.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__companyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends company$usersArgs<ExtArgs> = {}>(args?: Subset<T, company$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the company model
   */ 
  interface companyFieldRefs {
    readonly id: FieldRef<"company", 'Int'>
    readonly siret: FieldRef<"company", 'String'>
    readonly nomSociete: FieldRef<"company", 'String'>
    readonly codePostal: FieldRef<"company", 'String'>
    readonly adresse: FieldRef<"company", 'String'>
    readonly ville: FieldRef<"company", 'String'>
    readonly createdAt: FieldRef<"company", 'DateTime'>
    readonly updatedAt: FieldRef<"company", 'DateTime'>
    readonly secteurActivite: FieldRef<"company", 'secteurActivite'>
    readonly typeSociete: FieldRef<"company", 'typeSociete'>
  }
    

  // Custom InputTypes
  /**
   * company findUnique
   */
  export type companyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the company
     */
    select?: companySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: companyInclude<ExtArgs> | null
    /**
     * Filter, which company to fetch.
     */
    where: companyWhereUniqueInput
  }

  /**
   * company findUniqueOrThrow
   */
  export type companyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the company
     */
    select?: companySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: companyInclude<ExtArgs> | null
    /**
     * Filter, which company to fetch.
     */
    where: companyWhereUniqueInput
  }

  /**
   * company findFirst
   */
  export type companyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the company
     */
    select?: companySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: companyInclude<ExtArgs> | null
    /**
     * Filter, which company to fetch.
     */
    where?: companyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of companies to fetch.
     */
    orderBy?: companyOrderByWithRelationInput | companyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for companies.
     */
    cursor?: companyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of companies.
     */
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * company findFirstOrThrow
   */
  export type companyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the company
     */
    select?: companySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: companyInclude<ExtArgs> | null
    /**
     * Filter, which company to fetch.
     */
    where?: companyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of companies to fetch.
     */
    orderBy?: companyOrderByWithRelationInput | companyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for companies.
     */
    cursor?: companyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of companies.
     */
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * company findMany
   */
  export type companyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the company
     */
    select?: companySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: companyInclude<ExtArgs> | null
    /**
     * Filter, which companies to fetch.
     */
    where?: companyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of companies to fetch.
     */
    orderBy?: companyOrderByWithRelationInput | companyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing companies.
     */
    cursor?: companyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` companies.
     */
    skip?: number
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * company create
   */
  export type companyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the company
     */
    select?: companySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: companyInclude<ExtArgs> | null
    /**
     * The data needed to create a company.
     */
    data: XOR<companyCreateInput, companyUncheckedCreateInput>
  }

  /**
   * company createMany
   */
  export type companyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many companies.
     */
    data: companyCreateManyInput | companyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * company createManyAndReturn
   */
  export type companyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the company
     */
    select?: companySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many companies.
     */
    data: companyCreateManyInput | companyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * company update
   */
  export type companyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the company
     */
    select?: companySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: companyInclude<ExtArgs> | null
    /**
     * The data needed to update a company.
     */
    data: XOR<companyUpdateInput, companyUncheckedUpdateInput>
    /**
     * Choose, which company to update.
     */
    where: companyWhereUniqueInput
  }

  /**
   * company updateMany
   */
  export type companyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update companies.
     */
    data: XOR<companyUpdateManyMutationInput, companyUncheckedUpdateManyInput>
    /**
     * Filter which companies to update
     */
    where?: companyWhereInput
  }

  /**
   * company upsert
   */
  export type companyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the company
     */
    select?: companySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: companyInclude<ExtArgs> | null
    /**
     * The filter to search for the company to update in case it exists.
     */
    where: companyWhereUniqueInput
    /**
     * In case the company found by the `where` argument doesn't exist, create a new company with this data.
     */
    create: XOR<companyCreateInput, companyUncheckedCreateInput>
    /**
     * In case the company was found with the provided `where` argument, update it with this data.
     */
    update: XOR<companyUpdateInput, companyUncheckedUpdateInput>
  }

  /**
   * company delete
   */
  export type companyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the company
     */
    select?: companySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: companyInclude<ExtArgs> | null
    /**
     * Filter which company to delete.
     */
    where: companyWhereUniqueInput
  }

  /**
   * company deleteMany
   */
  export type companyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which companies to delete
     */
    where?: companyWhereInput
  }

  /**
   * company.users
   */
  export type company$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    where?: userWhereInput
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    cursor?: userWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * company without action
   */
  export type companyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the company
     */
    select?: companySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: companyInclude<ExtArgs> | null
  }


  /**
   * Model profileImage
   */

  export type AggregateProfileImage = {
    _count: ProfileImageCountAggregateOutputType | null
    _avg: ProfileImageAvgAggregateOutputType | null
    _sum: ProfileImageSumAggregateOutputType | null
    _min: ProfileImageMinAggregateOutputType | null
    _max: ProfileImageMaxAggregateOutputType | null
  }

  export type ProfileImageAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type ProfileImageSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type ProfileImageMinAggregateOutputType = {
    id: number | null
    path: string | null
    userId: number | null
  }

  export type ProfileImageMaxAggregateOutputType = {
    id: number | null
    path: string | null
    userId: number | null
  }

  export type ProfileImageCountAggregateOutputType = {
    id: number
    path: number
    userId: number
    _all: number
  }


  export type ProfileImageAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type ProfileImageSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type ProfileImageMinAggregateInputType = {
    id?: true
    path?: true
    userId?: true
  }

  export type ProfileImageMaxAggregateInputType = {
    id?: true
    path?: true
    userId?: true
  }

  export type ProfileImageCountAggregateInputType = {
    id?: true
    path?: true
    userId?: true
    _all?: true
  }

  export type ProfileImageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which profileImage to aggregate.
     */
    where?: profileImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of profileImages to fetch.
     */
    orderBy?: profileImageOrderByWithRelationInput | profileImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: profileImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` profileImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` profileImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned profileImages
    **/
    _count?: true | ProfileImageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProfileImageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProfileImageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfileImageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfileImageMaxAggregateInputType
  }

  export type GetProfileImageAggregateType<T extends ProfileImageAggregateArgs> = {
        [P in keyof T & keyof AggregateProfileImage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfileImage[P]>
      : GetScalarType<T[P], AggregateProfileImage[P]>
  }




  export type profileImageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: profileImageWhereInput
    orderBy?: profileImageOrderByWithAggregationInput | profileImageOrderByWithAggregationInput[]
    by: ProfileImageScalarFieldEnum[] | ProfileImageScalarFieldEnum
    having?: profileImageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfileImageCountAggregateInputType | true
    _avg?: ProfileImageAvgAggregateInputType
    _sum?: ProfileImageSumAggregateInputType
    _min?: ProfileImageMinAggregateInputType
    _max?: ProfileImageMaxAggregateInputType
  }

  export type ProfileImageGroupByOutputType = {
    id: number
    path: string
    userId: number
    _count: ProfileImageCountAggregateOutputType | null
    _avg: ProfileImageAvgAggregateOutputType | null
    _sum: ProfileImageSumAggregateOutputType | null
    _min: ProfileImageMinAggregateOutputType | null
    _max: ProfileImageMaxAggregateOutputType | null
  }

  type GetProfileImageGroupByPayload<T extends profileImageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProfileImageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfileImageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfileImageGroupByOutputType[P]>
            : GetScalarType<T[P], ProfileImageGroupByOutputType[P]>
        }
      >
    >


  export type profileImageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    path?: boolean
    userId?: boolean
    user?: boolean | userDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["profileImage"]>

  export type profileImageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    path?: boolean
    userId?: boolean
    user?: boolean | userDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["profileImage"]>

  export type profileImageSelectScalar = {
    id?: boolean
    path?: boolean
    userId?: boolean
  }

  export type profileImageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | userDefaultArgs<ExtArgs>
  }
  export type profileImageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | userDefaultArgs<ExtArgs>
  }

  export type $profileImagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "profileImage"
    objects: {
      user: Prisma.$userPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      path: string
      userId: number
    }, ExtArgs["result"]["profileImage"]>
    composites: {}
  }

  type profileImageGetPayload<S extends boolean | null | undefined | profileImageDefaultArgs> = $Result.GetResult<Prisma.$profileImagePayload, S>

  type profileImageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<profileImageFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProfileImageCountAggregateInputType | true
    }

  export interface profileImageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['profileImage'], meta: { name: 'profileImage' } }
    /**
     * Find zero or one ProfileImage that matches the filter.
     * @param {profileImageFindUniqueArgs} args - Arguments to find a ProfileImage
     * @example
     * // Get one ProfileImage
     * const profileImage = await prisma.profileImage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends profileImageFindUniqueArgs>(args: SelectSubset<T, profileImageFindUniqueArgs<ExtArgs>>): Prisma__profileImageClient<$Result.GetResult<Prisma.$profileImagePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ProfileImage that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {profileImageFindUniqueOrThrowArgs} args - Arguments to find a ProfileImage
     * @example
     * // Get one ProfileImage
     * const profileImage = await prisma.profileImage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends profileImageFindUniqueOrThrowArgs>(args: SelectSubset<T, profileImageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__profileImageClient<$Result.GetResult<Prisma.$profileImagePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ProfileImage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {profileImageFindFirstArgs} args - Arguments to find a ProfileImage
     * @example
     * // Get one ProfileImage
     * const profileImage = await prisma.profileImage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends profileImageFindFirstArgs>(args?: SelectSubset<T, profileImageFindFirstArgs<ExtArgs>>): Prisma__profileImageClient<$Result.GetResult<Prisma.$profileImagePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ProfileImage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {profileImageFindFirstOrThrowArgs} args - Arguments to find a ProfileImage
     * @example
     * // Get one ProfileImage
     * const profileImage = await prisma.profileImage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends profileImageFindFirstOrThrowArgs>(args?: SelectSubset<T, profileImageFindFirstOrThrowArgs<ExtArgs>>): Prisma__profileImageClient<$Result.GetResult<Prisma.$profileImagePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ProfileImages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {profileImageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProfileImages
     * const profileImages = await prisma.profileImage.findMany()
     * 
     * // Get first 10 ProfileImages
     * const profileImages = await prisma.profileImage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const profileImageWithIdOnly = await prisma.profileImage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends profileImageFindManyArgs>(args?: SelectSubset<T, profileImageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$profileImagePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ProfileImage.
     * @param {profileImageCreateArgs} args - Arguments to create a ProfileImage.
     * @example
     * // Create one ProfileImage
     * const ProfileImage = await prisma.profileImage.create({
     *   data: {
     *     // ... data to create a ProfileImage
     *   }
     * })
     * 
     */
    create<T extends profileImageCreateArgs>(args: SelectSubset<T, profileImageCreateArgs<ExtArgs>>): Prisma__profileImageClient<$Result.GetResult<Prisma.$profileImagePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ProfileImages.
     * @param {profileImageCreateManyArgs} args - Arguments to create many ProfileImages.
     * @example
     * // Create many ProfileImages
     * const profileImage = await prisma.profileImage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends profileImageCreateManyArgs>(args?: SelectSubset<T, profileImageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProfileImages and returns the data saved in the database.
     * @param {profileImageCreateManyAndReturnArgs} args - Arguments to create many ProfileImages.
     * @example
     * // Create many ProfileImages
     * const profileImage = await prisma.profileImage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProfileImages and only return the `id`
     * const profileImageWithIdOnly = await prisma.profileImage.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends profileImageCreateManyAndReturnArgs>(args?: SelectSubset<T, profileImageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$profileImagePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ProfileImage.
     * @param {profileImageDeleteArgs} args - Arguments to delete one ProfileImage.
     * @example
     * // Delete one ProfileImage
     * const ProfileImage = await prisma.profileImage.delete({
     *   where: {
     *     // ... filter to delete one ProfileImage
     *   }
     * })
     * 
     */
    delete<T extends profileImageDeleteArgs>(args: SelectSubset<T, profileImageDeleteArgs<ExtArgs>>): Prisma__profileImageClient<$Result.GetResult<Prisma.$profileImagePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ProfileImage.
     * @param {profileImageUpdateArgs} args - Arguments to update one ProfileImage.
     * @example
     * // Update one ProfileImage
     * const profileImage = await prisma.profileImage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends profileImageUpdateArgs>(args: SelectSubset<T, profileImageUpdateArgs<ExtArgs>>): Prisma__profileImageClient<$Result.GetResult<Prisma.$profileImagePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ProfileImages.
     * @param {profileImageDeleteManyArgs} args - Arguments to filter ProfileImages to delete.
     * @example
     * // Delete a few ProfileImages
     * const { count } = await prisma.profileImage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends profileImageDeleteManyArgs>(args?: SelectSubset<T, profileImageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProfileImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {profileImageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProfileImages
     * const profileImage = await prisma.profileImage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends profileImageUpdateManyArgs>(args: SelectSubset<T, profileImageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProfileImage.
     * @param {profileImageUpsertArgs} args - Arguments to update or create a ProfileImage.
     * @example
     * // Update or create a ProfileImage
     * const profileImage = await prisma.profileImage.upsert({
     *   create: {
     *     // ... data to create a ProfileImage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProfileImage we want to update
     *   }
     * })
     */
    upsert<T extends profileImageUpsertArgs>(args: SelectSubset<T, profileImageUpsertArgs<ExtArgs>>): Prisma__profileImageClient<$Result.GetResult<Prisma.$profileImagePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ProfileImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {profileImageCountArgs} args - Arguments to filter ProfileImages to count.
     * @example
     * // Count the number of ProfileImages
     * const count = await prisma.profileImage.count({
     *   where: {
     *     // ... the filter for the ProfileImages we want to count
     *   }
     * })
    **/
    count<T extends profileImageCountArgs>(
      args?: Subset<T, profileImageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfileImageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProfileImage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileImageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfileImageAggregateArgs>(args: Subset<T, ProfileImageAggregateArgs>): Prisma.PrismaPromise<GetProfileImageAggregateType<T>>

    /**
     * Group by ProfileImage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {profileImageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends profileImageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: profileImageGroupByArgs['orderBy'] }
        : { orderBy?: profileImageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, profileImageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfileImageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the profileImage model
   */
  readonly fields: profileImageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for profileImage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__profileImageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, userDefaultArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the profileImage model
   */ 
  interface profileImageFieldRefs {
    readonly id: FieldRef<"profileImage", 'Int'>
    readonly path: FieldRef<"profileImage", 'String'>
    readonly userId: FieldRef<"profileImage", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * profileImage findUnique
   */
  export type profileImageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the profileImage
     */
    select?: profileImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: profileImageInclude<ExtArgs> | null
    /**
     * Filter, which profileImage to fetch.
     */
    where: profileImageWhereUniqueInput
  }

  /**
   * profileImage findUniqueOrThrow
   */
  export type profileImageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the profileImage
     */
    select?: profileImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: profileImageInclude<ExtArgs> | null
    /**
     * Filter, which profileImage to fetch.
     */
    where: profileImageWhereUniqueInput
  }

  /**
   * profileImage findFirst
   */
  export type profileImageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the profileImage
     */
    select?: profileImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: profileImageInclude<ExtArgs> | null
    /**
     * Filter, which profileImage to fetch.
     */
    where?: profileImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of profileImages to fetch.
     */
    orderBy?: profileImageOrderByWithRelationInput | profileImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for profileImages.
     */
    cursor?: profileImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` profileImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` profileImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of profileImages.
     */
    distinct?: ProfileImageScalarFieldEnum | ProfileImageScalarFieldEnum[]
  }

  /**
   * profileImage findFirstOrThrow
   */
  export type profileImageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the profileImage
     */
    select?: profileImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: profileImageInclude<ExtArgs> | null
    /**
     * Filter, which profileImage to fetch.
     */
    where?: profileImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of profileImages to fetch.
     */
    orderBy?: profileImageOrderByWithRelationInput | profileImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for profileImages.
     */
    cursor?: profileImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` profileImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` profileImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of profileImages.
     */
    distinct?: ProfileImageScalarFieldEnum | ProfileImageScalarFieldEnum[]
  }

  /**
   * profileImage findMany
   */
  export type profileImageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the profileImage
     */
    select?: profileImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: profileImageInclude<ExtArgs> | null
    /**
     * Filter, which profileImages to fetch.
     */
    where?: profileImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of profileImages to fetch.
     */
    orderBy?: profileImageOrderByWithRelationInput | profileImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing profileImages.
     */
    cursor?: profileImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` profileImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` profileImages.
     */
    skip?: number
    distinct?: ProfileImageScalarFieldEnum | ProfileImageScalarFieldEnum[]
  }

  /**
   * profileImage create
   */
  export type profileImageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the profileImage
     */
    select?: profileImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: profileImageInclude<ExtArgs> | null
    /**
     * The data needed to create a profileImage.
     */
    data: XOR<profileImageCreateInput, profileImageUncheckedCreateInput>
  }

  /**
   * profileImage createMany
   */
  export type profileImageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many profileImages.
     */
    data: profileImageCreateManyInput | profileImageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * profileImage createManyAndReturn
   */
  export type profileImageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the profileImage
     */
    select?: profileImageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many profileImages.
     */
    data: profileImageCreateManyInput | profileImageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: profileImageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * profileImage update
   */
  export type profileImageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the profileImage
     */
    select?: profileImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: profileImageInclude<ExtArgs> | null
    /**
     * The data needed to update a profileImage.
     */
    data: XOR<profileImageUpdateInput, profileImageUncheckedUpdateInput>
    /**
     * Choose, which profileImage to update.
     */
    where: profileImageWhereUniqueInput
  }

  /**
   * profileImage updateMany
   */
  export type profileImageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update profileImages.
     */
    data: XOR<profileImageUpdateManyMutationInput, profileImageUncheckedUpdateManyInput>
    /**
     * Filter which profileImages to update
     */
    where?: profileImageWhereInput
  }

  /**
   * profileImage upsert
   */
  export type profileImageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the profileImage
     */
    select?: profileImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: profileImageInclude<ExtArgs> | null
    /**
     * The filter to search for the profileImage to update in case it exists.
     */
    where: profileImageWhereUniqueInput
    /**
     * In case the profileImage found by the `where` argument doesn't exist, create a new profileImage with this data.
     */
    create: XOR<profileImageCreateInput, profileImageUncheckedCreateInput>
    /**
     * In case the profileImage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<profileImageUpdateInput, profileImageUncheckedUpdateInput>
  }

  /**
   * profileImage delete
   */
  export type profileImageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the profileImage
     */
    select?: profileImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: profileImageInclude<ExtArgs> | null
    /**
     * Filter which profileImage to delete.
     */
    where: profileImageWhereUniqueInput
  }

  /**
   * profileImage deleteMany
   */
  export type profileImageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which profileImages to delete
     */
    where?: profileImageWhereInput
  }

  /**
   * profileImage without action
   */
  export type profileImageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the profileImage
     */
    select?: profileImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: profileImageInclude<ExtArgs> | null
  }


  /**
   * Model favoris
   */

  export type AggregateFavoris = {
    _count: FavorisCountAggregateOutputType | null
    _avg: FavorisAvgAggregateOutputType | null
    _sum: FavorisSumAggregateOutputType | null
    _min: FavorisMinAggregateOutputType | null
    _max: FavorisMaxAggregateOutputType | null
  }

  export type FavorisAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    annonceId: number | null
  }

  export type FavorisSumAggregateOutputType = {
    id: number | null
    userId: number | null
    annonceId: number | null
  }

  export type FavorisMinAggregateOutputType = {
    id: number | null
    saveDate: Date | null
    userId: number | null
    annonceId: number | null
  }

  export type FavorisMaxAggregateOutputType = {
    id: number | null
    saveDate: Date | null
    userId: number | null
    annonceId: number | null
  }

  export type FavorisCountAggregateOutputType = {
    id: number
    saveDate: number
    userId: number
    annonceId: number
    _all: number
  }


  export type FavorisAvgAggregateInputType = {
    id?: true
    userId?: true
    annonceId?: true
  }

  export type FavorisSumAggregateInputType = {
    id?: true
    userId?: true
    annonceId?: true
  }

  export type FavorisMinAggregateInputType = {
    id?: true
    saveDate?: true
    userId?: true
    annonceId?: true
  }

  export type FavorisMaxAggregateInputType = {
    id?: true
    saveDate?: true
    userId?: true
    annonceId?: true
  }

  export type FavorisCountAggregateInputType = {
    id?: true
    saveDate?: true
    userId?: true
    annonceId?: true
    _all?: true
  }

  export type FavorisAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which favoris to aggregate.
     */
    where?: favorisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of favorises to fetch.
     */
    orderBy?: favorisOrderByWithRelationInput | favorisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: favorisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` favorises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` favorises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned favorises
    **/
    _count?: true | FavorisCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FavorisAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FavorisSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FavorisMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FavorisMaxAggregateInputType
  }

  export type GetFavorisAggregateType<T extends FavorisAggregateArgs> = {
        [P in keyof T & keyof AggregateFavoris]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFavoris[P]>
      : GetScalarType<T[P], AggregateFavoris[P]>
  }




  export type favorisGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: favorisWhereInput
    orderBy?: favorisOrderByWithAggregationInput | favorisOrderByWithAggregationInput[]
    by: FavorisScalarFieldEnum[] | FavorisScalarFieldEnum
    having?: favorisScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FavorisCountAggregateInputType | true
    _avg?: FavorisAvgAggregateInputType
    _sum?: FavorisSumAggregateInputType
    _min?: FavorisMinAggregateInputType
    _max?: FavorisMaxAggregateInputType
  }

  export type FavorisGroupByOutputType = {
    id: number
    saveDate: Date
    userId: number
    annonceId: number
    _count: FavorisCountAggregateOutputType | null
    _avg: FavorisAvgAggregateOutputType | null
    _sum: FavorisSumAggregateOutputType | null
    _min: FavorisMinAggregateOutputType | null
    _max: FavorisMaxAggregateOutputType | null
  }

  type GetFavorisGroupByPayload<T extends favorisGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FavorisGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FavorisGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FavorisGroupByOutputType[P]>
            : GetScalarType<T[P], FavorisGroupByOutputType[P]>
        }
      >
    >


  export type favorisSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    saveDate?: boolean
    userId?: boolean
    annonceId?: boolean
    user?: boolean | userDefaultArgs<ExtArgs>
    annonce?: boolean | annoncesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["favoris"]>

  export type favorisSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    saveDate?: boolean
    userId?: boolean
    annonceId?: boolean
    user?: boolean | userDefaultArgs<ExtArgs>
    annonce?: boolean | annoncesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["favoris"]>

  export type favorisSelectScalar = {
    id?: boolean
    saveDate?: boolean
    userId?: boolean
    annonceId?: boolean
  }

  export type favorisInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | userDefaultArgs<ExtArgs>
    annonce?: boolean | annoncesDefaultArgs<ExtArgs>
  }
  export type favorisIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | userDefaultArgs<ExtArgs>
    annonce?: boolean | annoncesDefaultArgs<ExtArgs>
  }

  export type $favorisPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "favoris"
    objects: {
      user: Prisma.$userPayload<ExtArgs>
      annonce: Prisma.$annoncesPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      saveDate: Date
      userId: number
      annonceId: number
    }, ExtArgs["result"]["favoris"]>
    composites: {}
  }

  type favorisGetPayload<S extends boolean | null | undefined | favorisDefaultArgs> = $Result.GetResult<Prisma.$favorisPayload, S>

  type favorisCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<favorisFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FavorisCountAggregateInputType | true
    }

  export interface favorisDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['favoris'], meta: { name: 'favoris' } }
    /**
     * Find zero or one Favoris that matches the filter.
     * @param {favorisFindUniqueArgs} args - Arguments to find a Favoris
     * @example
     * // Get one Favoris
     * const favoris = await prisma.favoris.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends favorisFindUniqueArgs>(args: SelectSubset<T, favorisFindUniqueArgs<ExtArgs>>): Prisma__favorisClient<$Result.GetResult<Prisma.$favorisPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Favoris that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {favorisFindUniqueOrThrowArgs} args - Arguments to find a Favoris
     * @example
     * // Get one Favoris
     * const favoris = await prisma.favoris.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends favorisFindUniqueOrThrowArgs>(args: SelectSubset<T, favorisFindUniqueOrThrowArgs<ExtArgs>>): Prisma__favorisClient<$Result.GetResult<Prisma.$favorisPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Favoris that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {favorisFindFirstArgs} args - Arguments to find a Favoris
     * @example
     * // Get one Favoris
     * const favoris = await prisma.favoris.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends favorisFindFirstArgs>(args?: SelectSubset<T, favorisFindFirstArgs<ExtArgs>>): Prisma__favorisClient<$Result.GetResult<Prisma.$favorisPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Favoris that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {favorisFindFirstOrThrowArgs} args - Arguments to find a Favoris
     * @example
     * // Get one Favoris
     * const favoris = await prisma.favoris.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends favorisFindFirstOrThrowArgs>(args?: SelectSubset<T, favorisFindFirstOrThrowArgs<ExtArgs>>): Prisma__favorisClient<$Result.GetResult<Prisma.$favorisPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Favorises that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {favorisFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Favorises
     * const favorises = await prisma.favoris.findMany()
     * 
     * // Get first 10 Favorises
     * const favorises = await prisma.favoris.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const favorisWithIdOnly = await prisma.favoris.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends favorisFindManyArgs>(args?: SelectSubset<T, favorisFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$favorisPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Favoris.
     * @param {favorisCreateArgs} args - Arguments to create a Favoris.
     * @example
     * // Create one Favoris
     * const Favoris = await prisma.favoris.create({
     *   data: {
     *     // ... data to create a Favoris
     *   }
     * })
     * 
     */
    create<T extends favorisCreateArgs>(args: SelectSubset<T, favorisCreateArgs<ExtArgs>>): Prisma__favorisClient<$Result.GetResult<Prisma.$favorisPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Favorises.
     * @param {favorisCreateManyArgs} args - Arguments to create many Favorises.
     * @example
     * // Create many Favorises
     * const favoris = await prisma.favoris.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends favorisCreateManyArgs>(args?: SelectSubset<T, favorisCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Favorises and returns the data saved in the database.
     * @param {favorisCreateManyAndReturnArgs} args - Arguments to create many Favorises.
     * @example
     * // Create many Favorises
     * const favoris = await prisma.favoris.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Favorises and only return the `id`
     * const favorisWithIdOnly = await prisma.favoris.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends favorisCreateManyAndReturnArgs>(args?: SelectSubset<T, favorisCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$favorisPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Favoris.
     * @param {favorisDeleteArgs} args - Arguments to delete one Favoris.
     * @example
     * // Delete one Favoris
     * const Favoris = await prisma.favoris.delete({
     *   where: {
     *     // ... filter to delete one Favoris
     *   }
     * })
     * 
     */
    delete<T extends favorisDeleteArgs>(args: SelectSubset<T, favorisDeleteArgs<ExtArgs>>): Prisma__favorisClient<$Result.GetResult<Prisma.$favorisPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Favoris.
     * @param {favorisUpdateArgs} args - Arguments to update one Favoris.
     * @example
     * // Update one Favoris
     * const favoris = await prisma.favoris.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends favorisUpdateArgs>(args: SelectSubset<T, favorisUpdateArgs<ExtArgs>>): Prisma__favorisClient<$Result.GetResult<Prisma.$favorisPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Favorises.
     * @param {favorisDeleteManyArgs} args - Arguments to filter Favorises to delete.
     * @example
     * // Delete a few Favorises
     * const { count } = await prisma.favoris.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends favorisDeleteManyArgs>(args?: SelectSubset<T, favorisDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Favorises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {favorisUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Favorises
     * const favoris = await prisma.favoris.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends favorisUpdateManyArgs>(args: SelectSubset<T, favorisUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Favoris.
     * @param {favorisUpsertArgs} args - Arguments to update or create a Favoris.
     * @example
     * // Update or create a Favoris
     * const favoris = await prisma.favoris.upsert({
     *   create: {
     *     // ... data to create a Favoris
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Favoris we want to update
     *   }
     * })
     */
    upsert<T extends favorisUpsertArgs>(args: SelectSubset<T, favorisUpsertArgs<ExtArgs>>): Prisma__favorisClient<$Result.GetResult<Prisma.$favorisPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Favorises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {favorisCountArgs} args - Arguments to filter Favorises to count.
     * @example
     * // Count the number of Favorises
     * const count = await prisma.favoris.count({
     *   where: {
     *     // ... the filter for the Favorises we want to count
     *   }
     * })
    **/
    count<T extends favorisCountArgs>(
      args?: Subset<T, favorisCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FavorisCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Favoris.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavorisAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FavorisAggregateArgs>(args: Subset<T, FavorisAggregateArgs>): Prisma.PrismaPromise<GetFavorisAggregateType<T>>

    /**
     * Group by Favoris.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {favorisGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends favorisGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: favorisGroupByArgs['orderBy'] }
        : { orderBy?: favorisGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, favorisGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFavorisGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the favoris model
   */
  readonly fields: favorisFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for favoris.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__favorisClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, userDefaultArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    annonce<T extends annoncesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, annoncesDefaultArgs<ExtArgs>>): Prisma__annoncesClient<$Result.GetResult<Prisma.$annoncesPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the favoris model
   */ 
  interface favorisFieldRefs {
    readonly id: FieldRef<"favoris", 'Int'>
    readonly saveDate: FieldRef<"favoris", 'DateTime'>
    readonly userId: FieldRef<"favoris", 'Int'>
    readonly annonceId: FieldRef<"favoris", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * favoris findUnique
   */
  export type favorisFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the favoris
     */
    select?: favorisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: favorisInclude<ExtArgs> | null
    /**
     * Filter, which favoris to fetch.
     */
    where: favorisWhereUniqueInput
  }

  /**
   * favoris findUniqueOrThrow
   */
  export type favorisFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the favoris
     */
    select?: favorisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: favorisInclude<ExtArgs> | null
    /**
     * Filter, which favoris to fetch.
     */
    where: favorisWhereUniqueInput
  }

  /**
   * favoris findFirst
   */
  export type favorisFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the favoris
     */
    select?: favorisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: favorisInclude<ExtArgs> | null
    /**
     * Filter, which favoris to fetch.
     */
    where?: favorisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of favorises to fetch.
     */
    orderBy?: favorisOrderByWithRelationInput | favorisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for favorises.
     */
    cursor?: favorisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` favorises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` favorises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of favorises.
     */
    distinct?: FavorisScalarFieldEnum | FavorisScalarFieldEnum[]
  }

  /**
   * favoris findFirstOrThrow
   */
  export type favorisFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the favoris
     */
    select?: favorisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: favorisInclude<ExtArgs> | null
    /**
     * Filter, which favoris to fetch.
     */
    where?: favorisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of favorises to fetch.
     */
    orderBy?: favorisOrderByWithRelationInput | favorisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for favorises.
     */
    cursor?: favorisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` favorises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` favorises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of favorises.
     */
    distinct?: FavorisScalarFieldEnum | FavorisScalarFieldEnum[]
  }

  /**
   * favoris findMany
   */
  export type favorisFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the favoris
     */
    select?: favorisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: favorisInclude<ExtArgs> | null
    /**
     * Filter, which favorises to fetch.
     */
    where?: favorisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of favorises to fetch.
     */
    orderBy?: favorisOrderByWithRelationInput | favorisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing favorises.
     */
    cursor?: favorisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` favorises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` favorises.
     */
    skip?: number
    distinct?: FavorisScalarFieldEnum | FavorisScalarFieldEnum[]
  }

  /**
   * favoris create
   */
  export type favorisCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the favoris
     */
    select?: favorisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: favorisInclude<ExtArgs> | null
    /**
     * The data needed to create a favoris.
     */
    data: XOR<favorisCreateInput, favorisUncheckedCreateInput>
  }

  /**
   * favoris createMany
   */
  export type favorisCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many favorises.
     */
    data: favorisCreateManyInput | favorisCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * favoris createManyAndReturn
   */
  export type favorisCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the favoris
     */
    select?: favorisSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many favorises.
     */
    data: favorisCreateManyInput | favorisCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: favorisIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * favoris update
   */
  export type favorisUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the favoris
     */
    select?: favorisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: favorisInclude<ExtArgs> | null
    /**
     * The data needed to update a favoris.
     */
    data: XOR<favorisUpdateInput, favorisUncheckedUpdateInput>
    /**
     * Choose, which favoris to update.
     */
    where: favorisWhereUniqueInput
  }

  /**
   * favoris updateMany
   */
  export type favorisUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update favorises.
     */
    data: XOR<favorisUpdateManyMutationInput, favorisUncheckedUpdateManyInput>
    /**
     * Filter which favorises to update
     */
    where?: favorisWhereInput
  }

  /**
   * favoris upsert
   */
  export type favorisUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the favoris
     */
    select?: favorisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: favorisInclude<ExtArgs> | null
    /**
     * The filter to search for the favoris to update in case it exists.
     */
    where: favorisWhereUniqueInput
    /**
     * In case the favoris found by the `where` argument doesn't exist, create a new favoris with this data.
     */
    create: XOR<favorisCreateInput, favorisUncheckedCreateInput>
    /**
     * In case the favoris was found with the provided `where` argument, update it with this data.
     */
    update: XOR<favorisUpdateInput, favorisUncheckedUpdateInput>
  }

  /**
   * favoris delete
   */
  export type favorisDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the favoris
     */
    select?: favorisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: favorisInclude<ExtArgs> | null
    /**
     * Filter which favoris to delete.
     */
    where: favorisWhereUniqueInput
  }

  /**
   * favoris deleteMany
   */
  export type favorisDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which favorises to delete
     */
    where?: favorisWhereInput
  }

  /**
   * favoris without action
   */
  export type favorisDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the favoris
     */
    select?: favorisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: favorisInclude<ExtArgs> | null
  }


  /**
   * Model annonces
   */

  export type AggregateAnnonces = {
    _count: AnnoncesCountAggregateOutputType | null
    _avg: AnnoncesAvgAggregateOutputType | null
    _sum: AnnoncesSumAggregateOutputType | null
    _min: AnnoncesMinAggregateOutputType | null
    _max: AnnoncesMaxAggregateOutputType | null
  }

  export type AnnoncesAvgAggregateOutputType = {
    id: number | null
    prix: Decimal | null
    userId: number | null
  }

  export type AnnoncesSumAggregateOutputType = {
    id: number | null
    prix: Decimal | null
    userId: number | null
  }

  export type AnnoncesMinAggregateOutputType = {
    id: number | null
    titre: string | null
    description: string | null
    prix: Decimal | null
    typeTarif: $Enums.typeTarif | null
    priority: $Enums.priority | null
    localisation: string | null
    adresse: string | null
    statut: $Enums.statut | null
    createdAt: Date | null
    updatedAt: Date | null
    categorieAnnonce: $Enums.categorieAnnonce | null
    sousCategorie: string | null
    userId: number | null
    priceId: string | null
  }

  export type AnnoncesMaxAggregateOutputType = {
    id: number | null
    titre: string | null
    description: string | null
    prix: Decimal | null
    typeTarif: $Enums.typeTarif | null
    priority: $Enums.priority | null
    localisation: string | null
    adresse: string | null
    statut: $Enums.statut | null
    createdAt: Date | null
    updatedAt: Date | null
    categorieAnnonce: $Enums.categorieAnnonce | null
    sousCategorie: string | null
    userId: number | null
    priceId: string | null
  }

  export type AnnoncesCountAggregateOutputType = {
    id: number
    titre: number
    description: number
    prix: number
    typeTarif: number
    priority: number
    localisation: number
    adresse: number
    statut: number
    createdAt: number
    updatedAt: number
    categorieAnnonce: number
    sousCategorie: number
    userId: number
    priceId: number
    _all: number
  }


  export type AnnoncesAvgAggregateInputType = {
    id?: true
    prix?: true
    userId?: true
  }

  export type AnnoncesSumAggregateInputType = {
    id?: true
    prix?: true
    userId?: true
  }

  export type AnnoncesMinAggregateInputType = {
    id?: true
    titre?: true
    description?: true
    prix?: true
    typeTarif?: true
    priority?: true
    localisation?: true
    adresse?: true
    statut?: true
    createdAt?: true
    updatedAt?: true
    categorieAnnonce?: true
    sousCategorie?: true
    userId?: true
    priceId?: true
  }

  export type AnnoncesMaxAggregateInputType = {
    id?: true
    titre?: true
    description?: true
    prix?: true
    typeTarif?: true
    priority?: true
    localisation?: true
    adresse?: true
    statut?: true
    createdAt?: true
    updatedAt?: true
    categorieAnnonce?: true
    sousCategorie?: true
    userId?: true
    priceId?: true
  }

  export type AnnoncesCountAggregateInputType = {
    id?: true
    titre?: true
    description?: true
    prix?: true
    typeTarif?: true
    priority?: true
    localisation?: true
    adresse?: true
    statut?: true
    createdAt?: true
    updatedAt?: true
    categorieAnnonce?: true
    sousCategorie?: true
    userId?: true
    priceId?: true
    _all?: true
  }

  export type AnnoncesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which annonces to aggregate.
     */
    where?: annoncesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of annonces to fetch.
     */
    orderBy?: annoncesOrderByWithRelationInput | annoncesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: annoncesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` annonces from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` annonces.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned annonces
    **/
    _count?: true | AnnoncesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AnnoncesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AnnoncesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AnnoncesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AnnoncesMaxAggregateInputType
  }

  export type GetAnnoncesAggregateType<T extends AnnoncesAggregateArgs> = {
        [P in keyof T & keyof AggregateAnnonces]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAnnonces[P]>
      : GetScalarType<T[P], AggregateAnnonces[P]>
  }




  export type annoncesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: annoncesWhereInput
    orderBy?: annoncesOrderByWithAggregationInput | annoncesOrderByWithAggregationInput[]
    by: AnnoncesScalarFieldEnum[] | AnnoncesScalarFieldEnum
    having?: annoncesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AnnoncesCountAggregateInputType | true
    _avg?: AnnoncesAvgAggregateInputType
    _sum?: AnnoncesSumAggregateInputType
    _min?: AnnoncesMinAggregateInputType
    _max?: AnnoncesMaxAggregateInputType
  }

  export type AnnoncesGroupByOutputType = {
    id: number
    titre: string
    description: string
    prix: Decimal | null
    typeTarif: $Enums.typeTarif | null
    priority: $Enums.priority | null
    localisation: string | null
    adresse: string
    statut: $Enums.statut | null
    createdAt: Date
    updatedAt: Date
    categorieAnnonce: $Enums.categorieAnnonce
    sousCategorie: string
    userId: number
    priceId: string | null
    _count: AnnoncesCountAggregateOutputType | null
    _avg: AnnoncesAvgAggregateOutputType | null
    _sum: AnnoncesSumAggregateOutputType | null
    _min: AnnoncesMinAggregateOutputType | null
    _max: AnnoncesMaxAggregateOutputType | null
  }

  type GetAnnoncesGroupByPayload<T extends annoncesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AnnoncesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AnnoncesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AnnoncesGroupByOutputType[P]>
            : GetScalarType<T[P], AnnoncesGroupByOutputType[P]>
        }
      >
    >


  export type annoncesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    titre?: boolean
    description?: boolean
    prix?: boolean
    typeTarif?: boolean
    priority?: boolean
    localisation?: boolean
    adresse?: boolean
    statut?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    categorieAnnonce?: boolean
    sousCategorie?: boolean
    userId?: boolean
    priceId?: boolean
    imageAnnonces?: boolean | annonces$imageAnnoncesArgs<ExtArgs>
    user?: boolean | userDefaultArgs<ExtArgs>
    commentaire?: boolean | annonces$commentaireArgs<ExtArgs>
    favoris?: boolean | annonces$favorisArgs<ExtArgs>
    transactions?: boolean | annonces$transactionsArgs<ExtArgs>
    _count?: boolean | AnnoncesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["annonces"]>

  export type annoncesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    titre?: boolean
    description?: boolean
    prix?: boolean
    typeTarif?: boolean
    priority?: boolean
    localisation?: boolean
    adresse?: boolean
    statut?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    categorieAnnonce?: boolean
    sousCategorie?: boolean
    userId?: boolean
    priceId?: boolean
    user?: boolean | userDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["annonces"]>

  export type annoncesSelectScalar = {
    id?: boolean
    titre?: boolean
    description?: boolean
    prix?: boolean
    typeTarif?: boolean
    priority?: boolean
    localisation?: boolean
    adresse?: boolean
    statut?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    categorieAnnonce?: boolean
    sousCategorie?: boolean
    userId?: boolean
    priceId?: boolean
  }

  export type annoncesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    imageAnnonces?: boolean | annonces$imageAnnoncesArgs<ExtArgs>
    user?: boolean | userDefaultArgs<ExtArgs>
    commentaire?: boolean | annonces$commentaireArgs<ExtArgs>
    favoris?: boolean | annonces$favorisArgs<ExtArgs>
    transactions?: boolean | annonces$transactionsArgs<ExtArgs>
    _count?: boolean | AnnoncesCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type annoncesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | userDefaultArgs<ExtArgs>
  }

  export type $annoncesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "annonces"
    objects: {
      imageAnnonces: Prisma.$imageAnnoncePayload<ExtArgs>[]
      user: Prisma.$userPayload<ExtArgs>
      commentaire: Prisma.$commentairePayload<ExtArgs>[]
      favoris: Prisma.$favorisPayload<ExtArgs>[]
      transactions: Prisma.$transactionsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      titre: string
      description: string
      prix: Prisma.Decimal | null
      typeTarif: $Enums.typeTarif | null
      priority: $Enums.priority | null
      localisation: string | null
      adresse: string
      statut: $Enums.statut | null
      createdAt: Date
      updatedAt: Date
      categorieAnnonce: $Enums.categorieAnnonce
      sousCategorie: string
      userId: number
      priceId: string | null
    }, ExtArgs["result"]["annonces"]>
    composites: {}
  }

  type annoncesGetPayload<S extends boolean | null | undefined | annoncesDefaultArgs> = $Result.GetResult<Prisma.$annoncesPayload, S>

  type annoncesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<annoncesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AnnoncesCountAggregateInputType | true
    }

  export interface annoncesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['annonces'], meta: { name: 'annonces' } }
    /**
     * Find zero or one Annonces that matches the filter.
     * @param {annoncesFindUniqueArgs} args - Arguments to find a Annonces
     * @example
     * // Get one Annonces
     * const annonces = await prisma.annonces.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends annoncesFindUniqueArgs>(args: SelectSubset<T, annoncesFindUniqueArgs<ExtArgs>>): Prisma__annoncesClient<$Result.GetResult<Prisma.$annoncesPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Annonces that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {annoncesFindUniqueOrThrowArgs} args - Arguments to find a Annonces
     * @example
     * // Get one Annonces
     * const annonces = await prisma.annonces.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends annoncesFindUniqueOrThrowArgs>(args: SelectSubset<T, annoncesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__annoncesClient<$Result.GetResult<Prisma.$annoncesPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Annonces that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {annoncesFindFirstArgs} args - Arguments to find a Annonces
     * @example
     * // Get one Annonces
     * const annonces = await prisma.annonces.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends annoncesFindFirstArgs>(args?: SelectSubset<T, annoncesFindFirstArgs<ExtArgs>>): Prisma__annoncesClient<$Result.GetResult<Prisma.$annoncesPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Annonces that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {annoncesFindFirstOrThrowArgs} args - Arguments to find a Annonces
     * @example
     * // Get one Annonces
     * const annonces = await prisma.annonces.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends annoncesFindFirstOrThrowArgs>(args?: SelectSubset<T, annoncesFindFirstOrThrowArgs<ExtArgs>>): Prisma__annoncesClient<$Result.GetResult<Prisma.$annoncesPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Annonces that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {annoncesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Annonces
     * const annonces = await prisma.annonces.findMany()
     * 
     * // Get first 10 Annonces
     * const annonces = await prisma.annonces.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const annoncesWithIdOnly = await prisma.annonces.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends annoncesFindManyArgs>(args?: SelectSubset<T, annoncesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$annoncesPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Annonces.
     * @param {annoncesCreateArgs} args - Arguments to create a Annonces.
     * @example
     * // Create one Annonces
     * const Annonces = await prisma.annonces.create({
     *   data: {
     *     // ... data to create a Annonces
     *   }
     * })
     * 
     */
    create<T extends annoncesCreateArgs>(args: SelectSubset<T, annoncesCreateArgs<ExtArgs>>): Prisma__annoncesClient<$Result.GetResult<Prisma.$annoncesPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Annonces.
     * @param {annoncesCreateManyArgs} args - Arguments to create many Annonces.
     * @example
     * // Create many Annonces
     * const annonces = await prisma.annonces.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends annoncesCreateManyArgs>(args?: SelectSubset<T, annoncesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Annonces and returns the data saved in the database.
     * @param {annoncesCreateManyAndReturnArgs} args - Arguments to create many Annonces.
     * @example
     * // Create many Annonces
     * const annonces = await prisma.annonces.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Annonces and only return the `id`
     * const annoncesWithIdOnly = await prisma.annonces.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends annoncesCreateManyAndReturnArgs>(args?: SelectSubset<T, annoncesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$annoncesPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Annonces.
     * @param {annoncesDeleteArgs} args - Arguments to delete one Annonces.
     * @example
     * // Delete one Annonces
     * const Annonces = await prisma.annonces.delete({
     *   where: {
     *     // ... filter to delete one Annonces
     *   }
     * })
     * 
     */
    delete<T extends annoncesDeleteArgs>(args: SelectSubset<T, annoncesDeleteArgs<ExtArgs>>): Prisma__annoncesClient<$Result.GetResult<Prisma.$annoncesPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Annonces.
     * @param {annoncesUpdateArgs} args - Arguments to update one Annonces.
     * @example
     * // Update one Annonces
     * const annonces = await prisma.annonces.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends annoncesUpdateArgs>(args: SelectSubset<T, annoncesUpdateArgs<ExtArgs>>): Prisma__annoncesClient<$Result.GetResult<Prisma.$annoncesPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Annonces.
     * @param {annoncesDeleteManyArgs} args - Arguments to filter Annonces to delete.
     * @example
     * // Delete a few Annonces
     * const { count } = await prisma.annonces.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends annoncesDeleteManyArgs>(args?: SelectSubset<T, annoncesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Annonces.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {annoncesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Annonces
     * const annonces = await prisma.annonces.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends annoncesUpdateManyArgs>(args: SelectSubset<T, annoncesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Annonces.
     * @param {annoncesUpsertArgs} args - Arguments to update or create a Annonces.
     * @example
     * // Update or create a Annonces
     * const annonces = await prisma.annonces.upsert({
     *   create: {
     *     // ... data to create a Annonces
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Annonces we want to update
     *   }
     * })
     */
    upsert<T extends annoncesUpsertArgs>(args: SelectSubset<T, annoncesUpsertArgs<ExtArgs>>): Prisma__annoncesClient<$Result.GetResult<Prisma.$annoncesPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Annonces.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {annoncesCountArgs} args - Arguments to filter Annonces to count.
     * @example
     * // Count the number of Annonces
     * const count = await prisma.annonces.count({
     *   where: {
     *     // ... the filter for the Annonces we want to count
     *   }
     * })
    **/
    count<T extends annoncesCountArgs>(
      args?: Subset<T, annoncesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AnnoncesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Annonces.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnnoncesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AnnoncesAggregateArgs>(args: Subset<T, AnnoncesAggregateArgs>): Prisma.PrismaPromise<GetAnnoncesAggregateType<T>>

    /**
     * Group by Annonces.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {annoncesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends annoncesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: annoncesGroupByArgs['orderBy'] }
        : { orderBy?: annoncesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, annoncesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAnnoncesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the annonces model
   */
  readonly fields: annoncesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for annonces.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__annoncesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    imageAnnonces<T extends annonces$imageAnnoncesArgs<ExtArgs> = {}>(args?: Subset<T, annonces$imageAnnoncesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$imageAnnoncePayload<ExtArgs>, T, "findMany"> | Null>
    user<T extends userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, userDefaultArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    commentaire<T extends annonces$commentaireArgs<ExtArgs> = {}>(args?: Subset<T, annonces$commentaireArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$commentairePayload<ExtArgs>, T, "findMany"> | Null>
    favoris<T extends annonces$favorisArgs<ExtArgs> = {}>(args?: Subset<T, annonces$favorisArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$favorisPayload<ExtArgs>, T, "findMany"> | Null>
    transactions<T extends annonces$transactionsArgs<ExtArgs> = {}>(args?: Subset<T, annonces$transactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$transactionsPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the annonces model
   */ 
  interface annoncesFieldRefs {
    readonly id: FieldRef<"annonces", 'Int'>
    readonly titre: FieldRef<"annonces", 'String'>
    readonly description: FieldRef<"annonces", 'String'>
    readonly prix: FieldRef<"annonces", 'Decimal'>
    readonly typeTarif: FieldRef<"annonces", 'typeTarif'>
    readonly priority: FieldRef<"annonces", 'priority'>
    readonly localisation: FieldRef<"annonces", 'String'>
    readonly adresse: FieldRef<"annonces", 'String'>
    readonly statut: FieldRef<"annonces", 'statut'>
    readonly createdAt: FieldRef<"annonces", 'DateTime'>
    readonly updatedAt: FieldRef<"annonces", 'DateTime'>
    readonly categorieAnnonce: FieldRef<"annonces", 'categorieAnnonce'>
    readonly sousCategorie: FieldRef<"annonces", 'String'>
    readonly userId: FieldRef<"annonces", 'Int'>
    readonly priceId: FieldRef<"annonces", 'String'>
  }
    

  // Custom InputTypes
  /**
   * annonces findUnique
   */
  export type annoncesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the annonces
     */
    select?: annoncesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: annoncesInclude<ExtArgs> | null
    /**
     * Filter, which annonces to fetch.
     */
    where: annoncesWhereUniqueInput
  }

  /**
   * annonces findUniqueOrThrow
   */
  export type annoncesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the annonces
     */
    select?: annoncesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: annoncesInclude<ExtArgs> | null
    /**
     * Filter, which annonces to fetch.
     */
    where: annoncesWhereUniqueInput
  }

  /**
   * annonces findFirst
   */
  export type annoncesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the annonces
     */
    select?: annoncesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: annoncesInclude<ExtArgs> | null
    /**
     * Filter, which annonces to fetch.
     */
    where?: annoncesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of annonces to fetch.
     */
    orderBy?: annoncesOrderByWithRelationInput | annoncesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for annonces.
     */
    cursor?: annoncesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` annonces from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` annonces.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of annonces.
     */
    distinct?: AnnoncesScalarFieldEnum | AnnoncesScalarFieldEnum[]
  }

  /**
   * annonces findFirstOrThrow
   */
  export type annoncesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the annonces
     */
    select?: annoncesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: annoncesInclude<ExtArgs> | null
    /**
     * Filter, which annonces to fetch.
     */
    where?: annoncesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of annonces to fetch.
     */
    orderBy?: annoncesOrderByWithRelationInput | annoncesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for annonces.
     */
    cursor?: annoncesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` annonces from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` annonces.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of annonces.
     */
    distinct?: AnnoncesScalarFieldEnum | AnnoncesScalarFieldEnum[]
  }

  /**
   * annonces findMany
   */
  export type annoncesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the annonces
     */
    select?: annoncesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: annoncesInclude<ExtArgs> | null
    /**
     * Filter, which annonces to fetch.
     */
    where?: annoncesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of annonces to fetch.
     */
    orderBy?: annoncesOrderByWithRelationInput | annoncesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing annonces.
     */
    cursor?: annoncesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` annonces from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` annonces.
     */
    skip?: number
    distinct?: AnnoncesScalarFieldEnum | AnnoncesScalarFieldEnum[]
  }

  /**
   * annonces create
   */
  export type annoncesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the annonces
     */
    select?: annoncesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: annoncesInclude<ExtArgs> | null
    /**
     * The data needed to create a annonces.
     */
    data: XOR<annoncesCreateInput, annoncesUncheckedCreateInput>
  }

  /**
   * annonces createMany
   */
  export type annoncesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many annonces.
     */
    data: annoncesCreateManyInput | annoncesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * annonces createManyAndReturn
   */
  export type annoncesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the annonces
     */
    select?: annoncesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many annonces.
     */
    data: annoncesCreateManyInput | annoncesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: annoncesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * annonces update
   */
  export type annoncesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the annonces
     */
    select?: annoncesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: annoncesInclude<ExtArgs> | null
    /**
     * The data needed to update a annonces.
     */
    data: XOR<annoncesUpdateInput, annoncesUncheckedUpdateInput>
    /**
     * Choose, which annonces to update.
     */
    where: annoncesWhereUniqueInput
  }

  /**
   * annonces updateMany
   */
  export type annoncesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update annonces.
     */
    data: XOR<annoncesUpdateManyMutationInput, annoncesUncheckedUpdateManyInput>
    /**
     * Filter which annonces to update
     */
    where?: annoncesWhereInput
  }

  /**
   * annonces upsert
   */
  export type annoncesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the annonces
     */
    select?: annoncesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: annoncesInclude<ExtArgs> | null
    /**
     * The filter to search for the annonces to update in case it exists.
     */
    where: annoncesWhereUniqueInput
    /**
     * In case the annonces found by the `where` argument doesn't exist, create a new annonces with this data.
     */
    create: XOR<annoncesCreateInput, annoncesUncheckedCreateInput>
    /**
     * In case the annonces was found with the provided `where` argument, update it with this data.
     */
    update: XOR<annoncesUpdateInput, annoncesUncheckedUpdateInput>
  }

  /**
   * annonces delete
   */
  export type annoncesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the annonces
     */
    select?: annoncesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: annoncesInclude<ExtArgs> | null
    /**
     * Filter which annonces to delete.
     */
    where: annoncesWhereUniqueInput
  }

  /**
   * annonces deleteMany
   */
  export type annoncesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which annonces to delete
     */
    where?: annoncesWhereInput
  }

  /**
   * annonces.imageAnnonces
   */
  export type annonces$imageAnnoncesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imageAnnonce
     */
    select?: imageAnnonceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: imageAnnonceInclude<ExtArgs> | null
    where?: imageAnnonceWhereInput
    orderBy?: imageAnnonceOrderByWithRelationInput | imageAnnonceOrderByWithRelationInput[]
    cursor?: imageAnnonceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ImageAnnonceScalarFieldEnum | ImageAnnonceScalarFieldEnum[]
  }

  /**
   * annonces.commentaire
   */
  export type annonces$commentaireArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the commentaire
     */
    select?: commentaireSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: commentaireInclude<ExtArgs> | null
    where?: commentaireWhereInput
    orderBy?: commentaireOrderByWithRelationInput | commentaireOrderByWithRelationInput[]
    cursor?: commentaireWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentaireScalarFieldEnum | CommentaireScalarFieldEnum[]
  }

  /**
   * annonces.favoris
   */
  export type annonces$favorisArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the favoris
     */
    select?: favorisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: favorisInclude<ExtArgs> | null
    where?: favorisWhereInput
    orderBy?: favorisOrderByWithRelationInput | favorisOrderByWithRelationInput[]
    cursor?: favorisWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FavorisScalarFieldEnum | FavorisScalarFieldEnum[]
  }

  /**
   * annonces.transactions
   */
  export type annonces$transactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactionsInclude<ExtArgs> | null
    where?: transactionsWhereInput
    orderBy?: transactionsOrderByWithRelationInput | transactionsOrderByWithRelationInput[]
    cursor?: transactionsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransactionsScalarFieldEnum | TransactionsScalarFieldEnum[]
  }

  /**
   * annonces without action
   */
  export type annoncesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the annonces
     */
    select?: annoncesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: annoncesInclude<ExtArgs> | null
  }


  /**
   * Model imageAnnonce
   */

  export type AggregateImageAnnonce = {
    _count: ImageAnnonceCountAggregateOutputType | null
    _avg: ImageAnnonceAvgAggregateOutputType | null
    _sum: ImageAnnonceSumAggregateOutputType | null
    _min: ImageAnnonceMinAggregateOutputType | null
    _max: ImageAnnonceMaxAggregateOutputType | null
  }

  export type ImageAnnonceAvgAggregateOutputType = {
    id: number | null
    annoncesId: number | null
  }

  export type ImageAnnonceSumAggregateOutputType = {
    id: number | null
    annoncesId: number | null
  }

  export type ImageAnnonceMinAggregateOutputType = {
    id: number | null
    path: string | null
    annoncesId: number | null
  }

  export type ImageAnnonceMaxAggregateOutputType = {
    id: number | null
    path: string | null
    annoncesId: number | null
  }

  export type ImageAnnonceCountAggregateOutputType = {
    id: number
    path: number
    annoncesId: number
    _all: number
  }


  export type ImageAnnonceAvgAggregateInputType = {
    id?: true
    annoncesId?: true
  }

  export type ImageAnnonceSumAggregateInputType = {
    id?: true
    annoncesId?: true
  }

  export type ImageAnnonceMinAggregateInputType = {
    id?: true
    path?: true
    annoncesId?: true
  }

  export type ImageAnnonceMaxAggregateInputType = {
    id?: true
    path?: true
    annoncesId?: true
  }

  export type ImageAnnonceCountAggregateInputType = {
    id?: true
    path?: true
    annoncesId?: true
    _all?: true
  }

  export type ImageAnnonceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which imageAnnonce to aggregate.
     */
    where?: imageAnnonceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of imageAnnonces to fetch.
     */
    orderBy?: imageAnnonceOrderByWithRelationInput | imageAnnonceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: imageAnnonceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` imageAnnonces from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` imageAnnonces.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned imageAnnonces
    **/
    _count?: true | ImageAnnonceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ImageAnnonceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ImageAnnonceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ImageAnnonceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ImageAnnonceMaxAggregateInputType
  }

  export type GetImageAnnonceAggregateType<T extends ImageAnnonceAggregateArgs> = {
        [P in keyof T & keyof AggregateImageAnnonce]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateImageAnnonce[P]>
      : GetScalarType<T[P], AggregateImageAnnonce[P]>
  }




  export type imageAnnonceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: imageAnnonceWhereInput
    orderBy?: imageAnnonceOrderByWithAggregationInput | imageAnnonceOrderByWithAggregationInput[]
    by: ImageAnnonceScalarFieldEnum[] | ImageAnnonceScalarFieldEnum
    having?: imageAnnonceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ImageAnnonceCountAggregateInputType | true
    _avg?: ImageAnnonceAvgAggregateInputType
    _sum?: ImageAnnonceSumAggregateInputType
    _min?: ImageAnnonceMinAggregateInputType
    _max?: ImageAnnonceMaxAggregateInputType
  }

  export type ImageAnnonceGroupByOutputType = {
    id: number
    path: string
    annoncesId: number
    _count: ImageAnnonceCountAggregateOutputType | null
    _avg: ImageAnnonceAvgAggregateOutputType | null
    _sum: ImageAnnonceSumAggregateOutputType | null
    _min: ImageAnnonceMinAggregateOutputType | null
    _max: ImageAnnonceMaxAggregateOutputType | null
  }

  type GetImageAnnonceGroupByPayload<T extends imageAnnonceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ImageAnnonceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ImageAnnonceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ImageAnnonceGroupByOutputType[P]>
            : GetScalarType<T[P], ImageAnnonceGroupByOutputType[P]>
        }
      >
    >


  export type imageAnnonceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    path?: boolean
    annoncesId?: boolean
    annonces?: boolean | annoncesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["imageAnnonce"]>

  export type imageAnnonceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    path?: boolean
    annoncesId?: boolean
    annonces?: boolean | annoncesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["imageAnnonce"]>

  export type imageAnnonceSelectScalar = {
    id?: boolean
    path?: boolean
    annoncesId?: boolean
  }

  export type imageAnnonceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    annonces?: boolean | annoncesDefaultArgs<ExtArgs>
  }
  export type imageAnnonceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    annonces?: boolean | annoncesDefaultArgs<ExtArgs>
  }

  export type $imageAnnoncePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "imageAnnonce"
    objects: {
      annonces: Prisma.$annoncesPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      path: string
      annoncesId: number
    }, ExtArgs["result"]["imageAnnonce"]>
    composites: {}
  }

  type imageAnnonceGetPayload<S extends boolean | null | undefined | imageAnnonceDefaultArgs> = $Result.GetResult<Prisma.$imageAnnoncePayload, S>

  type imageAnnonceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<imageAnnonceFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ImageAnnonceCountAggregateInputType | true
    }

  export interface imageAnnonceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['imageAnnonce'], meta: { name: 'imageAnnonce' } }
    /**
     * Find zero or one ImageAnnonce that matches the filter.
     * @param {imageAnnonceFindUniqueArgs} args - Arguments to find a ImageAnnonce
     * @example
     * // Get one ImageAnnonce
     * const imageAnnonce = await prisma.imageAnnonce.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends imageAnnonceFindUniqueArgs>(args: SelectSubset<T, imageAnnonceFindUniqueArgs<ExtArgs>>): Prisma__imageAnnonceClient<$Result.GetResult<Prisma.$imageAnnoncePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ImageAnnonce that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {imageAnnonceFindUniqueOrThrowArgs} args - Arguments to find a ImageAnnonce
     * @example
     * // Get one ImageAnnonce
     * const imageAnnonce = await prisma.imageAnnonce.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends imageAnnonceFindUniqueOrThrowArgs>(args: SelectSubset<T, imageAnnonceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__imageAnnonceClient<$Result.GetResult<Prisma.$imageAnnoncePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ImageAnnonce that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {imageAnnonceFindFirstArgs} args - Arguments to find a ImageAnnonce
     * @example
     * // Get one ImageAnnonce
     * const imageAnnonce = await prisma.imageAnnonce.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends imageAnnonceFindFirstArgs>(args?: SelectSubset<T, imageAnnonceFindFirstArgs<ExtArgs>>): Prisma__imageAnnonceClient<$Result.GetResult<Prisma.$imageAnnoncePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ImageAnnonce that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {imageAnnonceFindFirstOrThrowArgs} args - Arguments to find a ImageAnnonce
     * @example
     * // Get one ImageAnnonce
     * const imageAnnonce = await prisma.imageAnnonce.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends imageAnnonceFindFirstOrThrowArgs>(args?: SelectSubset<T, imageAnnonceFindFirstOrThrowArgs<ExtArgs>>): Prisma__imageAnnonceClient<$Result.GetResult<Prisma.$imageAnnoncePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ImageAnnonces that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {imageAnnonceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ImageAnnonces
     * const imageAnnonces = await prisma.imageAnnonce.findMany()
     * 
     * // Get first 10 ImageAnnonces
     * const imageAnnonces = await prisma.imageAnnonce.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const imageAnnonceWithIdOnly = await prisma.imageAnnonce.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends imageAnnonceFindManyArgs>(args?: SelectSubset<T, imageAnnonceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$imageAnnoncePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ImageAnnonce.
     * @param {imageAnnonceCreateArgs} args - Arguments to create a ImageAnnonce.
     * @example
     * // Create one ImageAnnonce
     * const ImageAnnonce = await prisma.imageAnnonce.create({
     *   data: {
     *     // ... data to create a ImageAnnonce
     *   }
     * })
     * 
     */
    create<T extends imageAnnonceCreateArgs>(args: SelectSubset<T, imageAnnonceCreateArgs<ExtArgs>>): Prisma__imageAnnonceClient<$Result.GetResult<Prisma.$imageAnnoncePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ImageAnnonces.
     * @param {imageAnnonceCreateManyArgs} args - Arguments to create many ImageAnnonces.
     * @example
     * // Create many ImageAnnonces
     * const imageAnnonce = await prisma.imageAnnonce.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends imageAnnonceCreateManyArgs>(args?: SelectSubset<T, imageAnnonceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ImageAnnonces and returns the data saved in the database.
     * @param {imageAnnonceCreateManyAndReturnArgs} args - Arguments to create many ImageAnnonces.
     * @example
     * // Create many ImageAnnonces
     * const imageAnnonce = await prisma.imageAnnonce.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ImageAnnonces and only return the `id`
     * const imageAnnonceWithIdOnly = await prisma.imageAnnonce.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends imageAnnonceCreateManyAndReturnArgs>(args?: SelectSubset<T, imageAnnonceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$imageAnnoncePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ImageAnnonce.
     * @param {imageAnnonceDeleteArgs} args - Arguments to delete one ImageAnnonce.
     * @example
     * // Delete one ImageAnnonce
     * const ImageAnnonce = await prisma.imageAnnonce.delete({
     *   where: {
     *     // ... filter to delete one ImageAnnonce
     *   }
     * })
     * 
     */
    delete<T extends imageAnnonceDeleteArgs>(args: SelectSubset<T, imageAnnonceDeleteArgs<ExtArgs>>): Prisma__imageAnnonceClient<$Result.GetResult<Prisma.$imageAnnoncePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ImageAnnonce.
     * @param {imageAnnonceUpdateArgs} args - Arguments to update one ImageAnnonce.
     * @example
     * // Update one ImageAnnonce
     * const imageAnnonce = await prisma.imageAnnonce.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends imageAnnonceUpdateArgs>(args: SelectSubset<T, imageAnnonceUpdateArgs<ExtArgs>>): Prisma__imageAnnonceClient<$Result.GetResult<Prisma.$imageAnnoncePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ImageAnnonces.
     * @param {imageAnnonceDeleteManyArgs} args - Arguments to filter ImageAnnonces to delete.
     * @example
     * // Delete a few ImageAnnonces
     * const { count } = await prisma.imageAnnonce.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends imageAnnonceDeleteManyArgs>(args?: SelectSubset<T, imageAnnonceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ImageAnnonces.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {imageAnnonceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ImageAnnonces
     * const imageAnnonce = await prisma.imageAnnonce.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends imageAnnonceUpdateManyArgs>(args: SelectSubset<T, imageAnnonceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ImageAnnonce.
     * @param {imageAnnonceUpsertArgs} args - Arguments to update or create a ImageAnnonce.
     * @example
     * // Update or create a ImageAnnonce
     * const imageAnnonce = await prisma.imageAnnonce.upsert({
     *   create: {
     *     // ... data to create a ImageAnnonce
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ImageAnnonce we want to update
     *   }
     * })
     */
    upsert<T extends imageAnnonceUpsertArgs>(args: SelectSubset<T, imageAnnonceUpsertArgs<ExtArgs>>): Prisma__imageAnnonceClient<$Result.GetResult<Prisma.$imageAnnoncePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ImageAnnonces.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {imageAnnonceCountArgs} args - Arguments to filter ImageAnnonces to count.
     * @example
     * // Count the number of ImageAnnonces
     * const count = await prisma.imageAnnonce.count({
     *   where: {
     *     // ... the filter for the ImageAnnonces we want to count
     *   }
     * })
    **/
    count<T extends imageAnnonceCountArgs>(
      args?: Subset<T, imageAnnonceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ImageAnnonceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ImageAnnonce.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageAnnonceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ImageAnnonceAggregateArgs>(args: Subset<T, ImageAnnonceAggregateArgs>): Prisma.PrismaPromise<GetImageAnnonceAggregateType<T>>

    /**
     * Group by ImageAnnonce.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {imageAnnonceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends imageAnnonceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: imageAnnonceGroupByArgs['orderBy'] }
        : { orderBy?: imageAnnonceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, imageAnnonceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetImageAnnonceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the imageAnnonce model
   */
  readonly fields: imageAnnonceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for imageAnnonce.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__imageAnnonceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    annonces<T extends annoncesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, annoncesDefaultArgs<ExtArgs>>): Prisma__annoncesClient<$Result.GetResult<Prisma.$annoncesPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the imageAnnonce model
   */ 
  interface imageAnnonceFieldRefs {
    readonly id: FieldRef<"imageAnnonce", 'Int'>
    readonly path: FieldRef<"imageAnnonce", 'String'>
    readonly annoncesId: FieldRef<"imageAnnonce", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * imageAnnonce findUnique
   */
  export type imageAnnonceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imageAnnonce
     */
    select?: imageAnnonceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: imageAnnonceInclude<ExtArgs> | null
    /**
     * Filter, which imageAnnonce to fetch.
     */
    where: imageAnnonceWhereUniqueInput
  }

  /**
   * imageAnnonce findUniqueOrThrow
   */
  export type imageAnnonceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imageAnnonce
     */
    select?: imageAnnonceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: imageAnnonceInclude<ExtArgs> | null
    /**
     * Filter, which imageAnnonce to fetch.
     */
    where: imageAnnonceWhereUniqueInput
  }

  /**
   * imageAnnonce findFirst
   */
  export type imageAnnonceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imageAnnonce
     */
    select?: imageAnnonceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: imageAnnonceInclude<ExtArgs> | null
    /**
     * Filter, which imageAnnonce to fetch.
     */
    where?: imageAnnonceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of imageAnnonces to fetch.
     */
    orderBy?: imageAnnonceOrderByWithRelationInput | imageAnnonceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for imageAnnonces.
     */
    cursor?: imageAnnonceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` imageAnnonces from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` imageAnnonces.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of imageAnnonces.
     */
    distinct?: ImageAnnonceScalarFieldEnum | ImageAnnonceScalarFieldEnum[]
  }

  /**
   * imageAnnonce findFirstOrThrow
   */
  export type imageAnnonceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imageAnnonce
     */
    select?: imageAnnonceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: imageAnnonceInclude<ExtArgs> | null
    /**
     * Filter, which imageAnnonce to fetch.
     */
    where?: imageAnnonceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of imageAnnonces to fetch.
     */
    orderBy?: imageAnnonceOrderByWithRelationInput | imageAnnonceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for imageAnnonces.
     */
    cursor?: imageAnnonceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` imageAnnonces from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` imageAnnonces.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of imageAnnonces.
     */
    distinct?: ImageAnnonceScalarFieldEnum | ImageAnnonceScalarFieldEnum[]
  }

  /**
   * imageAnnonce findMany
   */
  export type imageAnnonceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imageAnnonce
     */
    select?: imageAnnonceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: imageAnnonceInclude<ExtArgs> | null
    /**
     * Filter, which imageAnnonces to fetch.
     */
    where?: imageAnnonceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of imageAnnonces to fetch.
     */
    orderBy?: imageAnnonceOrderByWithRelationInput | imageAnnonceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing imageAnnonces.
     */
    cursor?: imageAnnonceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` imageAnnonces from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` imageAnnonces.
     */
    skip?: number
    distinct?: ImageAnnonceScalarFieldEnum | ImageAnnonceScalarFieldEnum[]
  }

  /**
   * imageAnnonce create
   */
  export type imageAnnonceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imageAnnonce
     */
    select?: imageAnnonceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: imageAnnonceInclude<ExtArgs> | null
    /**
     * The data needed to create a imageAnnonce.
     */
    data: XOR<imageAnnonceCreateInput, imageAnnonceUncheckedCreateInput>
  }

  /**
   * imageAnnonce createMany
   */
  export type imageAnnonceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many imageAnnonces.
     */
    data: imageAnnonceCreateManyInput | imageAnnonceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * imageAnnonce createManyAndReturn
   */
  export type imageAnnonceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imageAnnonce
     */
    select?: imageAnnonceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many imageAnnonces.
     */
    data: imageAnnonceCreateManyInput | imageAnnonceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: imageAnnonceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * imageAnnonce update
   */
  export type imageAnnonceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imageAnnonce
     */
    select?: imageAnnonceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: imageAnnonceInclude<ExtArgs> | null
    /**
     * The data needed to update a imageAnnonce.
     */
    data: XOR<imageAnnonceUpdateInput, imageAnnonceUncheckedUpdateInput>
    /**
     * Choose, which imageAnnonce to update.
     */
    where: imageAnnonceWhereUniqueInput
  }

  /**
   * imageAnnonce updateMany
   */
  export type imageAnnonceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update imageAnnonces.
     */
    data: XOR<imageAnnonceUpdateManyMutationInput, imageAnnonceUncheckedUpdateManyInput>
    /**
     * Filter which imageAnnonces to update
     */
    where?: imageAnnonceWhereInput
  }

  /**
   * imageAnnonce upsert
   */
  export type imageAnnonceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imageAnnonce
     */
    select?: imageAnnonceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: imageAnnonceInclude<ExtArgs> | null
    /**
     * The filter to search for the imageAnnonce to update in case it exists.
     */
    where: imageAnnonceWhereUniqueInput
    /**
     * In case the imageAnnonce found by the `where` argument doesn't exist, create a new imageAnnonce with this data.
     */
    create: XOR<imageAnnonceCreateInput, imageAnnonceUncheckedCreateInput>
    /**
     * In case the imageAnnonce was found with the provided `where` argument, update it with this data.
     */
    update: XOR<imageAnnonceUpdateInput, imageAnnonceUncheckedUpdateInput>
  }

  /**
   * imageAnnonce delete
   */
  export type imageAnnonceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imageAnnonce
     */
    select?: imageAnnonceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: imageAnnonceInclude<ExtArgs> | null
    /**
     * Filter which imageAnnonce to delete.
     */
    where: imageAnnonceWhereUniqueInput
  }

  /**
   * imageAnnonce deleteMany
   */
  export type imageAnnonceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which imageAnnonces to delete
     */
    where?: imageAnnonceWhereInput
  }

  /**
   * imageAnnonce without action
   */
  export type imageAnnonceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imageAnnonce
     */
    select?: imageAnnonceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: imageAnnonceInclude<ExtArgs> | null
  }


  /**
   * Model commentaire
   */

  export type AggregateCommentaire = {
    _count: CommentaireCountAggregateOutputType | null
    _avg: CommentaireAvgAggregateOutputType | null
    _sum: CommentaireSumAggregateOutputType | null
    _min: CommentaireMinAggregateOutputType | null
    _max: CommentaireMaxAggregateOutputType | null
  }

  export type CommentaireAvgAggregateOutputType = {
    id: number | null
    note: number | null
    annoncesId: number | null
    userId: number | null
  }

  export type CommentaireSumAggregateOutputType = {
    id: number | null
    note: number | null
    annoncesId: number | null
    userId: number | null
  }

  export type CommentaireMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    commentaire: string | null
    note: number | null
    annoncesId: number | null
    userId: number | null
  }

  export type CommentaireMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    commentaire: string | null
    note: number | null
    annoncesId: number | null
    userId: number | null
  }

  export type CommentaireCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    commentaire: number
    note: number
    annoncesId: number
    userId: number
    _all: number
  }


  export type CommentaireAvgAggregateInputType = {
    id?: true
    note?: true
    annoncesId?: true
    userId?: true
  }

  export type CommentaireSumAggregateInputType = {
    id?: true
    note?: true
    annoncesId?: true
    userId?: true
  }

  export type CommentaireMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    commentaire?: true
    note?: true
    annoncesId?: true
    userId?: true
  }

  export type CommentaireMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    commentaire?: true
    note?: true
    annoncesId?: true
    userId?: true
  }

  export type CommentaireCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    commentaire?: true
    note?: true
    annoncesId?: true
    userId?: true
    _all?: true
  }

  export type CommentaireAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which commentaire to aggregate.
     */
    where?: commentaireWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of commentaires to fetch.
     */
    orderBy?: commentaireOrderByWithRelationInput | commentaireOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: commentaireWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` commentaires from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` commentaires.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned commentaires
    **/
    _count?: true | CommentaireCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CommentaireAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CommentaireSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommentaireMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommentaireMaxAggregateInputType
  }

  export type GetCommentaireAggregateType<T extends CommentaireAggregateArgs> = {
        [P in keyof T & keyof AggregateCommentaire]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCommentaire[P]>
      : GetScalarType<T[P], AggregateCommentaire[P]>
  }




  export type commentaireGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: commentaireWhereInput
    orderBy?: commentaireOrderByWithAggregationInput | commentaireOrderByWithAggregationInput[]
    by: CommentaireScalarFieldEnum[] | CommentaireScalarFieldEnum
    having?: commentaireScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommentaireCountAggregateInputType | true
    _avg?: CommentaireAvgAggregateInputType
    _sum?: CommentaireSumAggregateInputType
    _min?: CommentaireMinAggregateInputType
    _max?: CommentaireMaxAggregateInputType
  }

  export type CommentaireGroupByOutputType = {
    id: number
    createdAt: Date
    updatedAt: Date
    commentaire: string
    note: number | null
    annoncesId: number
    userId: number
    _count: CommentaireCountAggregateOutputType | null
    _avg: CommentaireAvgAggregateOutputType | null
    _sum: CommentaireSumAggregateOutputType | null
    _min: CommentaireMinAggregateOutputType | null
    _max: CommentaireMaxAggregateOutputType | null
  }

  type GetCommentaireGroupByPayload<T extends commentaireGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommentaireGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommentaireGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommentaireGroupByOutputType[P]>
            : GetScalarType<T[P], CommentaireGroupByOutputType[P]>
        }
      >
    >


  export type commentaireSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    commentaire?: boolean
    note?: boolean
    annoncesId?: boolean
    userId?: boolean
    annonces?: boolean | annoncesDefaultArgs<ExtArgs>
    user?: boolean | userDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["commentaire"]>

  export type commentaireSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    commentaire?: boolean
    note?: boolean
    annoncesId?: boolean
    userId?: boolean
    annonces?: boolean | annoncesDefaultArgs<ExtArgs>
    user?: boolean | userDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["commentaire"]>

  export type commentaireSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    commentaire?: boolean
    note?: boolean
    annoncesId?: boolean
    userId?: boolean
  }

  export type commentaireInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    annonces?: boolean | annoncesDefaultArgs<ExtArgs>
    user?: boolean | userDefaultArgs<ExtArgs>
  }
  export type commentaireIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    annonces?: boolean | annoncesDefaultArgs<ExtArgs>
    user?: boolean | userDefaultArgs<ExtArgs>
  }

  export type $commentairePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "commentaire"
    objects: {
      annonces: Prisma.$annoncesPayload<ExtArgs>
      user: Prisma.$userPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      createdAt: Date
      updatedAt: Date
      commentaire: string
      note: number | null
      annoncesId: number
      userId: number
    }, ExtArgs["result"]["commentaire"]>
    composites: {}
  }

  type commentaireGetPayload<S extends boolean | null | undefined | commentaireDefaultArgs> = $Result.GetResult<Prisma.$commentairePayload, S>

  type commentaireCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<commentaireFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CommentaireCountAggregateInputType | true
    }

  export interface commentaireDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['commentaire'], meta: { name: 'commentaire' } }
    /**
     * Find zero or one Commentaire that matches the filter.
     * @param {commentaireFindUniqueArgs} args - Arguments to find a Commentaire
     * @example
     * // Get one Commentaire
     * const commentaire = await prisma.commentaire.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends commentaireFindUniqueArgs>(args: SelectSubset<T, commentaireFindUniqueArgs<ExtArgs>>): Prisma__commentaireClient<$Result.GetResult<Prisma.$commentairePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Commentaire that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {commentaireFindUniqueOrThrowArgs} args - Arguments to find a Commentaire
     * @example
     * // Get one Commentaire
     * const commentaire = await prisma.commentaire.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends commentaireFindUniqueOrThrowArgs>(args: SelectSubset<T, commentaireFindUniqueOrThrowArgs<ExtArgs>>): Prisma__commentaireClient<$Result.GetResult<Prisma.$commentairePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Commentaire that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentaireFindFirstArgs} args - Arguments to find a Commentaire
     * @example
     * // Get one Commentaire
     * const commentaire = await prisma.commentaire.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends commentaireFindFirstArgs>(args?: SelectSubset<T, commentaireFindFirstArgs<ExtArgs>>): Prisma__commentaireClient<$Result.GetResult<Prisma.$commentairePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Commentaire that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentaireFindFirstOrThrowArgs} args - Arguments to find a Commentaire
     * @example
     * // Get one Commentaire
     * const commentaire = await prisma.commentaire.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends commentaireFindFirstOrThrowArgs>(args?: SelectSubset<T, commentaireFindFirstOrThrowArgs<ExtArgs>>): Prisma__commentaireClient<$Result.GetResult<Prisma.$commentairePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Commentaires that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentaireFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Commentaires
     * const commentaires = await prisma.commentaire.findMany()
     * 
     * // Get first 10 Commentaires
     * const commentaires = await prisma.commentaire.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commentaireWithIdOnly = await prisma.commentaire.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends commentaireFindManyArgs>(args?: SelectSubset<T, commentaireFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$commentairePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Commentaire.
     * @param {commentaireCreateArgs} args - Arguments to create a Commentaire.
     * @example
     * // Create one Commentaire
     * const Commentaire = await prisma.commentaire.create({
     *   data: {
     *     // ... data to create a Commentaire
     *   }
     * })
     * 
     */
    create<T extends commentaireCreateArgs>(args: SelectSubset<T, commentaireCreateArgs<ExtArgs>>): Prisma__commentaireClient<$Result.GetResult<Prisma.$commentairePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Commentaires.
     * @param {commentaireCreateManyArgs} args - Arguments to create many Commentaires.
     * @example
     * // Create many Commentaires
     * const commentaire = await prisma.commentaire.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends commentaireCreateManyArgs>(args?: SelectSubset<T, commentaireCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Commentaires and returns the data saved in the database.
     * @param {commentaireCreateManyAndReturnArgs} args - Arguments to create many Commentaires.
     * @example
     * // Create many Commentaires
     * const commentaire = await prisma.commentaire.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Commentaires and only return the `id`
     * const commentaireWithIdOnly = await prisma.commentaire.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends commentaireCreateManyAndReturnArgs>(args?: SelectSubset<T, commentaireCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$commentairePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Commentaire.
     * @param {commentaireDeleteArgs} args - Arguments to delete one Commentaire.
     * @example
     * // Delete one Commentaire
     * const Commentaire = await prisma.commentaire.delete({
     *   where: {
     *     // ... filter to delete one Commentaire
     *   }
     * })
     * 
     */
    delete<T extends commentaireDeleteArgs>(args: SelectSubset<T, commentaireDeleteArgs<ExtArgs>>): Prisma__commentaireClient<$Result.GetResult<Prisma.$commentairePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Commentaire.
     * @param {commentaireUpdateArgs} args - Arguments to update one Commentaire.
     * @example
     * // Update one Commentaire
     * const commentaire = await prisma.commentaire.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends commentaireUpdateArgs>(args: SelectSubset<T, commentaireUpdateArgs<ExtArgs>>): Prisma__commentaireClient<$Result.GetResult<Prisma.$commentairePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Commentaires.
     * @param {commentaireDeleteManyArgs} args - Arguments to filter Commentaires to delete.
     * @example
     * // Delete a few Commentaires
     * const { count } = await prisma.commentaire.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends commentaireDeleteManyArgs>(args?: SelectSubset<T, commentaireDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Commentaires.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentaireUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Commentaires
     * const commentaire = await prisma.commentaire.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends commentaireUpdateManyArgs>(args: SelectSubset<T, commentaireUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Commentaire.
     * @param {commentaireUpsertArgs} args - Arguments to update or create a Commentaire.
     * @example
     * // Update or create a Commentaire
     * const commentaire = await prisma.commentaire.upsert({
     *   create: {
     *     // ... data to create a Commentaire
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Commentaire we want to update
     *   }
     * })
     */
    upsert<T extends commentaireUpsertArgs>(args: SelectSubset<T, commentaireUpsertArgs<ExtArgs>>): Prisma__commentaireClient<$Result.GetResult<Prisma.$commentairePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Commentaires.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentaireCountArgs} args - Arguments to filter Commentaires to count.
     * @example
     * // Count the number of Commentaires
     * const count = await prisma.commentaire.count({
     *   where: {
     *     // ... the filter for the Commentaires we want to count
     *   }
     * })
    **/
    count<T extends commentaireCountArgs>(
      args?: Subset<T, commentaireCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentaireCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Commentaire.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentaireAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentaireAggregateArgs>(args: Subset<T, CommentaireAggregateArgs>): Prisma.PrismaPromise<GetCommentaireAggregateType<T>>

    /**
     * Group by Commentaire.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentaireGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends commentaireGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: commentaireGroupByArgs['orderBy'] }
        : { orderBy?: commentaireGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, commentaireGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentaireGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the commentaire model
   */
  readonly fields: commentaireFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for commentaire.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__commentaireClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    annonces<T extends annoncesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, annoncesDefaultArgs<ExtArgs>>): Prisma__annoncesClient<$Result.GetResult<Prisma.$annoncesPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, userDefaultArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the commentaire model
   */ 
  interface commentaireFieldRefs {
    readonly id: FieldRef<"commentaire", 'Int'>
    readonly createdAt: FieldRef<"commentaire", 'DateTime'>
    readonly updatedAt: FieldRef<"commentaire", 'DateTime'>
    readonly commentaire: FieldRef<"commentaire", 'String'>
    readonly note: FieldRef<"commentaire", 'Int'>
    readonly annoncesId: FieldRef<"commentaire", 'Int'>
    readonly userId: FieldRef<"commentaire", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * commentaire findUnique
   */
  export type commentaireFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the commentaire
     */
    select?: commentaireSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: commentaireInclude<ExtArgs> | null
    /**
     * Filter, which commentaire to fetch.
     */
    where: commentaireWhereUniqueInput
  }

  /**
   * commentaire findUniqueOrThrow
   */
  export type commentaireFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the commentaire
     */
    select?: commentaireSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: commentaireInclude<ExtArgs> | null
    /**
     * Filter, which commentaire to fetch.
     */
    where: commentaireWhereUniqueInput
  }

  /**
   * commentaire findFirst
   */
  export type commentaireFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the commentaire
     */
    select?: commentaireSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: commentaireInclude<ExtArgs> | null
    /**
     * Filter, which commentaire to fetch.
     */
    where?: commentaireWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of commentaires to fetch.
     */
    orderBy?: commentaireOrderByWithRelationInput | commentaireOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for commentaires.
     */
    cursor?: commentaireWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` commentaires from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` commentaires.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of commentaires.
     */
    distinct?: CommentaireScalarFieldEnum | CommentaireScalarFieldEnum[]
  }

  /**
   * commentaire findFirstOrThrow
   */
  export type commentaireFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the commentaire
     */
    select?: commentaireSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: commentaireInclude<ExtArgs> | null
    /**
     * Filter, which commentaire to fetch.
     */
    where?: commentaireWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of commentaires to fetch.
     */
    orderBy?: commentaireOrderByWithRelationInput | commentaireOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for commentaires.
     */
    cursor?: commentaireWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` commentaires from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` commentaires.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of commentaires.
     */
    distinct?: CommentaireScalarFieldEnum | CommentaireScalarFieldEnum[]
  }

  /**
   * commentaire findMany
   */
  export type commentaireFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the commentaire
     */
    select?: commentaireSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: commentaireInclude<ExtArgs> | null
    /**
     * Filter, which commentaires to fetch.
     */
    where?: commentaireWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of commentaires to fetch.
     */
    orderBy?: commentaireOrderByWithRelationInput | commentaireOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing commentaires.
     */
    cursor?: commentaireWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` commentaires from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` commentaires.
     */
    skip?: number
    distinct?: CommentaireScalarFieldEnum | CommentaireScalarFieldEnum[]
  }

  /**
   * commentaire create
   */
  export type commentaireCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the commentaire
     */
    select?: commentaireSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: commentaireInclude<ExtArgs> | null
    /**
     * The data needed to create a commentaire.
     */
    data: XOR<commentaireCreateInput, commentaireUncheckedCreateInput>
  }

  /**
   * commentaire createMany
   */
  export type commentaireCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many commentaires.
     */
    data: commentaireCreateManyInput | commentaireCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * commentaire createManyAndReturn
   */
  export type commentaireCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the commentaire
     */
    select?: commentaireSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many commentaires.
     */
    data: commentaireCreateManyInput | commentaireCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: commentaireIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * commentaire update
   */
  export type commentaireUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the commentaire
     */
    select?: commentaireSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: commentaireInclude<ExtArgs> | null
    /**
     * The data needed to update a commentaire.
     */
    data: XOR<commentaireUpdateInput, commentaireUncheckedUpdateInput>
    /**
     * Choose, which commentaire to update.
     */
    where: commentaireWhereUniqueInput
  }

  /**
   * commentaire updateMany
   */
  export type commentaireUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update commentaires.
     */
    data: XOR<commentaireUpdateManyMutationInput, commentaireUncheckedUpdateManyInput>
    /**
     * Filter which commentaires to update
     */
    where?: commentaireWhereInput
  }

  /**
   * commentaire upsert
   */
  export type commentaireUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the commentaire
     */
    select?: commentaireSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: commentaireInclude<ExtArgs> | null
    /**
     * The filter to search for the commentaire to update in case it exists.
     */
    where: commentaireWhereUniqueInput
    /**
     * In case the commentaire found by the `where` argument doesn't exist, create a new commentaire with this data.
     */
    create: XOR<commentaireCreateInput, commentaireUncheckedCreateInput>
    /**
     * In case the commentaire was found with the provided `where` argument, update it with this data.
     */
    update: XOR<commentaireUpdateInput, commentaireUncheckedUpdateInput>
  }

  /**
   * commentaire delete
   */
  export type commentaireDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the commentaire
     */
    select?: commentaireSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: commentaireInclude<ExtArgs> | null
    /**
     * Filter which commentaire to delete.
     */
    where: commentaireWhereUniqueInput
  }

  /**
   * commentaire deleteMany
   */
  export type commentaireDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which commentaires to delete
     */
    where?: commentaireWhereInput
  }

  /**
   * commentaire without action
   */
  export type commentaireDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the commentaire
     */
    select?: commentaireSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: commentaireInclude<ExtArgs> | null
  }


  /**
   * Model temoignages
   */

  export type AggregateTemoignages = {
    _count: TemoignagesCountAggregateOutputType | null
    _avg: TemoignagesAvgAggregateOutputType | null
    _sum: TemoignagesSumAggregateOutputType | null
    _min: TemoignagesMinAggregateOutputType | null
    _max: TemoignagesMaxAggregateOutputType | null
  }

  export type TemoignagesAvgAggregateOutputType = {
    id: number | null
    noteLilee: number | null
    userId: number | null
  }

  export type TemoignagesSumAggregateOutputType = {
    id: number | null
    noteLilee: number | null
    userId: number | null
  }

  export type TemoignagesMinAggregateOutputType = {
    id: number | null
    temoignage: string | null
    noteLilee: number | null
    ville: string | null
    pays: string | null
    userId: number | null
  }

  export type TemoignagesMaxAggregateOutputType = {
    id: number | null
    temoignage: string | null
    noteLilee: number | null
    ville: string | null
    pays: string | null
    userId: number | null
  }

  export type TemoignagesCountAggregateOutputType = {
    id: number
    temoignage: number
    noteLilee: number
    ville: number
    pays: number
    userId: number
    _all: number
  }


  export type TemoignagesAvgAggregateInputType = {
    id?: true
    noteLilee?: true
    userId?: true
  }

  export type TemoignagesSumAggregateInputType = {
    id?: true
    noteLilee?: true
    userId?: true
  }

  export type TemoignagesMinAggregateInputType = {
    id?: true
    temoignage?: true
    noteLilee?: true
    ville?: true
    pays?: true
    userId?: true
  }

  export type TemoignagesMaxAggregateInputType = {
    id?: true
    temoignage?: true
    noteLilee?: true
    ville?: true
    pays?: true
    userId?: true
  }

  export type TemoignagesCountAggregateInputType = {
    id?: true
    temoignage?: true
    noteLilee?: true
    ville?: true
    pays?: true
    userId?: true
    _all?: true
  }

  export type TemoignagesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which temoignages to aggregate.
     */
    where?: temoignagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of temoignages to fetch.
     */
    orderBy?: temoignagesOrderByWithRelationInput | temoignagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: temoignagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` temoignages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` temoignages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned temoignages
    **/
    _count?: true | TemoignagesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TemoignagesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TemoignagesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TemoignagesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TemoignagesMaxAggregateInputType
  }

  export type GetTemoignagesAggregateType<T extends TemoignagesAggregateArgs> = {
        [P in keyof T & keyof AggregateTemoignages]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTemoignages[P]>
      : GetScalarType<T[P], AggregateTemoignages[P]>
  }




  export type temoignagesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: temoignagesWhereInput
    orderBy?: temoignagesOrderByWithAggregationInput | temoignagesOrderByWithAggregationInput[]
    by: TemoignagesScalarFieldEnum[] | TemoignagesScalarFieldEnum
    having?: temoignagesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TemoignagesCountAggregateInputType | true
    _avg?: TemoignagesAvgAggregateInputType
    _sum?: TemoignagesSumAggregateInputType
    _min?: TemoignagesMinAggregateInputType
    _max?: TemoignagesMaxAggregateInputType
  }

  export type TemoignagesGroupByOutputType = {
    id: number
    temoignage: string
    noteLilee: number
    ville: string | null
    pays: string | null
    userId: number
    _count: TemoignagesCountAggregateOutputType | null
    _avg: TemoignagesAvgAggregateOutputType | null
    _sum: TemoignagesSumAggregateOutputType | null
    _min: TemoignagesMinAggregateOutputType | null
    _max: TemoignagesMaxAggregateOutputType | null
  }

  type GetTemoignagesGroupByPayload<T extends temoignagesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TemoignagesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TemoignagesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TemoignagesGroupByOutputType[P]>
            : GetScalarType<T[P], TemoignagesGroupByOutputType[P]>
        }
      >
    >


  export type temoignagesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    temoignage?: boolean
    noteLilee?: boolean
    ville?: boolean
    pays?: boolean
    userId?: boolean
    user?: boolean | userDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["temoignages"]>

  export type temoignagesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    temoignage?: boolean
    noteLilee?: boolean
    ville?: boolean
    pays?: boolean
    userId?: boolean
    user?: boolean | userDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["temoignages"]>

  export type temoignagesSelectScalar = {
    id?: boolean
    temoignage?: boolean
    noteLilee?: boolean
    ville?: boolean
    pays?: boolean
    userId?: boolean
  }

  export type temoignagesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | userDefaultArgs<ExtArgs>
  }
  export type temoignagesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | userDefaultArgs<ExtArgs>
  }

  export type $temoignagesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "temoignages"
    objects: {
      user: Prisma.$userPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      temoignage: string
      noteLilee: number
      ville: string | null
      pays: string | null
      userId: number
    }, ExtArgs["result"]["temoignages"]>
    composites: {}
  }

  type temoignagesGetPayload<S extends boolean | null | undefined | temoignagesDefaultArgs> = $Result.GetResult<Prisma.$temoignagesPayload, S>

  type temoignagesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<temoignagesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TemoignagesCountAggregateInputType | true
    }

  export interface temoignagesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['temoignages'], meta: { name: 'temoignages' } }
    /**
     * Find zero or one Temoignages that matches the filter.
     * @param {temoignagesFindUniqueArgs} args - Arguments to find a Temoignages
     * @example
     * // Get one Temoignages
     * const temoignages = await prisma.temoignages.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends temoignagesFindUniqueArgs>(args: SelectSubset<T, temoignagesFindUniqueArgs<ExtArgs>>): Prisma__temoignagesClient<$Result.GetResult<Prisma.$temoignagesPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Temoignages that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {temoignagesFindUniqueOrThrowArgs} args - Arguments to find a Temoignages
     * @example
     * // Get one Temoignages
     * const temoignages = await prisma.temoignages.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends temoignagesFindUniqueOrThrowArgs>(args: SelectSubset<T, temoignagesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__temoignagesClient<$Result.GetResult<Prisma.$temoignagesPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Temoignages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {temoignagesFindFirstArgs} args - Arguments to find a Temoignages
     * @example
     * // Get one Temoignages
     * const temoignages = await prisma.temoignages.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends temoignagesFindFirstArgs>(args?: SelectSubset<T, temoignagesFindFirstArgs<ExtArgs>>): Prisma__temoignagesClient<$Result.GetResult<Prisma.$temoignagesPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Temoignages that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {temoignagesFindFirstOrThrowArgs} args - Arguments to find a Temoignages
     * @example
     * // Get one Temoignages
     * const temoignages = await prisma.temoignages.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends temoignagesFindFirstOrThrowArgs>(args?: SelectSubset<T, temoignagesFindFirstOrThrowArgs<ExtArgs>>): Prisma__temoignagesClient<$Result.GetResult<Prisma.$temoignagesPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Temoignages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {temoignagesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Temoignages
     * const temoignages = await prisma.temoignages.findMany()
     * 
     * // Get first 10 Temoignages
     * const temoignages = await prisma.temoignages.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const temoignagesWithIdOnly = await prisma.temoignages.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends temoignagesFindManyArgs>(args?: SelectSubset<T, temoignagesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$temoignagesPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Temoignages.
     * @param {temoignagesCreateArgs} args - Arguments to create a Temoignages.
     * @example
     * // Create one Temoignages
     * const Temoignages = await prisma.temoignages.create({
     *   data: {
     *     // ... data to create a Temoignages
     *   }
     * })
     * 
     */
    create<T extends temoignagesCreateArgs>(args: SelectSubset<T, temoignagesCreateArgs<ExtArgs>>): Prisma__temoignagesClient<$Result.GetResult<Prisma.$temoignagesPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Temoignages.
     * @param {temoignagesCreateManyArgs} args - Arguments to create many Temoignages.
     * @example
     * // Create many Temoignages
     * const temoignages = await prisma.temoignages.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends temoignagesCreateManyArgs>(args?: SelectSubset<T, temoignagesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Temoignages and returns the data saved in the database.
     * @param {temoignagesCreateManyAndReturnArgs} args - Arguments to create many Temoignages.
     * @example
     * // Create many Temoignages
     * const temoignages = await prisma.temoignages.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Temoignages and only return the `id`
     * const temoignagesWithIdOnly = await prisma.temoignages.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends temoignagesCreateManyAndReturnArgs>(args?: SelectSubset<T, temoignagesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$temoignagesPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Temoignages.
     * @param {temoignagesDeleteArgs} args - Arguments to delete one Temoignages.
     * @example
     * // Delete one Temoignages
     * const Temoignages = await prisma.temoignages.delete({
     *   where: {
     *     // ... filter to delete one Temoignages
     *   }
     * })
     * 
     */
    delete<T extends temoignagesDeleteArgs>(args: SelectSubset<T, temoignagesDeleteArgs<ExtArgs>>): Prisma__temoignagesClient<$Result.GetResult<Prisma.$temoignagesPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Temoignages.
     * @param {temoignagesUpdateArgs} args - Arguments to update one Temoignages.
     * @example
     * // Update one Temoignages
     * const temoignages = await prisma.temoignages.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends temoignagesUpdateArgs>(args: SelectSubset<T, temoignagesUpdateArgs<ExtArgs>>): Prisma__temoignagesClient<$Result.GetResult<Prisma.$temoignagesPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Temoignages.
     * @param {temoignagesDeleteManyArgs} args - Arguments to filter Temoignages to delete.
     * @example
     * // Delete a few Temoignages
     * const { count } = await prisma.temoignages.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends temoignagesDeleteManyArgs>(args?: SelectSubset<T, temoignagesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Temoignages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {temoignagesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Temoignages
     * const temoignages = await prisma.temoignages.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends temoignagesUpdateManyArgs>(args: SelectSubset<T, temoignagesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Temoignages.
     * @param {temoignagesUpsertArgs} args - Arguments to update or create a Temoignages.
     * @example
     * // Update or create a Temoignages
     * const temoignages = await prisma.temoignages.upsert({
     *   create: {
     *     // ... data to create a Temoignages
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Temoignages we want to update
     *   }
     * })
     */
    upsert<T extends temoignagesUpsertArgs>(args: SelectSubset<T, temoignagesUpsertArgs<ExtArgs>>): Prisma__temoignagesClient<$Result.GetResult<Prisma.$temoignagesPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Temoignages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {temoignagesCountArgs} args - Arguments to filter Temoignages to count.
     * @example
     * // Count the number of Temoignages
     * const count = await prisma.temoignages.count({
     *   where: {
     *     // ... the filter for the Temoignages we want to count
     *   }
     * })
    **/
    count<T extends temoignagesCountArgs>(
      args?: Subset<T, temoignagesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TemoignagesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Temoignages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TemoignagesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TemoignagesAggregateArgs>(args: Subset<T, TemoignagesAggregateArgs>): Prisma.PrismaPromise<GetTemoignagesAggregateType<T>>

    /**
     * Group by Temoignages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {temoignagesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends temoignagesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: temoignagesGroupByArgs['orderBy'] }
        : { orderBy?: temoignagesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, temoignagesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTemoignagesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the temoignages model
   */
  readonly fields: temoignagesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for temoignages.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__temoignagesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, userDefaultArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the temoignages model
   */ 
  interface temoignagesFieldRefs {
    readonly id: FieldRef<"temoignages", 'Int'>
    readonly temoignage: FieldRef<"temoignages", 'String'>
    readonly noteLilee: FieldRef<"temoignages", 'Int'>
    readonly ville: FieldRef<"temoignages", 'String'>
    readonly pays: FieldRef<"temoignages", 'String'>
    readonly userId: FieldRef<"temoignages", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * temoignages findUnique
   */
  export type temoignagesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the temoignages
     */
    select?: temoignagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: temoignagesInclude<ExtArgs> | null
    /**
     * Filter, which temoignages to fetch.
     */
    where: temoignagesWhereUniqueInput
  }

  /**
   * temoignages findUniqueOrThrow
   */
  export type temoignagesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the temoignages
     */
    select?: temoignagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: temoignagesInclude<ExtArgs> | null
    /**
     * Filter, which temoignages to fetch.
     */
    where: temoignagesWhereUniqueInput
  }

  /**
   * temoignages findFirst
   */
  export type temoignagesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the temoignages
     */
    select?: temoignagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: temoignagesInclude<ExtArgs> | null
    /**
     * Filter, which temoignages to fetch.
     */
    where?: temoignagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of temoignages to fetch.
     */
    orderBy?: temoignagesOrderByWithRelationInput | temoignagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for temoignages.
     */
    cursor?: temoignagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` temoignages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` temoignages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of temoignages.
     */
    distinct?: TemoignagesScalarFieldEnum | TemoignagesScalarFieldEnum[]
  }

  /**
   * temoignages findFirstOrThrow
   */
  export type temoignagesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the temoignages
     */
    select?: temoignagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: temoignagesInclude<ExtArgs> | null
    /**
     * Filter, which temoignages to fetch.
     */
    where?: temoignagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of temoignages to fetch.
     */
    orderBy?: temoignagesOrderByWithRelationInput | temoignagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for temoignages.
     */
    cursor?: temoignagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` temoignages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` temoignages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of temoignages.
     */
    distinct?: TemoignagesScalarFieldEnum | TemoignagesScalarFieldEnum[]
  }

  /**
   * temoignages findMany
   */
  export type temoignagesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the temoignages
     */
    select?: temoignagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: temoignagesInclude<ExtArgs> | null
    /**
     * Filter, which temoignages to fetch.
     */
    where?: temoignagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of temoignages to fetch.
     */
    orderBy?: temoignagesOrderByWithRelationInput | temoignagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing temoignages.
     */
    cursor?: temoignagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` temoignages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` temoignages.
     */
    skip?: number
    distinct?: TemoignagesScalarFieldEnum | TemoignagesScalarFieldEnum[]
  }

  /**
   * temoignages create
   */
  export type temoignagesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the temoignages
     */
    select?: temoignagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: temoignagesInclude<ExtArgs> | null
    /**
     * The data needed to create a temoignages.
     */
    data: XOR<temoignagesCreateInput, temoignagesUncheckedCreateInput>
  }

  /**
   * temoignages createMany
   */
  export type temoignagesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many temoignages.
     */
    data: temoignagesCreateManyInput | temoignagesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * temoignages createManyAndReturn
   */
  export type temoignagesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the temoignages
     */
    select?: temoignagesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many temoignages.
     */
    data: temoignagesCreateManyInput | temoignagesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: temoignagesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * temoignages update
   */
  export type temoignagesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the temoignages
     */
    select?: temoignagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: temoignagesInclude<ExtArgs> | null
    /**
     * The data needed to update a temoignages.
     */
    data: XOR<temoignagesUpdateInput, temoignagesUncheckedUpdateInput>
    /**
     * Choose, which temoignages to update.
     */
    where: temoignagesWhereUniqueInput
  }

  /**
   * temoignages updateMany
   */
  export type temoignagesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update temoignages.
     */
    data: XOR<temoignagesUpdateManyMutationInput, temoignagesUncheckedUpdateManyInput>
    /**
     * Filter which temoignages to update
     */
    where?: temoignagesWhereInput
  }

  /**
   * temoignages upsert
   */
  export type temoignagesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the temoignages
     */
    select?: temoignagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: temoignagesInclude<ExtArgs> | null
    /**
     * The filter to search for the temoignages to update in case it exists.
     */
    where: temoignagesWhereUniqueInput
    /**
     * In case the temoignages found by the `where` argument doesn't exist, create a new temoignages with this data.
     */
    create: XOR<temoignagesCreateInput, temoignagesUncheckedCreateInput>
    /**
     * In case the temoignages was found with the provided `where` argument, update it with this data.
     */
    update: XOR<temoignagesUpdateInput, temoignagesUncheckedUpdateInput>
  }

  /**
   * temoignages delete
   */
  export type temoignagesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the temoignages
     */
    select?: temoignagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: temoignagesInclude<ExtArgs> | null
    /**
     * Filter which temoignages to delete.
     */
    where: temoignagesWhereUniqueInput
  }

  /**
   * temoignages deleteMany
   */
  export type temoignagesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which temoignages to delete
     */
    where?: temoignagesWhereInput
  }

  /**
   * temoignages without action
   */
  export type temoignagesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the temoignages
     */
    select?: temoignagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: temoignagesInclude<ExtArgs> | null
  }


  /**
   * Model adresseFacturation
   */

  export type AggregateAdresseFacturation = {
    _count: AdresseFacturationCountAggregateOutputType | null
    _avg: AdresseFacturationAvgAggregateOutputType | null
    _sum: AdresseFacturationSumAggregateOutputType | null
    _min: AdresseFacturationMinAggregateOutputType | null
    _max: AdresseFacturationMaxAggregateOutputType | null
  }

  export type AdresseFacturationAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type AdresseFacturationSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type AdresseFacturationMinAggregateOutputType = {
    id: number | null
    nom: string | null
    adresse: string | null
    codePostal: string | null
    ville: string | null
    pays: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: number | null
  }

  export type AdresseFacturationMaxAggregateOutputType = {
    id: number | null
    nom: string | null
    adresse: string | null
    codePostal: string | null
    ville: string | null
    pays: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: number | null
  }

  export type AdresseFacturationCountAggregateOutputType = {
    id: number
    nom: number
    adresse: number
    codePostal: number
    ville: number
    pays: number
    createdAt: number
    updatedAt: number
    userId: number
    _all: number
  }


  export type AdresseFacturationAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type AdresseFacturationSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type AdresseFacturationMinAggregateInputType = {
    id?: true
    nom?: true
    adresse?: true
    codePostal?: true
    ville?: true
    pays?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
  }

  export type AdresseFacturationMaxAggregateInputType = {
    id?: true
    nom?: true
    adresse?: true
    codePostal?: true
    ville?: true
    pays?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
  }

  export type AdresseFacturationCountAggregateInputType = {
    id?: true
    nom?: true
    adresse?: true
    codePostal?: true
    ville?: true
    pays?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    _all?: true
  }

  export type AdresseFacturationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which adresseFacturation to aggregate.
     */
    where?: adresseFacturationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of adresseFacturations to fetch.
     */
    orderBy?: adresseFacturationOrderByWithRelationInput | adresseFacturationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: adresseFacturationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` adresseFacturations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` adresseFacturations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned adresseFacturations
    **/
    _count?: true | AdresseFacturationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AdresseFacturationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AdresseFacturationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdresseFacturationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdresseFacturationMaxAggregateInputType
  }

  export type GetAdresseFacturationAggregateType<T extends AdresseFacturationAggregateArgs> = {
        [P in keyof T & keyof AggregateAdresseFacturation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdresseFacturation[P]>
      : GetScalarType<T[P], AggregateAdresseFacturation[P]>
  }




  export type adresseFacturationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: adresseFacturationWhereInput
    orderBy?: adresseFacturationOrderByWithAggregationInput | adresseFacturationOrderByWithAggregationInput[]
    by: AdresseFacturationScalarFieldEnum[] | AdresseFacturationScalarFieldEnum
    having?: adresseFacturationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdresseFacturationCountAggregateInputType | true
    _avg?: AdresseFacturationAvgAggregateInputType
    _sum?: AdresseFacturationSumAggregateInputType
    _min?: AdresseFacturationMinAggregateInputType
    _max?: AdresseFacturationMaxAggregateInputType
  }

  export type AdresseFacturationGroupByOutputType = {
    id: number
    nom: string
    adresse: string
    codePostal: string
    ville: string
    pays: string
    createdAt: Date
    updatedAt: Date
    userId: number
    _count: AdresseFacturationCountAggregateOutputType | null
    _avg: AdresseFacturationAvgAggregateOutputType | null
    _sum: AdresseFacturationSumAggregateOutputType | null
    _min: AdresseFacturationMinAggregateOutputType | null
    _max: AdresseFacturationMaxAggregateOutputType | null
  }

  type GetAdresseFacturationGroupByPayload<T extends adresseFacturationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdresseFacturationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdresseFacturationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdresseFacturationGroupByOutputType[P]>
            : GetScalarType<T[P], AdresseFacturationGroupByOutputType[P]>
        }
      >
    >


  export type adresseFacturationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
    adresse?: boolean
    codePostal?: boolean
    ville?: boolean
    pays?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    user?: boolean | userDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["adresseFacturation"]>

  export type adresseFacturationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
    adresse?: boolean
    codePostal?: boolean
    ville?: boolean
    pays?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    user?: boolean | userDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["adresseFacturation"]>

  export type adresseFacturationSelectScalar = {
    id?: boolean
    nom?: boolean
    adresse?: boolean
    codePostal?: boolean
    ville?: boolean
    pays?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
  }

  export type adresseFacturationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | userDefaultArgs<ExtArgs>
  }
  export type adresseFacturationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | userDefaultArgs<ExtArgs>
  }

  export type $adresseFacturationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "adresseFacturation"
    objects: {
      user: Prisma.$userPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nom: string
      adresse: string
      codePostal: string
      ville: string
      pays: string
      createdAt: Date
      updatedAt: Date
      userId: number
    }, ExtArgs["result"]["adresseFacturation"]>
    composites: {}
  }

  type adresseFacturationGetPayload<S extends boolean | null | undefined | adresseFacturationDefaultArgs> = $Result.GetResult<Prisma.$adresseFacturationPayload, S>

  type adresseFacturationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<adresseFacturationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AdresseFacturationCountAggregateInputType | true
    }

  export interface adresseFacturationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['adresseFacturation'], meta: { name: 'adresseFacturation' } }
    /**
     * Find zero or one AdresseFacturation that matches the filter.
     * @param {adresseFacturationFindUniqueArgs} args - Arguments to find a AdresseFacturation
     * @example
     * // Get one AdresseFacturation
     * const adresseFacturation = await prisma.adresseFacturation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends adresseFacturationFindUniqueArgs>(args: SelectSubset<T, adresseFacturationFindUniqueArgs<ExtArgs>>): Prisma__adresseFacturationClient<$Result.GetResult<Prisma.$adresseFacturationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AdresseFacturation that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {adresseFacturationFindUniqueOrThrowArgs} args - Arguments to find a AdresseFacturation
     * @example
     * // Get one AdresseFacturation
     * const adresseFacturation = await prisma.adresseFacturation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends adresseFacturationFindUniqueOrThrowArgs>(args: SelectSubset<T, adresseFacturationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__adresseFacturationClient<$Result.GetResult<Prisma.$adresseFacturationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AdresseFacturation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {adresseFacturationFindFirstArgs} args - Arguments to find a AdresseFacturation
     * @example
     * // Get one AdresseFacturation
     * const adresseFacturation = await prisma.adresseFacturation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends adresseFacturationFindFirstArgs>(args?: SelectSubset<T, adresseFacturationFindFirstArgs<ExtArgs>>): Prisma__adresseFacturationClient<$Result.GetResult<Prisma.$adresseFacturationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AdresseFacturation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {adresseFacturationFindFirstOrThrowArgs} args - Arguments to find a AdresseFacturation
     * @example
     * // Get one AdresseFacturation
     * const adresseFacturation = await prisma.adresseFacturation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends adresseFacturationFindFirstOrThrowArgs>(args?: SelectSubset<T, adresseFacturationFindFirstOrThrowArgs<ExtArgs>>): Prisma__adresseFacturationClient<$Result.GetResult<Prisma.$adresseFacturationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AdresseFacturations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {adresseFacturationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AdresseFacturations
     * const adresseFacturations = await prisma.adresseFacturation.findMany()
     * 
     * // Get first 10 AdresseFacturations
     * const adresseFacturations = await prisma.adresseFacturation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const adresseFacturationWithIdOnly = await prisma.adresseFacturation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends adresseFacturationFindManyArgs>(args?: SelectSubset<T, adresseFacturationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$adresseFacturationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AdresseFacturation.
     * @param {adresseFacturationCreateArgs} args - Arguments to create a AdresseFacturation.
     * @example
     * // Create one AdresseFacturation
     * const AdresseFacturation = await prisma.adresseFacturation.create({
     *   data: {
     *     // ... data to create a AdresseFacturation
     *   }
     * })
     * 
     */
    create<T extends adresseFacturationCreateArgs>(args: SelectSubset<T, adresseFacturationCreateArgs<ExtArgs>>): Prisma__adresseFacturationClient<$Result.GetResult<Prisma.$adresseFacturationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AdresseFacturations.
     * @param {adresseFacturationCreateManyArgs} args - Arguments to create many AdresseFacturations.
     * @example
     * // Create many AdresseFacturations
     * const adresseFacturation = await prisma.adresseFacturation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends adresseFacturationCreateManyArgs>(args?: SelectSubset<T, adresseFacturationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AdresseFacturations and returns the data saved in the database.
     * @param {adresseFacturationCreateManyAndReturnArgs} args - Arguments to create many AdresseFacturations.
     * @example
     * // Create many AdresseFacturations
     * const adresseFacturation = await prisma.adresseFacturation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AdresseFacturations and only return the `id`
     * const adresseFacturationWithIdOnly = await prisma.adresseFacturation.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends adresseFacturationCreateManyAndReturnArgs>(args?: SelectSubset<T, adresseFacturationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$adresseFacturationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a AdresseFacturation.
     * @param {adresseFacturationDeleteArgs} args - Arguments to delete one AdresseFacturation.
     * @example
     * // Delete one AdresseFacturation
     * const AdresseFacturation = await prisma.adresseFacturation.delete({
     *   where: {
     *     // ... filter to delete one AdresseFacturation
     *   }
     * })
     * 
     */
    delete<T extends adresseFacturationDeleteArgs>(args: SelectSubset<T, adresseFacturationDeleteArgs<ExtArgs>>): Prisma__adresseFacturationClient<$Result.GetResult<Prisma.$adresseFacturationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AdresseFacturation.
     * @param {adresseFacturationUpdateArgs} args - Arguments to update one AdresseFacturation.
     * @example
     * // Update one AdresseFacturation
     * const adresseFacturation = await prisma.adresseFacturation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends adresseFacturationUpdateArgs>(args: SelectSubset<T, adresseFacturationUpdateArgs<ExtArgs>>): Prisma__adresseFacturationClient<$Result.GetResult<Prisma.$adresseFacturationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AdresseFacturations.
     * @param {adresseFacturationDeleteManyArgs} args - Arguments to filter AdresseFacturations to delete.
     * @example
     * // Delete a few AdresseFacturations
     * const { count } = await prisma.adresseFacturation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends adresseFacturationDeleteManyArgs>(args?: SelectSubset<T, adresseFacturationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AdresseFacturations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {adresseFacturationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AdresseFacturations
     * const adresseFacturation = await prisma.adresseFacturation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends adresseFacturationUpdateManyArgs>(args: SelectSubset<T, adresseFacturationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AdresseFacturation.
     * @param {adresseFacturationUpsertArgs} args - Arguments to update or create a AdresseFacturation.
     * @example
     * // Update or create a AdresseFacturation
     * const adresseFacturation = await prisma.adresseFacturation.upsert({
     *   create: {
     *     // ... data to create a AdresseFacturation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AdresseFacturation we want to update
     *   }
     * })
     */
    upsert<T extends adresseFacturationUpsertArgs>(args: SelectSubset<T, adresseFacturationUpsertArgs<ExtArgs>>): Prisma__adresseFacturationClient<$Result.GetResult<Prisma.$adresseFacturationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AdresseFacturations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {adresseFacturationCountArgs} args - Arguments to filter AdresseFacturations to count.
     * @example
     * // Count the number of AdresseFacturations
     * const count = await prisma.adresseFacturation.count({
     *   where: {
     *     // ... the filter for the AdresseFacturations we want to count
     *   }
     * })
    **/
    count<T extends adresseFacturationCountArgs>(
      args?: Subset<T, adresseFacturationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdresseFacturationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AdresseFacturation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdresseFacturationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdresseFacturationAggregateArgs>(args: Subset<T, AdresseFacturationAggregateArgs>): Prisma.PrismaPromise<GetAdresseFacturationAggregateType<T>>

    /**
     * Group by AdresseFacturation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {adresseFacturationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends adresseFacturationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: adresseFacturationGroupByArgs['orderBy'] }
        : { orderBy?: adresseFacturationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, adresseFacturationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdresseFacturationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the adresseFacturation model
   */
  readonly fields: adresseFacturationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for adresseFacturation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__adresseFacturationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, userDefaultArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the adresseFacturation model
   */ 
  interface adresseFacturationFieldRefs {
    readonly id: FieldRef<"adresseFacturation", 'Int'>
    readonly nom: FieldRef<"adresseFacturation", 'String'>
    readonly adresse: FieldRef<"adresseFacturation", 'String'>
    readonly codePostal: FieldRef<"adresseFacturation", 'String'>
    readonly ville: FieldRef<"adresseFacturation", 'String'>
    readonly pays: FieldRef<"adresseFacturation", 'String'>
    readonly createdAt: FieldRef<"adresseFacturation", 'DateTime'>
    readonly updatedAt: FieldRef<"adresseFacturation", 'DateTime'>
    readonly userId: FieldRef<"adresseFacturation", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * adresseFacturation findUnique
   */
  export type adresseFacturationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the adresseFacturation
     */
    select?: adresseFacturationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: adresseFacturationInclude<ExtArgs> | null
    /**
     * Filter, which adresseFacturation to fetch.
     */
    where: adresseFacturationWhereUniqueInput
  }

  /**
   * adresseFacturation findUniqueOrThrow
   */
  export type adresseFacturationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the adresseFacturation
     */
    select?: adresseFacturationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: adresseFacturationInclude<ExtArgs> | null
    /**
     * Filter, which adresseFacturation to fetch.
     */
    where: adresseFacturationWhereUniqueInput
  }

  /**
   * adresseFacturation findFirst
   */
  export type adresseFacturationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the adresseFacturation
     */
    select?: adresseFacturationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: adresseFacturationInclude<ExtArgs> | null
    /**
     * Filter, which adresseFacturation to fetch.
     */
    where?: adresseFacturationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of adresseFacturations to fetch.
     */
    orderBy?: adresseFacturationOrderByWithRelationInput | adresseFacturationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for adresseFacturations.
     */
    cursor?: adresseFacturationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` adresseFacturations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` adresseFacturations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of adresseFacturations.
     */
    distinct?: AdresseFacturationScalarFieldEnum | AdresseFacturationScalarFieldEnum[]
  }

  /**
   * adresseFacturation findFirstOrThrow
   */
  export type adresseFacturationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the adresseFacturation
     */
    select?: adresseFacturationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: adresseFacturationInclude<ExtArgs> | null
    /**
     * Filter, which adresseFacturation to fetch.
     */
    where?: adresseFacturationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of adresseFacturations to fetch.
     */
    orderBy?: adresseFacturationOrderByWithRelationInput | adresseFacturationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for adresseFacturations.
     */
    cursor?: adresseFacturationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` adresseFacturations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` adresseFacturations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of adresseFacturations.
     */
    distinct?: AdresseFacturationScalarFieldEnum | AdresseFacturationScalarFieldEnum[]
  }

  /**
   * adresseFacturation findMany
   */
  export type adresseFacturationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the adresseFacturation
     */
    select?: adresseFacturationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: adresseFacturationInclude<ExtArgs> | null
    /**
     * Filter, which adresseFacturations to fetch.
     */
    where?: adresseFacturationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of adresseFacturations to fetch.
     */
    orderBy?: adresseFacturationOrderByWithRelationInput | adresseFacturationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing adresseFacturations.
     */
    cursor?: adresseFacturationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` adresseFacturations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` adresseFacturations.
     */
    skip?: number
    distinct?: AdresseFacturationScalarFieldEnum | AdresseFacturationScalarFieldEnum[]
  }

  /**
   * adresseFacturation create
   */
  export type adresseFacturationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the adresseFacturation
     */
    select?: adresseFacturationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: adresseFacturationInclude<ExtArgs> | null
    /**
     * The data needed to create a adresseFacturation.
     */
    data: XOR<adresseFacturationCreateInput, adresseFacturationUncheckedCreateInput>
  }

  /**
   * adresseFacturation createMany
   */
  export type adresseFacturationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many adresseFacturations.
     */
    data: adresseFacturationCreateManyInput | adresseFacturationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * adresseFacturation createManyAndReturn
   */
  export type adresseFacturationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the adresseFacturation
     */
    select?: adresseFacturationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many adresseFacturations.
     */
    data: adresseFacturationCreateManyInput | adresseFacturationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: adresseFacturationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * adresseFacturation update
   */
  export type adresseFacturationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the adresseFacturation
     */
    select?: adresseFacturationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: adresseFacturationInclude<ExtArgs> | null
    /**
     * The data needed to update a adresseFacturation.
     */
    data: XOR<adresseFacturationUpdateInput, adresseFacturationUncheckedUpdateInput>
    /**
     * Choose, which adresseFacturation to update.
     */
    where: adresseFacturationWhereUniqueInput
  }

  /**
   * adresseFacturation updateMany
   */
  export type adresseFacturationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update adresseFacturations.
     */
    data: XOR<adresseFacturationUpdateManyMutationInput, adresseFacturationUncheckedUpdateManyInput>
    /**
     * Filter which adresseFacturations to update
     */
    where?: adresseFacturationWhereInput
  }

  /**
   * adresseFacturation upsert
   */
  export type adresseFacturationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the adresseFacturation
     */
    select?: adresseFacturationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: adresseFacturationInclude<ExtArgs> | null
    /**
     * The filter to search for the adresseFacturation to update in case it exists.
     */
    where: adresseFacturationWhereUniqueInput
    /**
     * In case the adresseFacturation found by the `where` argument doesn't exist, create a new adresseFacturation with this data.
     */
    create: XOR<adresseFacturationCreateInput, adresseFacturationUncheckedCreateInput>
    /**
     * In case the adresseFacturation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<adresseFacturationUpdateInput, adresseFacturationUncheckedUpdateInput>
  }

  /**
   * adresseFacturation delete
   */
  export type adresseFacturationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the adresseFacturation
     */
    select?: adresseFacturationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: adresseFacturationInclude<ExtArgs> | null
    /**
     * Filter which adresseFacturation to delete.
     */
    where: adresseFacturationWhereUniqueInput
  }

  /**
   * adresseFacturation deleteMany
   */
  export type adresseFacturationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which adresseFacturations to delete
     */
    where?: adresseFacturationWhereInput
  }

  /**
   * adresseFacturation without action
   */
  export type adresseFacturationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the adresseFacturation
     */
    select?: adresseFacturationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: adresseFacturationInclude<ExtArgs> | null
  }


  /**
   * Model engagement
   */

  export type AggregateEngagement = {
    _count: EngagementCountAggregateOutputType | null
    _avg: EngagementAvgAggregateOutputType | null
    _sum: EngagementSumAggregateOutputType | null
    _min: EngagementMinAggregateOutputType | null
    _max: EngagementMaxAggregateOutputType | null
  }

  export type EngagementAvgAggregateOutputType = {
    id: number | null
  }

  export type EngagementSumAggregateOutputType = {
    id: number | null
  }

  export type EngagementMinAggregateOutputType = {
    id: number | null
    nom: string | null
    createdAt: Date | null
    updatedAt: Date | null
    statutPartenaire: $Enums.statutPartenaire | null
    siteWeb: string | null
    adresse: string | null
    email: string | null
    phone: string | null
    facebook: string | null
    instagram: string | null
    twitter: string | null
    linkedin: string | null
    tikTok: string | null
    youtube: string | null
    duree: $Enums.duree | null
    description: string | null
  }

  export type EngagementMaxAggregateOutputType = {
    id: number | null
    nom: string | null
    createdAt: Date | null
    updatedAt: Date | null
    statutPartenaire: $Enums.statutPartenaire | null
    siteWeb: string | null
    adresse: string | null
    email: string | null
    phone: string | null
    facebook: string | null
    instagram: string | null
    twitter: string | null
    linkedin: string | null
    tikTok: string | null
    youtube: string | null
    duree: $Enums.duree | null
    description: string | null
  }

  export type EngagementCountAggregateOutputType = {
    id: number
    nom: number
    createdAt: number
    updatedAt: number
    statutPartenaire: number
    siteWeb: number
    adresse: number
    email: number
    phone: number
    facebook: number
    instagram: number
    twitter: number
    linkedin: number
    tikTok: number
    youtube: number
    duree: number
    description: number
    _all: number
  }


  export type EngagementAvgAggregateInputType = {
    id?: true
  }

  export type EngagementSumAggregateInputType = {
    id?: true
  }

  export type EngagementMinAggregateInputType = {
    id?: true
    nom?: true
    createdAt?: true
    updatedAt?: true
    statutPartenaire?: true
    siteWeb?: true
    adresse?: true
    email?: true
    phone?: true
    facebook?: true
    instagram?: true
    twitter?: true
    linkedin?: true
    tikTok?: true
    youtube?: true
    duree?: true
    description?: true
  }

  export type EngagementMaxAggregateInputType = {
    id?: true
    nom?: true
    createdAt?: true
    updatedAt?: true
    statutPartenaire?: true
    siteWeb?: true
    adresse?: true
    email?: true
    phone?: true
    facebook?: true
    instagram?: true
    twitter?: true
    linkedin?: true
    tikTok?: true
    youtube?: true
    duree?: true
    description?: true
  }

  export type EngagementCountAggregateInputType = {
    id?: true
    nom?: true
    createdAt?: true
    updatedAt?: true
    statutPartenaire?: true
    siteWeb?: true
    adresse?: true
    email?: true
    phone?: true
    facebook?: true
    instagram?: true
    twitter?: true
    linkedin?: true
    tikTok?: true
    youtube?: true
    duree?: true
    description?: true
    _all?: true
  }

  export type EngagementAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which engagement to aggregate.
     */
    where?: engagementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of engagements to fetch.
     */
    orderBy?: engagementOrderByWithRelationInput | engagementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: engagementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` engagements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` engagements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned engagements
    **/
    _count?: true | EngagementCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EngagementAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EngagementSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EngagementMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EngagementMaxAggregateInputType
  }

  export type GetEngagementAggregateType<T extends EngagementAggregateArgs> = {
        [P in keyof T & keyof AggregateEngagement]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEngagement[P]>
      : GetScalarType<T[P], AggregateEngagement[P]>
  }




  export type engagementGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: engagementWhereInput
    orderBy?: engagementOrderByWithAggregationInput | engagementOrderByWithAggregationInput[]
    by: EngagementScalarFieldEnum[] | EngagementScalarFieldEnum
    having?: engagementScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EngagementCountAggregateInputType | true
    _avg?: EngagementAvgAggregateInputType
    _sum?: EngagementSumAggregateInputType
    _min?: EngagementMinAggregateInputType
    _max?: EngagementMaxAggregateInputType
  }

  export type EngagementGroupByOutputType = {
    id: number
    nom: string
    createdAt: Date
    updatedAt: Date
    statutPartenaire: $Enums.statutPartenaire
    siteWeb: string | null
    adresse: string
    email: string
    phone: string
    facebook: string | null
    instagram: string | null
    twitter: string | null
    linkedin: string | null
    tikTok: string | null
    youtube: string | null
    duree: $Enums.duree
    description: string | null
    _count: EngagementCountAggregateOutputType | null
    _avg: EngagementAvgAggregateOutputType | null
    _sum: EngagementSumAggregateOutputType | null
    _min: EngagementMinAggregateOutputType | null
    _max: EngagementMaxAggregateOutputType | null
  }

  type GetEngagementGroupByPayload<T extends engagementGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EngagementGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EngagementGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EngagementGroupByOutputType[P]>
            : GetScalarType<T[P], EngagementGroupByOutputType[P]>
        }
      >
    >


  export type engagementSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    statutPartenaire?: boolean
    siteWeb?: boolean
    adresse?: boolean
    email?: boolean
    phone?: boolean
    facebook?: boolean
    instagram?: boolean
    twitter?: boolean
    linkedin?: boolean
    tikTok?: boolean
    youtube?: boolean
    duree?: boolean
    description?: boolean
    logo?: boolean | engagement$logoArgs<ExtArgs>
    contenuPartenaire?: boolean | engagement$contenuPartenaireArgs<ExtArgs>
    _count?: boolean | EngagementCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["engagement"]>

  export type engagementSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    statutPartenaire?: boolean
    siteWeb?: boolean
    adresse?: boolean
    email?: boolean
    phone?: boolean
    facebook?: boolean
    instagram?: boolean
    twitter?: boolean
    linkedin?: boolean
    tikTok?: boolean
    youtube?: boolean
    duree?: boolean
    description?: boolean
  }, ExtArgs["result"]["engagement"]>

  export type engagementSelectScalar = {
    id?: boolean
    nom?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    statutPartenaire?: boolean
    siteWeb?: boolean
    adresse?: boolean
    email?: boolean
    phone?: boolean
    facebook?: boolean
    instagram?: boolean
    twitter?: boolean
    linkedin?: boolean
    tikTok?: boolean
    youtube?: boolean
    duree?: boolean
    description?: boolean
  }

  export type engagementInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    logo?: boolean | engagement$logoArgs<ExtArgs>
    contenuPartenaire?: boolean | engagement$contenuPartenaireArgs<ExtArgs>
    _count?: boolean | EngagementCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type engagementIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $engagementPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "engagement"
    objects: {
      logo: Prisma.$logoPayload<ExtArgs>[]
      contenuPartenaire: Prisma.$contenuPartenairePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nom: string
      createdAt: Date
      updatedAt: Date
      statutPartenaire: $Enums.statutPartenaire
      siteWeb: string | null
      adresse: string
      email: string
      phone: string
      facebook: string | null
      instagram: string | null
      twitter: string | null
      linkedin: string | null
      tikTok: string | null
      youtube: string | null
      duree: $Enums.duree
      description: string | null
    }, ExtArgs["result"]["engagement"]>
    composites: {}
  }

  type engagementGetPayload<S extends boolean | null | undefined | engagementDefaultArgs> = $Result.GetResult<Prisma.$engagementPayload, S>

  type engagementCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<engagementFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EngagementCountAggregateInputType | true
    }

  export interface engagementDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['engagement'], meta: { name: 'engagement' } }
    /**
     * Find zero or one Engagement that matches the filter.
     * @param {engagementFindUniqueArgs} args - Arguments to find a Engagement
     * @example
     * // Get one Engagement
     * const engagement = await prisma.engagement.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends engagementFindUniqueArgs>(args: SelectSubset<T, engagementFindUniqueArgs<ExtArgs>>): Prisma__engagementClient<$Result.GetResult<Prisma.$engagementPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Engagement that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {engagementFindUniqueOrThrowArgs} args - Arguments to find a Engagement
     * @example
     * // Get one Engagement
     * const engagement = await prisma.engagement.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends engagementFindUniqueOrThrowArgs>(args: SelectSubset<T, engagementFindUniqueOrThrowArgs<ExtArgs>>): Prisma__engagementClient<$Result.GetResult<Prisma.$engagementPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Engagement that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {engagementFindFirstArgs} args - Arguments to find a Engagement
     * @example
     * // Get one Engagement
     * const engagement = await prisma.engagement.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends engagementFindFirstArgs>(args?: SelectSubset<T, engagementFindFirstArgs<ExtArgs>>): Prisma__engagementClient<$Result.GetResult<Prisma.$engagementPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Engagement that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {engagementFindFirstOrThrowArgs} args - Arguments to find a Engagement
     * @example
     * // Get one Engagement
     * const engagement = await prisma.engagement.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends engagementFindFirstOrThrowArgs>(args?: SelectSubset<T, engagementFindFirstOrThrowArgs<ExtArgs>>): Prisma__engagementClient<$Result.GetResult<Prisma.$engagementPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Engagements that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {engagementFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Engagements
     * const engagements = await prisma.engagement.findMany()
     * 
     * // Get first 10 Engagements
     * const engagements = await prisma.engagement.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const engagementWithIdOnly = await prisma.engagement.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends engagementFindManyArgs>(args?: SelectSubset<T, engagementFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$engagementPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Engagement.
     * @param {engagementCreateArgs} args - Arguments to create a Engagement.
     * @example
     * // Create one Engagement
     * const Engagement = await prisma.engagement.create({
     *   data: {
     *     // ... data to create a Engagement
     *   }
     * })
     * 
     */
    create<T extends engagementCreateArgs>(args: SelectSubset<T, engagementCreateArgs<ExtArgs>>): Prisma__engagementClient<$Result.GetResult<Prisma.$engagementPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Engagements.
     * @param {engagementCreateManyArgs} args - Arguments to create many Engagements.
     * @example
     * // Create many Engagements
     * const engagement = await prisma.engagement.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends engagementCreateManyArgs>(args?: SelectSubset<T, engagementCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Engagements and returns the data saved in the database.
     * @param {engagementCreateManyAndReturnArgs} args - Arguments to create many Engagements.
     * @example
     * // Create many Engagements
     * const engagement = await prisma.engagement.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Engagements and only return the `id`
     * const engagementWithIdOnly = await prisma.engagement.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends engagementCreateManyAndReturnArgs>(args?: SelectSubset<T, engagementCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$engagementPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Engagement.
     * @param {engagementDeleteArgs} args - Arguments to delete one Engagement.
     * @example
     * // Delete one Engagement
     * const Engagement = await prisma.engagement.delete({
     *   where: {
     *     // ... filter to delete one Engagement
     *   }
     * })
     * 
     */
    delete<T extends engagementDeleteArgs>(args: SelectSubset<T, engagementDeleteArgs<ExtArgs>>): Prisma__engagementClient<$Result.GetResult<Prisma.$engagementPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Engagement.
     * @param {engagementUpdateArgs} args - Arguments to update one Engagement.
     * @example
     * // Update one Engagement
     * const engagement = await prisma.engagement.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends engagementUpdateArgs>(args: SelectSubset<T, engagementUpdateArgs<ExtArgs>>): Prisma__engagementClient<$Result.GetResult<Prisma.$engagementPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Engagements.
     * @param {engagementDeleteManyArgs} args - Arguments to filter Engagements to delete.
     * @example
     * // Delete a few Engagements
     * const { count } = await prisma.engagement.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends engagementDeleteManyArgs>(args?: SelectSubset<T, engagementDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Engagements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {engagementUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Engagements
     * const engagement = await prisma.engagement.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends engagementUpdateManyArgs>(args: SelectSubset<T, engagementUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Engagement.
     * @param {engagementUpsertArgs} args - Arguments to update or create a Engagement.
     * @example
     * // Update or create a Engagement
     * const engagement = await prisma.engagement.upsert({
     *   create: {
     *     // ... data to create a Engagement
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Engagement we want to update
     *   }
     * })
     */
    upsert<T extends engagementUpsertArgs>(args: SelectSubset<T, engagementUpsertArgs<ExtArgs>>): Prisma__engagementClient<$Result.GetResult<Prisma.$engagementPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Engagements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {engagementCountArgs} args - Arguments to filter Engagements to count.
     * @example
     * // Count the number of Engagements
     * const count = await prisma.engagement.count({
     *   where: {
     *     // ... the filter for the Engagements we want to count
     *   }
     * })
    **/
    count<T extends engagementCountArgs>(
      args?: Subset<T, engagementCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EngagementCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Engagement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EngagementAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EngagementAggregateArgs>(args: Subset<T, EngagementAggregateArgs>): Prisma.PrismaPromise<GetEngagementAggregateType<T>>

    /**
     * Group by Engagement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {engagementGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends engagementGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: engagementGroupByArgs['orderBy'] }
        : { orderBy?: engagementGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, engagementGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEngagementGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the engagement model
   */
  readonly fields: engagementFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for engagement.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__engagementClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    logo<T extends engagement$logoArgs<ExtArgs> = {}>(args?: Subset<T, engagement$logoArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$logoPayload<ExtArgs>, T, "findMany"> | Null>
    contenuPartenaire<T extends engagement$contenuPartenaireArgs<ExtArgs> = {}>(args?: Subset<T, engagement$contenuPartenaireArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$contenuPartenairePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the engagement model
   */ 
  interface engagementFieldRefs {
    readonly id: FieldRef<"engagement", 'Int'>
    readonly nom: FieldRef<"engagement", 'String'>
    readonly createdAt: FieldRef<"engagement", 'DateTime'>
    readonly updatedAt: FieldRef<"engagement", 'DateTime'>
    readonly statutPartenaire: FieldRef<"engagement", 'statutPartenaire'>
    readonly siteWeb: FieldRef<"engagement", 'String'>
    readonly adresse: FieldRef<"engagement", 'String'>
    readonly email: FieldRef<"engagement", 'String'>
    readonly phone: FieldRef<"engagement", 'String'>
    readonly facebook: FieldRef<"engagement", 'String'>
    readonly instagram: FieldRef<"engagement", 'String'>
    readonly twitter: FieldRef<"engagement", 'String'>
    readonly linkedin: FieldRef<"engagement", 'String'>
    readonly tikTok: FieldRef<"engagement", 'String'>
    readonly youtube: FieldRef<"engagement", 'String'>
    readonly duree: FieldRef<"engagement", 'duree'>
    readonly description: FieldRef<"engagement", 'String'>
  }
    

  // Custom InputTypes
  /**
   * engagement findUnique
   */
  export type engagementFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the engagement
     */
    select?: engagementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: engagementInclude<ExtArgs> | null
    /**
     * Filter, which engagement to fetch.
     */
    where: engagementWhereUniqueInput
  }

  /**
   * engagement findUniqueOrThrow
   */
  export type engagementFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the engagement
     */
    select?: engagementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: engagementInclude<ExtArgs> | null
    /**
     * Filter, which engagement to fetch.
     */
    where: engagementWhereUniqueInput
  }

  /**
   * engagement findFirst
   */
  export type engagementFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the engagement
     */
    select?: engagementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: engagementInclude<ExtArgs> | null
    /**
     * Filter, which engagement to fetch.
     */
    where?: engagementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of engagements to fetch.
     */
    orderBy?: engagementOrderByWithRelationInput | engagementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for engagements.
     */
    cursor?: engagementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` engagements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` engagements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of engagements.
     */
    distinct?: EngagementScalarFieldEnum | EngagementScalarFieldEnum[]
  }

  /**
   * engagement findFirstOrThrow
   */
  export type engagementFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the engagement
     */
    select?: engagementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: engagementInclude<ExtArgs> | null
    /**
     * Filter, which engagement to fetch.
     */
    where?: engagementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of engagements to fetch.
     */
    orderBy?: engagementOrderByWithRelationInput | engagementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for engagements.
     */
    cursor?: engagementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` engagements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` engagements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of engagements.
     */
    distinct?: EngagementScalarFieldEnum | EngagementScalarFieldEnum[]
  }

  /**
   * engagement findMany
   */
  export type engagementFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the engagement
     */
    select?: engagementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: engagementInclude<ExtArgs> | null
    /**
     * Filter, which engagements to fetch.
     */
    where?: engagementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of engagements to fetch.
     */
    orderBy?: engagementOrderByWithRelationInput | engagementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing engagements.
     */
    cursor?: engagementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` engagements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` engagements.
     */
    skip?: number
    distinct?: EngagementScalarFieldEnum | EngagementScalarFieldEnum[]
  }

  /**
   * engagement create
   */
  export type engagementCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the engagement
     */
    select?: engagementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: engagementInclude<ExtArgs> | null
    /**
     * The data needed to create a engagement.
     */
    data: XOR<engagementCreateInput, engagementUncheckedCreateInput>
  }

  /**
   * engagement createMany
   */
  export type engagementCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many engagements.
     */
    data: engagementCreateManyInput | engagementCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * engagement createManyAndReturn
   */
  export type engagementCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the engagement
     */
    select?: engagementSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many engagements.
     */
    data: engagementCreateManyInput | engagementCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * engagement update
   */
  export type engagementUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the engagement
     */
    select?: engagementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: engagementInclude<ExtArgs> | null
    /**
     * The data needed to update a engagement.
     */
    data: XOR<engagementUpdateInput, engagementUncheckedUpdateInput>
    /**
     * Choose, which engagement to update.
     */
    where: engagementWhereUniqueInput
  }

  /**
   * engagement updateMany
   */
  export type engagementUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update engagements.
     */
    data: XOR<engagementUpdateManyMutationInput, engagementUncheckedUpdateManyInput>
    /**
     * Filter which engagements to update
     */
    where?: engagementWhereInput
  }

  /**
   * engagement upsert
   */
  export type engagementUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the engagement
     */
    select?: engagementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: engagementInclude<ExtArgs> | null
    /**
     * The filter to search for the engagement to update in case it exists.
     */
    where: engagementWhereUniqueInput
    /**
     * In case the engagement found by the `where` argument doesn't exist, create a new engagement with this data.
     */
    create: XOR<engagementCreateInput, engagementUncheckedCreateInput>
    /**
     * In case the engagement was found with the provided `where` argument, update it with this data.
     */
    update: XOR<engagementUpdateInput, engagementUncheckedUpdateInput>
  }

  /**
   * engagement delete
   */
  export type engagementDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the engagement
     */
    select?: engagementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: engagementInclude<ExtArgs> | null
    /**
     * Filter which engagement to delete.
     */
    where: engagementWhereUniqueInput
  }

  /**
   * engagement deleteMany
   */
  export type engagementDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which engagements to delete
     */
    where?: engagementWhereInput
  }

  /**
   * engagement.logo
   */
  export type engagement$logoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the logo
     */
    select?: logoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: logoInclude<ExtArgs> | null
    where?: logoWhereInput
    orderBy?: logoOrderByWithRelationInput | logoOrderByWithRelationInput[]
    cursor?: logoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LogoScalarFieldEnum | LogoScalarFieldEnum[]
  }

  /**
   * engagement.contenuPartenaire
   */
  export type engagement$contenuPartenaireArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contenuPartenaire
     */
    select?: contenuPartenaireSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contenuPartenaireInclude<ExtArgs> | null
    where?: contenuPartenaireWhereInput
    orderBy?: contenuPartenaireOrderByWithRelationInput | contenuPartenaireOrderByWithRelationInput[]
    cursor?: contenuPartenaireWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContenuPartenaireScalarFieldEnum | ContenuPartenaireScalarFieldEnum[]
  }

  /**
   * engagement without action
   */
  export type engagementDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the engagement
     */
    select?: engagementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: engagementInclude<ExtArgs> | null
  }


  /**
   * Model contenuPartenaire
   */

  export type AggregateContenuPartenaire = {
    _count: ContenuPartenaireCountAggregateOutputType | null
    _avg: ContenuPartenaireAvgAggregateOutputType | null
    _sum: ContenuPartenaireSumAggregateOutputType | null
    _min: ContenuPartenaireMinAggregateOutputType | null
    _max: ContenuPartenaireMaxAggregateOutputType | null
  }

  export type ContenuPartenaireAvgAggregateOutputType = {
    id: number | null
    engagementId: number | null
  }

  export type ContenuPartenaireSumAggregateOutputType = {
    id: number | null
    engagementId: number | null
  }

  export type ContenuPartenaireMinAggregateOutputType = {
    id: number | null
    path: string | null
    engagementId: number | null
  }

  export type ContenuPartenaireMaxAggregateOutputType = {
    id: number | null
    path: string | null
    engagementId: number | null
  }

  export type ContenuPartenaireCountAggregateOutputType = {
    id: number
    path: number
    engagementId: number
    _all: number
  }


  export type ContenuPartenaireAvgAggregateInputType = {
    id?: true
    engagementId?: true
  }

  export type ContenuPartenaireSumAggregateInputType = {
    id?: true
    engagementId?: true
  }

  export type ContenuPartenaireMinAggregateInputType = {
    id?: true
    path?: true
    engagementId?: true
  }

  export type ContenuPartenaireMaxAggregateInputType = {
    id?: true
    path?: true
    engagementId?: true
  }

  export type ContenuPartenaireCountAggregateInputType = {
    id?: true
    path?: true
    engagementId?: true
    _all?: true
  }

  export type ContenuPartenaireAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which contenuPartenaire to aggregate.
     */
    where?: contenuPartenaireWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of contenuPartenaires to fetch.
     */
    orderBy?: contenuPartenaireOrderByWithRelationInput | contenuPartenaireOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: contenuPartenaireWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` contenuPartenaires from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` contenuPartenaires.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned contenuPartenaires
    **/
    _count?: true | ContenuPartenaireCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ContenuPartenaireAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ContenuPartenaireSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContenuPartenaireMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContenuPartenaireMaxAggregateInputType
  }

  export type GetContenuPartenaireAggregateType<T extends ContenuPartenaireAggregateArgs> = {
        [P in keyof T & keyof AggregateContenuPartenaire]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContenuPartenaire[P]>
      : GetScalarType<T[P], AggregateContenuPartenaire[P]>
  }




  export type contenuPartenaireGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: contenuPartenaireWhereInput
    orderBy?: contenuPartenaireOrderByWithAggregationInput | contenuPartenaireOrderByWithAggregationInput[]
    by: ContenuPartenaireScalarFieldEnum[] | ContenuPartenaireScalarFieldEnum
    having?: contenuPartenaireScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContenuPartenaireCountAggregateInputType | true
    _avg?: ContenuPartenaireAvgAggregateInputType
    _sum?: ContenuPartenaireSumAggregateInputType
    _min?: ContenuPartenaireMinAggregateInputType
    _max?: ContenuPartenaireMaxAggregateInputType
  }

  export type ContenuPartenaireGroupByOutputType = {
    id: number
    path: string
    engagementId: number
    _count: ContenuPartenaireCountAggregateOutputType | null
    _avg: ContenuPartenaireAvgAggregateOutputType | null
    _sum: ContenuPartenaireSumAggregateOutputType | null
    _min: ContenuPartenaireMinAggregateOutputType | null
    _max: ContenuPartenaireMaxAggregateOutputType | null
  }

  type GetContenuPartenaireGroupByPayload<T extends contenuPartenaireGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContenuPartenaireGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContenuPartenaireGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContenuPartenaireGroupByOutputType[P]>
            : GetScalarType<T[P], ContenuPartenaireGroupByOutputType[P]>
        }
      >
    >


  export type contenuPartenaireSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    path?: boolean
    engagementId?: boolean
    engagement?: boolean | engagementDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contenuPartenaire"]>

  export type contenuPartenaireSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    path?: boolean
    engagementId?: boolean
    engagement?: boolean | engagementDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contenuPartenaire"]>

  export type contenuPartenaireSelectScalar = {
    id?: boolean
    path?: boolean
    engagementId?: boolean
  }

  export type contenuPartenaireInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    engagement?: boolean | engagementDefaultArgs<ExtArgs>
  }
  export type contenuPartenaireIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    engagement?: boolean | engagementDefaultArgs<ExtArgs>
  }

  export type $contenuPartenairePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "contenuPartenaire"
    objects: {
      engagement: Prisma.$engagementPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      path: string
      engagementId: number
    }, ExtArgs["result"]["contenuPartenaire"]>
    composites: {}
  }

  type contenuPartenaireGetPayload<S extends boolean | null | undefined | contenuPartenaireDefaultArgs> = $Result.GetResult<Prisma.$contenuPartenairePayload, S>

  type contenuPartenaireCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<contenuPartenaireFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ContenuPartenaireCountAggregateInputType | true
    }

  export interface contenuPartenaireDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['contenuPartenaire'], meta: { name: 'contenuPartenaire' } }
    /**
     * Find zero or one ContenuPartenaire that matches the filter.
     * @param {contenuPartenaireFindUniqueArgs} args - Arguments to find a ContenuPartenaire
     * @example
     * // Get one ContenuPartenaire
     * const contenuPartenaire = await prisma.contenuPartenaire.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends contenuPartenaireFindUniqueArgs>(args: SelectSubset<T, contenuPartenaireFindUniqueArgs<ExtArgs>>): Prisma__contenuPartenaireClient<$Result.GetResult<Prisma.$contenuPartenairePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ContenuPartenaire that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {contenuPartenaireFindUniqueOrThrowArgs} args - Arguments to find a ContenuPartenaire
     * @example
     * // Get one ContenuPartenaire
     * const contenuPartenaire = await prisma.contenuPartenaire.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends contenuPartenaireFindUniqueOrThrowArgs>(args: SelectSubset<T, contenuPartenaireFindUniqueOrThrowArgs<ExtArgs>>): Prisma__contenuPartenaireClient<$Result.GetResult<Prisma.$contenuPartenairePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ContenuPartenaire that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {contenuPartenaireFindFirstArgs} args - Arguments to find a ContenuPartenaire
     * @example
     * // Get one ContenuPartenaire
     * const contenuPartenaire = await prisma.contenuPartenaire.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends contenuPartenaireFindFirstArgs>(args?: SelectSubset<T, contenuPartenaireFindFirstArgs<ExtArgs>>): Prisma__contenuPartenaireClient<$Result.GetResult<Prisma.$contenuPartenairePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ContenuPartenaire that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {contenuPartenaireFindFirstOrThrowArgs} args - Arguments to find a ContenuPartenaire
     * @example
     * // Get one ContenuPartenaire
     * const contenuPartenaire = await prisma.contenuPartenaire.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends contenuPartenaireFindFirstOrThrowArgs>(args?: SelectSubset<T, contenuPartenaireFindFirstOrThrowArgs<ExtArgs>>): Prisma__contenuPartenaireClient<$Result.GetResult<Prisma.$contenuPartenairePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ContenuPartenaires that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {contenuPartenaireFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ContenuPartenaires
     * const contenuPartenaires = await prisma.contenuPartenaire.findMany()
     * 
     * // Get first 10 ContenuPartenaires
     * const contenuPartenaires = await prisma.contenuPartenaire.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contenuPartenaireWithIdOnly = await prisma.contenuPartenaire.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends contenuPartenaireFindManyArgs>(args?: SelectSubset<T, contenuPartenaireFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$contenuPartenairePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ContenuPartenaire.
     * @param {contenuPartenaireCreateArgs} args - Arguments to create a ContenuPartenaire.
     * @example
     * // Create one ContenuPartenaire
     * const ContenuPartenaire = await prisma.contenuPartenaire.create({
     *   data: {
     *     // ... data to create a ContenuPartenaire
     *   }
     * })
     * 
     */
    create<T extends contenuPartenaireCreateArgs>(args: SelectSubset<T, contenuPartenaireCreateArgs<ExtArgs>>): Prisma__contenuPartenaireClient<$Result.GetResult<Prisma.$contenuPartenairePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ContenuPartenaires.
     * @param {contenuPartenaireCreateManyArgs} args - Arguments to create many ContenuPartenaires.
     * @example
     * // Create many ContenuPartenaires
     * const contenuPartenaire = await prisma.contenuPartenaire.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends contenuPartenaireCreateManyArgs>(args?: SelectSubset<T, contenuPartenaireCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ContenuPartenaires and returns the data saved in the database.
     * @param {contenuPartenaireCreateManyAndReturnArgs} args - Arguments to create many ContenuPartenaires.
     * @example
     * // Create many ContenuPartenaires
     * const contenuPartenaire = await prisma.contenuPartenaire.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ContenuPartenaires and only return the `id`
     * const contenuPartenaireWithIdOnly = await prisma.contenuPartenaire.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends contenuPartenaireCreateManyAndReturnArgs>(args?: SelectSubset<T, contenuPartenaireCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$contenuPartenairePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ContenuPartenaire.
     * @param {contenuPartenaireDeleteArgs} args - Arguments to delete one ContenuPartenaire.
     * @example
     * // Delete one ContenuPartenaire
     * const ContenuPartenaire = await prisma.contenuPartenaire.delete({
     *   where: {
     *     // ... filter to delete one ContenuPartenaire
     *   }
     * })
     * 
     */
    delete<T extends contenuPartenaireDeleteArgs>(args: SelectSubset<T, contenuPartenaireDeleteArgs<ExtArgs>>): Prisma__contenuPartenaireClient<$Result.GetResult<Prisma.$contenuPartenairePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ContenuPartenaire.
     * @param {contenuPartenaireUpdateArgs} args - Arguments to update one ContenuPartenaire.
     * @example
     * // Update one ContenuPartenaire
     * const contenuPartenaire = await prisma.contenuPartenaire.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends contenuPartenaireUpdateArgs>(args: SelectSubset<T, contenuPartenaireUpdateArgs<ExtArgs>>): Prisma__contenuPartenaireClient<$Result.GetResult<Prisma.$contenuPartenairePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ContenuPartenaires.
     * @param {contenuPartenaireDeleteManyArgs} args - Arguments to filter ContenuPartenaires to delete.
     * @example
     * // Delete a few ContenuPartenaires
     * const { count } = await prisma.contenuPartenaire.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends contenuPartenaireDeleteManyArgs>(args?: SelectSubset<T, contenuPartenaireDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ContenuPartenaires.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {contenuPartenaireUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ContenuPartenaires
     * const contenuPartenaire = await prisma.contenuPartenaire.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends contenuPartenaireUpdateManyArgs>(args: SelectSubset<T, contenuPartenaireUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ContenuPartenaire.
     * @param {contenuPartenaireUpsertArgs} args - Arguments to update or create a ContenuPartenaire.
     * @example
     * // Update or create a ContenuPartenaire
     * const contenuPartenaire = await prisma.contenuPartenaire.upsert({
     *   create: {
     *     // ... data to create a ContenuPartenaire
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ContenuPartenaire we want to update
     *   }
     * })
     */
    upsert<T extends contenuPartenaireUpsertArgs>(args: SelectSubset<T, contenuPartenaireUpsertArgs<ExtArgs>>): Prisma__contenuPartenaireClient<$Result.GetResult<Prisma.$contenuPartenairePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ContenuPartenaires.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {contenuPartenaireCountArgs} args - Arguments to filter ContenuPartenaires to count.
     * @example
     * // Count the number of ContenuPartenaires
     * const count = await prisma.contenuPartenaire.count({
     *   where: {
     *     // ... the filter for the ContenuPartenaires we want to count
     *   }
     * })
    **/
    count<T extends contenuPartenaireCountArgs>(
      args?: Subset<T, contenuPartenaireCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContenuPartenaireCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ContenuPartenaire.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContenuPartenaireAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContenuPartenaireAggregateArgs>(args: Subset<T, ContenuPartenaireAggregateArgs>): Prisma.PrismaPromise<GetContenuPartenaireAggregateType<T>>

    /**
     * Group by ContenuPartenaire.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {contenuPartenaireGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends contenuPartenaireGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: contenuPartenaireGroupByArgs['orderBy'] }
        : { orderBy?: contenuPartenaireGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, contenuPartenaireGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContenuPartenaireGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the contenuPartenaire model
   */
  readonly fields: contenuPartenaireFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for contenuPartenaire.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__contenuPartenaireClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    engagement<T extends engagementDefaultArgs<ExtArgs> = {}>(args?: Subset<T, engagementDefaultArgs<ExtArgs>>): Prisma__engagementClient<$Result.GetResult<Prisma.$engagementPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the contenuPartenaire model
   */ 
  interface contenuPartenaireFieldRefs {
    readonly id: FieldRef<"contenuPartenaire", 'Int'>
    readonly path: FieldRef<"contenuPartenaire", 'String'>
    readonly engagementId: FieldRef<"contenuPartenaire", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * contenuPartenaire findUnique
   */
  export type contenuPartenaireFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contenuPartenaire
     */
    select?: contenuPartenaireSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contenuPartenaireInclude<ExtArgs> | null
    /**
     * Filter, which contenuPartenaire to fetch.
     */
    where: contenuPartenaireWhereUniqueInput
  }

  /**
   * contenuPartenaire findUniqueOrThrow
   */
  export type contenuPartenaireFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contenuPartenaire
     */
    select?: contenuPartenaireSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contenuPartenaireInclude<ExtArgs> | null
    /**
     * Filter, which contenuPartenaire to fetch.
     */
    where: contenuPartenaireWhereUniqueInput
  }

  /**
   * contenuPartenaire findFirst
   */
  export type contenuPartenaireFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contenuPartenaire
     */
    select?: contenuPartenaireSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contenuPartenaireInclude<ExtArgs> | null
    /**
     * Filter, which contenuPartenaire to fetch.
     */
    where?: contenuPartenaireWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of contenuPartenaires to fetch.
     */
    orderBy?: contenuPartenaireOrderByWithRelationInput | contenuPartenaireOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for contenuPartenaires.
     */
    cursor?: contenuPartenaireWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` contenuPartenaires from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` contenuPartenaires.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of contenuPartenaires.
     */
    distinct?: ContenuPartenaireScalarFieldEnum | ContenuPartenaireScalarFieldEnum[]
  }

  /**
   * contenuPartenaire findFirstOrThrow
   */
  export type contenuPartenaireFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contenuPartenaire
     */
    select?: contenuPartenaireSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contenuPartenaireInclude<ExtArgs> | null
    /**
     * Filter, which contenuPartenaire to fetch.
     */
    where?: contenuPartenaireWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of contenuPartenaires to fetch.
     */
    orderBy?: contenuPartenaireOrderByWithRelationInput | contenuPartenaireOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for contenuPartenaires.
     */
    cursor?: contenuPartenaireWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` contenuPartenaires from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` contenuPartenaires.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of contenuPartenaires.
     */
    distinct?: ContenuPartenaireScalarFieldEnum | ContenuPartenaireScalarFieldEnum[]
  }

  /**
   * contenuPartenaire findMany
   */
  export type contenuPartenaireFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contenuPartenaire
     */
    select?: contenuPartenaireSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contenuPartenaireInclude<ExtArgs> | null
    /**
     * Filter, which contenuPartenaires to fetch.
     */
    where?: contenuPartenaireWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of contenuPartenaires to fetch.
     */
    orderBy?: contenuPartenaireOrderByWithRelationInput | contenuPartenaireOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing contenuPartenaires.
     */
    cursor?: contenuPartenaireWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` contenuPartenaires from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` contenuPartenaires.
     */
    skip?: number
    distinct?: ContenuPartenaireScalarFieldEnum | ContenuPartenaireScalarFieldEnum[]
  }

  /**
   * contenuPartenaire create
   */
  export type contenuPartenaireCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contenuPartenaire
     */
    select?: contenuPartenaireSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contenuPartenaireInclude<ExtArgs> | null
    /**
     * The data needed to create a contenuPartenaire.
     */
    data: XOR<contenuPartenaireCreateInput, contenuPartenaireUncheckedCreateInput>
  }

  /**
   * contenuPartenaire createMany
   */
  export type contenuPartenaireCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many contenuPartenaires.
     */
    data: contenuPartenaireCreateManyInput | contenuPartenaireCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * contenuPartenaire createManyAndReturn
   */
  export type contenuPartenaireCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contenuPartenaire
     */
    select?: contenuPartenaireSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many contenuPartenaires.
     */
    data: contenuPartenaireCreateManyInput | contenuPartenaireCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contenuPartenaireIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * contenuPartenaire update
   */
  export type contenuPartenaireUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contenuPartenaire
     */
    select?: contenuPartenaireSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contenuPartenaireInclude<ExtArgs> | null
    /**
     * The data needed to update a contenuPartenaire.
     */
    data: XOR<contenuPartenaireUpdateInput, contenuPartenaireUncheckedUpdateInput>
    /**
     * Choose, which contenuPartenaire to update.
     */
    where: contenuPartenaireWhereUniqueInput
  }

  /**
   * contenuPartenaire updateMany
   */
  export type contenuPartenaireUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update contenuPartenaires.
     */
    data: XOR<contenuPartenaireUpdateManyMutationInput, contenuPartenaireUncheckedUpdateManyInput>
    /**
     * Filter which contenuPartenaires to update
     */
    where?: contenuPartenaireWhereInput
  }

  /**
   * contenuPartenaire upsert
   */
  export type contenuPartenaireUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contenuPartenaire
     */
    select?: contenuPartenaireSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contenuPartenaireInclude<ExtArgs> | null
    /**
     * The filter to search for the contenuPartenaire to update in case it exists.
     */
    where: contenuPartenaireWhereUniqueInput
    /**
     * In case the contenuPartenaire found by the `where` argument doesn't exist, create a new contenuPartenaire with this data.
     */
    create: XOR<contenuPartenaireCreateInput, contenuPartenaireUncheckedCreateInput>
    /**
     * In case the contenuPartenaire was found with the provided `where` argument, update it with this data.
     */
    update: XOR<contenuPartenaireUpdateInput, contenuPartenaireUncheckedUpdateInput>
  }

  /**
   * contenuPartenaire delete
   */
  export type contenuPartenaireDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contenuPartenaire
     */
    select?: contenuPartenaireSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contenuPartenaireInclude<ExtArgs> | null
    /**
     * Filter which contenuPartenaire to delete.
     */
    where: contenuPartenaireWhereUniqueInput
  }

  /**
   * contenuPartenaire deleteMany
   */
  export type contenuPartenaireDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which contenuPartenaires to delete
     */
    where?: contenuPartenaireWhereInput
  }

  /**
   * contenuPartenaire without action
   */
  export type contenuPartenaireDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contenuPartenaire
     */
    select?: contenuPartenaireSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contenuPartenaireInclude<ExtArgs> | null
  }


  /**
   * Model logo
   */

  export type AggregateLogo = {
    _count: LogoCountAggregateOutputType | null
    _avg: LogoAvgAggregateOutputType | null
    _sum: LogoSumAggregateOutputType | null
    _min: LogoMinAggregateOutputType | null
    _max: LogoMaxAggregateOutputType | null
  }

  export type LogoAvgAggregateOutputType = {
    id: number | null
    engagementId: number | null
  }

  export type LogoSumAggregateOutputType = {
    id: number | null
    engagementId: number | null
  }

  export type LogoMinAggregateOutputType = {
    id: number | null
    path: string | null
    engagementId: number | null
  }

  export type LogoMaxAggregateOutputType = {
    id: number | null
    path: string | null
    engagementId: number | null
  }

  export type LogoCountAggregateOutputType = {
    id: number
    path: number
    engagementId: number
    _all: number
  }


  export type LogoAvgAggregateInputType = {
    id?: true
    engagementId?: true
  }

  export type LogoSumAggregateInputType = {
    id?: true
    engagementId?: true
  }

  export type LogoMinAggregateInputType = {
    id?: true
    path?: true
    engagementId?: true
  }

  export type LogoMaxAggregateInputType = {
    id?: true
    path?: true
    engagementId?: true
  }

  export type LogoCountAggregateInputType = {
    id?: true
    path?: true
    engagementId?: true
    _all?: true
  }

  export type LogoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which logo to aggregate.
     */
    where?: logoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of logos to fetch.
     */
    orderBy?: logoOrderByWithRelationInput | logoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: logoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` logos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` logos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned logos
    **/
    _count?: true | LogoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LogoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LogoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LogoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LogoMaxAggregateInputType
  }

  export type GetLogoAggregateType<T extends LogoAggregateArgs> = {
        [P in keyof T & keyof AggregateLogo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLogo[P]>
      : GetScalarType<T[P], AggregateLogo[P]>
  }




  export type logoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: logoWhereInput
    orderBy?: logoOrderByWithAggregationInput | logoOrderByWithAggregationInput[]
    by: LogoScalarFieldEnum[] | LogoScalarFieldEnum
    having?: logoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LogoCountAggregateInputType | true
    _avg?: LogoAvgAggregateInputType
    _sum?: LogoSumAggregateInputType
    _min?: LogoMinAggregateInputType
    _max?: LogoMaxAggregateInputType
  }

  export type LogoGroupByOutputType = {
    id: number
    path: string
    engagementId: number
    _count: LogoCountAggregateOutputType | null
    _avg: LogoAvgAggregateOutputType | null
    _sum: LogoSumAggregateOutputType | null
    _min: LogoMinAggregateOutputType | null
    _max: LogoMaxAggregateOutputType | null
  }

  type GetLogoGroupByPayload<T extends logoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LogoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LogoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LogoGroupByOutputType[P]>
            : GetScalarType<T[P], LogoGroupByOutputType[P]>
        }
      >
    >


  export type logoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    path?: boolean
    engagementId?: boolean
    engagement?: boolean | engagementDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["logo"]>

  export type logoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    path?: boolean
    engagementId?: boolean
    engagement?: boolean | engagementDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["logo"]>

  export type logoSelectScalar = {
    id?: boolean
    path?: boolean
    engagementId?: boolean
  }

  export type logoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    engagement?: boolean | engagementDefaultArgs<ExtArgs>
  }
  export type logoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    engagement?: boolean | engagementDefaultArgs<ExtArgs>
  }

  export type $logoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "logo"
    objects: {
      engagement: Prisma.$engagementPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      path: string
      engagementId: number
    }, ExtArgs["result"]["logo"]>
    composites: {}
  }

  type logoGetPayload<S extends boolean | null | undefined | logoDefaultArgs> = $Result.GetResult<Prisma.$logoPayload, S>

  type logoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<logoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LogoCountAggregateInputType | true
    }

  export interface logoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['logo'], meta: { name: 'logo' } }
    /**
     * Find zero or one Logo that matches the filter.
     * @param {logoFindUniqueArgs} args - Arguments to find a Logo
     * @example
     * // Get one Logo
     * const logo = await prisma.logo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends logoFindUniqueArgs>(args: SelectSubset<T, logoFindUniqueArgs<ExtArgs>>): Prisma__logoClient<$Result.GetResult<Prisma.$logoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Logo that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {logoFindUniqueOrThrowArgs} args - Arguments to find a Logo
     * @example
     * // Get one Logo
     * const logo = await prisma.logo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends logoFindUniqueOrThrowArgs>(args: SelectSubset<T, logoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__logoClient<$Result.GetResult<Prisma.$logoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Logo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {logoFindFirstArgs} args - Arguments to find a Logo
     * @example
     * // Get one Logo
     * const logo = await prisma.logo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends logoFindFirstArgs>(args?: SelectSubset<T, logoFindFirstArgs<ExtArgs>>): Prisma__logoClient<$Result.GetResult<Prisma.$logoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Logo that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {logoFindFirstOrThrowArgs} args - Arguments to find a Logo
     * @example
     * // Get one Logo
     * const logo = await prisma.logo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends logoFindFirstOrThrowArgs>(args?: SelectSubset<T, logoFindFirstOrThrowArgs<ExtArgs>>): Prisma__logoClient<$Result.GetResult<Prisma.$logoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Logos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {logoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Logos
     * const logos = await prisma.logo.findMany()
     * 
     * // Get first 10 Logos
     * const logos = await prisma.logo.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const logoWithIdOnly = await prisma.logo.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends logoFindManyArgs>(args?: SelectSubset<T, logoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$logoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Logo.
     * @param {logoCreateArgs} args - Arguments to create a Logo.
     * @example
     * // Create one Logo
     * const Logo = await prisma.logo.create({
     *   data: {
     *     // ... data to create a Logo
     *   }
     * })
     * 
     */
    create<T extends logoCreateArgs>(args: SelectSubset<T, logoCreateArgs<ExtArgs>>): Prisma__logoClient<$Result.GetResult<Prisma.$logoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Logos.
     * @param {logoCreateManyArgs} args - Arguments to create many Logos.
     * @example
     * // Create many Logos
     * const logo = await prisma.logo.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends logoCreateManyArgs>(args?: SelectSubset<T, logoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Logos and returns the data saved in the database.
     * @param {logoCreateManyAndReturnArgs} args - Arguments to create many Logos.
     * @example
     * // Create many Logos
     * const logo = await prisma.logo.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Logos and only return the `id`
     * const logoWithIdOnly = await prisma.logo.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends logoCreateManyAndReturnArgs>(args?: SelectSubset<T, logoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$logoPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Logo.
     * @param {logoDeleteArgs} args - Arguments to delete one Logo.
     * @example
     * // Delete one Logo
     * const Logo = await prisma.logo.delete({
     *   where: {
     *     // ... filter to delete one Logo
     *   }
     * })
     * 
     */
    delete<T extends logoDeleteArgs>(args: SelectSubset<T, logoDeleteArgs<ExtArgs>>): Prisma__logoClient<$Result.GetResult<Prisma.$logoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Logo.
     * @param {logoUpdateArgs} args - Arguments to update one Logo.
     * @example
     * // Update one Logo
     * const logo = await prisma.logo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends logoUpdateArgs>(args: SelectSubset<T, logoUpdateArgs<ExtArgs>>): Prisma__logoClient<$Result.GetResult<Prisma.$logoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Logos.
     * @param {logoDeleteManyArgs} args - Arguments to filter Logos to delete.
     * @example
     * // Delete a few Logos
     * const { count } = await prisma.logo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends logoDeleteManyArgs>(args?: SelectSubset<T, logoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Logos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {logoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Logos
     * const logo = await prisma.logo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends logoUpdateManyArgs>(args: SelectSubset<T, logoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Logo.
     * @param {logoUpsertArgs} args - Arguments to update or create a Logo.
     * @example
     * // Update or create a Logo
     * const logo = await prisma.logo.upsert({
     *   create: {
     *     // ... data to create a Logo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Logo we want to update
     *   }
     * })
     */
    upsert<T extends logoUpsertArgs>(args: SelectSubset<T, logoUpsertArgs<ExtArgs>>): Prisma__logoClient<$Result.GetResult<Prisma.$logoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Logos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {logoCountArgs} args - Arguments to filter Logos to count.
     * @example
     * // Count the number of Logos
     * const count = await prisma.logo.count({
     *   where: {
     *     // ... the filter for the Logos we want to count
     *   }
     * })
    **/
    count<T extends logoCountArgs>(
      args?: Subset<T, logoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LogoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Logo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LogoAggregateArgs>(args: Subset<T, LogoAggregateArgs>): Prisma.PrismaPromise<GetLogoAggregateType<T>>

    /**
     * Group by Logo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {logoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends logoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: logoGroupByArgs['orderBy'] }
        : { orderBy?: logoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, logoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLogoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the logo model
   */
  readonly fields: logoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for logo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__logoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    engagement<T extends engagementDefaultArgs<ExtArgs> = {}>(args?: Subset<T, engagementDefaultArgs<ExtArgs>>): Prisma__engagementClient<$Result.GetResult<Prisma.$engagementPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the logo model
   */ 
  interface logoFieldRefs {
    readonly id: FieldRef<"logo", 'Int'>
    readonly path: FieldRef<"logo", 'String'>
    readonly engagementId: FieldRef<"logo", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * logo findUnique
   */
  export type logoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the logo
     */
    select?: logoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: logoInclude<ExtArgs> | null
    /**
     * Filter, which logo to fetch.
     */
    where: logoWhereUniqueInput
  }

  /**
   * logo findUniqueOrThrow
   */
  export type logoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the logo
     */
    select?: logoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: logoInclude<ExtArgs> | null
    /**
     * Filter, which logo to fetch.
     */
    where: logoWhereUniqueInput
  }

  /**
   * logo findFirst
   */
  export type logoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the logo
     */
    select?: logoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: logoInclude<ExtArgs> | null
    /**
     * Filter, which logo to fetch.
     */
    where?: logoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of logos to fetch.
     */
    orderBy?: logoOrderByWithRelationInput | logoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for logos.
     */
    cursor?: logoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` logos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` logos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of logos.
     */
    distinct?: LogoScalarFieldEnum | LogoScalarFieldEnum[]
  }

  /**
   * logo findFirstOrThrow
   */
  export type logoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the logo
     */
    select?: logoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: logoInclude<ExtArgs> | null
    /**
     * Filter, which logo to fetch.
     */
    where?: logoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of logos to fetch.
     */
    orderBy?: logoOrderByWithRelationInput | logoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for logos.
     */
    cursor?: logoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` logos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` logos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of logos.
     */
    distinct?: LogoScalarFieldEnum | LogoScalarFieldEnum[]
  }

  /**
   * logo findMany
   */
  export type logoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the logo
     */
    select?: logoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: logoInclude<ExtArgs> | null
    /**
     * Filter, which logos to fetch.
     */
    where?: logoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of logos to fetch.
     */
    orderBy?: logoOrderByWithRelationInput | logoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing logos.
     */
    cursor?: logoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` logos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` logos.
     */
    skip?: number
    distinct?: LogoScalarFieldEnum | LogoScalarFieldEnum[]
  }

  /**
   * logo create
   */
  export type logoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the logo
     */
    select?: logoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: logoInclude<ExtArgs> | null
    /**
     * The data needed to create a logo.
     */
    data: XOR<logoCreateInput, logoUncheckedCreateInput>
  }

  /**
   * logo createMany
   */
  export type logoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many logos.
     */
    data: logoCreateManyInput | logoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * logo createManyAndReturn
   */
  export type logoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the logo
     */
    select?: logoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many logos.
     */
    data: logoCreateManyInput | logoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: logoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * logo update
   */
  export type logoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the logo
     */
    select?: logoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: logoInclude<ExtArgs> | null
    /**
     * The data needed to update a logo.
     */
    data: XOR<logoUpdateInput, logoUncheckedUpdateInput>
    /**
     * Choose, which logo to update.
     */
    where: logoWhereUniqueInput
  }

  /**
   * logo updateMany
   */
  export type logoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update logos.
     */
    data: XOR<logoUpdateManyMutationInput, logoUncheckedUpdateManyInput>
    /**
     * Filter which logos to update
     */
    where?: logoWhereInput
  }

  /**
   * logo upsert
   */
  export type logoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the logo
     */
    select?: logoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: logoInclude<ExtArgs> | null
    /**
     * The filter to search for the logo to update in case it exists.
     */
    where: logoWhereUniqueInput
    /**
     * In case the logo found by the `where` argument doesn't exist, create a new logo with this data.
     */
    create: XOR<logoCreateInput, logoUncheckedCreateInput>
    /**
     * In case the logo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<logoUpdateInput, logoUncheckedUpdateInput>
  }

  /**
   * logo delete
   */
  export type logoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the logo
     */
    select?: logoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: logoInclude<ExtArgs> | null
    /**
     * Filter which logo to delete.
     */
    where: logoWhereUniqueInput
  }

  /**
   * logo deleteMany
   */
  export type logoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which logos to delete
     */
    where?: logoWhereInput
  }

  /**
   * logo without action
   */
  export type logoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the logo
     */
    select?: logoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: logoInclude<ExtArgs> | null
  }


  /**
   * Model article
   */

  export type AggregateArticle = {
    _count: ArticleCountAggregateOutputType | null
    _avg: ArticleAvgAggregateOutputType | null
    _sum: ArticleSumAggregateOutputType | null
    _min: ArticleMinAggregateOutputType | null
    _max: ArticleMaxAggregateOutputType | null
  }

  export type ArticleAvgAggregateOutputType = {
    id: number | null
  }

  export type ArticleSumAggregateOutputType = {
    id: number | null
  }

  export type ArticleMinAggregateOutputType = {
    id: number | null
    titre: string | null
    contenu: string | null
    categorieArticle: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ArticleMaxAggregateOutputType = {
    id: number | null
    titre: string | null
    contenu: string | null
    categorieArticle: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ArticleCountAggregateOutputType = {
    id: number
    titre: number
    contenu: number
    categorieArticle: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ArticleAvgAggregateInputType = {
    id?: true
  }

  export type ArticleSumAggregateInputType = {
    id?: true
  }

  export type ArticleMinAggregateInputType = {
    id?: true
    titre?: true
    contenu?: true
    categorieArticle?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ArticleMaxAggregateInputType = {
    id?: true
    titre?: true
    contenu?: true
    categorieArticle?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ArticleCountAggregateInputType = {
    id?: true
    titre?: true
    contenu?: true
    categorieArticle?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ArticleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which article to aggregate.
     */
    where?: articleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of articles to fetch.
     */
    orderBy?: articleOrderByWithRelationInput | articleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: articleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` articles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` articles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned articles
    **/
    _count?: true | ArticleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ArticleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ArticleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ArticleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ArticleMaxAggregateInputType
  }

  export type GetArticleAggregateType<T extends ArticleAggregateArgs> = {
        [P in keyof T & keyof AggregateArticle]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateArticle[P]>
      : GetScalarType<T[P], AggregateArticle[P]>
  }




  export type articleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: articleWhereInput
    orderBy?: articleOrderByWithAggregationInput | articleOrderByWithAggregationInput[]
    by: ArticleScalarFieldEnum[] | ArticleScalarFieldEnum
    having?: articleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ArticleCountAggregateInputType | true
    _avg?: ArticleAvgAggregateInputType
    _sum?: ArticleSumAggregateInputType
    _min?: ArticleMinAggregateInputType
    _max?: ArticleMaxAggregateInputType
  }

  export type ArticleGroupByOutputType = {
    id: number
    titre: string
    contenu: string
    categorieArticle: string
    createdAt: Date
    updatedAt: Date
    _count: ArticleCountAggregateOutputType | null
    _avg: ArticleAvgAggregateOutputType | null
    _sum: ArticleSumAggregateOutputType | null
    _min: ArticleMinAggregateOutputType | null
    _max: ArticleMaxAggregateOutputType | null
  }

  type GetArticleGroupByPayload<T extends articleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ArticleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ArticleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ArticleGroupByOutputType[P]>
            : GetScalarType<T[P], ArticleGroupByOutputType[P]>
        }
      >
    >


  export type articleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    titre?: boolean
    contenu?: boolean
    categorieArticle?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    images?: boolean | article$imagesArgs<ExtArgs>
    _count?: boolean | ArticleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["article"]>

  export type articleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    titre?: boolean
    contenu?: boolean
    categorieArticle?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["article"]>

  export type articleSelectScalar = {
    id?: boolean
    titre?: boolean
    contenu?: boolean
    categorieArticle?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type articleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    images?: boolean | article$imagesArgs<ExtArgs>
    _count?: boolean | ArticleCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type articleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $articlePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "article"
    objects: {
      images: Prisma.$imagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      titre: string
      contenu: string
      categorieArticle: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["article"]>
    composites: {}
  }

  type articleGetPayload<S extends boolean | null | undefined | articleDefaultArgs> = $Result.GetResult<Prisma.$articlePayload, S>

  type articleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<articleFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ArticleCountAggregateInputType | true
    }

  export interface articleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['article'], meta: { name: 'article' } }
    /**
     * Find zero or one Article that matches the filter.
     * @param {articleFindUniqueArgs} args - Arguments to find a Article
     * @example
     * // Get one Article
     * const article = await prisma.article.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends articleFindUniqueArgs>(args: SelectSubset<T, articleFindUniqueArgs<ExtArgs>>): Prisma__articleClient<$Result.GetResult<Prisma.$articlePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Article that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {articleFindUniqueOrThrowArgs} args - Arguments to find a Article
     * @example
     * // Get one Article
     * const article = await prisma.article.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends articleFindUniqueOrThrowArgs>(args: SelectSubset<T, articleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__articleClient<$Result.GetResult<Prisma.$articlePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Article that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {articleFindFirstArgs} args - Arguments to find a Article
     * @example
     * // Get one Article
     * const article = await prisma.article.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends articleFindFirstArgs>(args?: SelectSubset<T, articleFindFirstArgs<ExtArgs>>): Prisma__articleClient<$Result.GetResult<Prisma.$articlePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Article that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {articleFindFirstOrThrowArgs} args - Arguments to find a Article
     * @example
     * // Get one Article
     * const article = await prisma.article.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends articleFindFirstOrThrowArgs>(args?: SelectSubset<T, articleFindFirstOrThrowArgs<ExtArgs>>): Prisma__articleClient<$Result.GetResult<Prisma.$articlePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Articles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {articleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Articles
     * const articles = await prisma.article.findMany()
     * 
     * // Get first 10 Articles
     * const articles = await prisma.article.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const articleWithIdOnly = await prisma.article.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends articleFindManyArgs>(args?: SelectSubset<T, articleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$articlePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Article.
     * @param {articleCreateArgs} args - Arguments to create a Article.
     * @example
     * // Create one Article
     * const Article = await prisma.article.create({
     *   data: {
     *     // ... data to create a Article
     *   }
     * })
     * 
     */
    create<T extends articleCreateArgs>(args: SelectSubset<T, articleCreateArgs<ExtArgs>>): Prisma__articleClient<$Result.GetResult<Prisma.$articlePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Articles.
     * @param {articleCreateManyArgs} args - Arguments to create many Articles.
     * @example
     * // Create many Articles
     * const article = await prisma.article.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends articleCreateManyArgs>(args?: SelectSubset<T, articleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Articles and returns the data saved in the database.
     * @param {articleCreateManyAndReturnArgs} args - Arguments to create many Articles.
     * @example
     * // Create many Articles
     * const article = await prisma.article.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Articles and only return the `id`
     * const articleWithIdOnly = await prisma.article.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends articleCreateManyAndReturnArgs>(args?: SelectSubset<T, articleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$articlePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Article.
     * @param {articleDeleteArgs} args - Arguments to delete one Article.
     * @example
     * // Delete one Article
     * const Article = await prisma.article.delete({
     *   where: {
     *     // ... filter to delete one Article
     *   }
     * })
     * 
     */
    delete<T extends articleDeleteArgs>(args: SelectSubset<T, articleDeleteArgs<ExtArgs>>): Prisma__articleClient<$Result.GetResult<Prisma.$articlePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Article.
     * @param {articleUpdateArgs} args - Arguments to update one Article.
     * @example
     * // Update one Article
     * const article = await prisma.article.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends articleUpdateArgs>(args: SelectSubset<T, articleUpdateArgs<ExtArgs>>): Prisma__articleClient<$Result.GetResult<Prisma.$articlePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Articles.
     * @param {articleDeleteManyArgs} args - Arguments to filter Articles to delete.
     * @example
     * // Delete a few Articles
     * const { count } = await prisma.article.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends articleDeleteManyArgs>(args?: SelectSubset<T, articleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Articles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {articleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Articles
     * const article = await prisma.article.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends articleUpdateManyArgs>(args: SelectSubset<T, articleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Article.
     * @param {articleUpsertArgs} args - Arguments to update or create a Article.
     * @example
     * // Update or create a Article
     * const article = await prisma.article.upsert({
     *   create: {
     *     // ... data to create a Article
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Article we want to update
     *   }
     * })
     */
    upsert<T extends articleUpsertArgs>(args: SelectSubset<T, articleUpsertArgs<ExtArgs>>): Prisma__articleClient<$Result.GetResult<Prisma.$articlePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Articles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {articleCountArgs} args - Arguments to filter Articles to count.
     * @example
     * // Count the number of Articles
     * const count = await prisma.article.count({
     *   where: {
     *     // ... the filter for the Articles we want to count
     *   }
     * })
    **/
    count<T extends articleCountArgs>(
      args?: Subset<T, articleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ArticleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Article.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ArticleAggregateArgs>(args: Subset<T, ArticleAggregateArgs>): Prisma.PrismaPromise<GetArticleAggregateType<T>>

    /**
     * Group by Article.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {articleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends articleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: articleGroupByArgs['orderBy'] }
        : { orderBy?: articleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, articleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetArticleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the article model
   */
  readonly fields: articleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for article.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__articleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    images<T extends article$imagesArgs<ExtArgs> = {}>(args?: Subset<T, article$imagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$imagePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the article model
   */ 
  interface articleFieldRefs {
    readonly id: FieldRef<"article", 'Int'>
    readonly titre: FieldRef<"article", 'String'>
    readonly contenu: FieldRef<"article", 'String'>
    readonly categorieArticle: FieldRef<"article", 'String'>
    readonly createdAt: FieldRef<"article", 'DateTime'>
    readonly updatedAt: FieldRef<"article", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * article findUnique
   */
  export type articleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the article
     */
    select?: articleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: articleInclude<ExtArgs> | null
    /**
     * Filter, which article to fetch.
     */
    where: articleWhereUniqueInput
  }

  /**
   * article findUniqueOrThrow
   */
  export type articleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the article
     */
    select?: articleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: articleInclude<ExtArgs> | null
    /**
     * Filter, which article to fetch.
     */
    where: articleWhereUniqueInput
  }

  /**
   * article findFirst
   */
  export type articleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the article
     */
    select?: articleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: articleInclude<ExtArgs> | null
    /**
     * Filter, which article to fetch.
     */
    where?: articleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of articles to fetch.
     */
    orderBy?: articleOrderByWithRelationInput | articleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for articles.
     */
    cursor?: articleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` articles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` articles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of articles.
     */
    distinct?: ArticleScalarFieldEnum | ArticleScalarFieldEnum[]
  }

  /**
   * article findFirstOrThrow
   */
  export type articleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the article
     */
    select?: articleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: articleInclude<ExtArgs> | null
    /**
     * Filter, which article to fetch.
     */
    where?: articleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of articles to fetch.
     */
    orderBy?: articleOrderByWithRelationInput | articleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for articles.
     */
    cursor?: articleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` articles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` articles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of articles.
     */
    distinct?: ArticleScalarFieldEnum | ArticleScalarFieldEnum[]
  }

  /**
   * article findMany
   */
  export type articleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the article
     */
    select?: articleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: articleInclude<ExtArgs> | null
    /**
     * Filter, which articles to fetch.
     */
    where?: articleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of articles to fetch.
     */
    orderBy?: articleOrderByWithRelationInput | articleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing articles.
     */
    cursor?: articleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` articles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` articles.
     */
    skip?: number
    distinct?: ArticleScalarFieldEnum | ArticleScalarFieldEnum[]
  }

  /**
   * article create
   */
  export type articleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the article
     */
    select?: articleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: articleInclude<ExtArgs> | null
    /**
     * The data needed to create a article.
     */
    data: XOR<articleCreateInput, articleUncheckedCreateInput>
  }

  /**
   * article createMany
   */
  export type articleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many articles.
     */
    data: articleCreateManyInput | articleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * article createManyAndReturn
   */
  export type articleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the article
     */
    select?: articleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many articles.
     */
    data: articleCreateManyInput | articleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * article update
   */
  export type articleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the article
     */
    select?: articleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: articleInclude<ExtArgs> | null
    /**
     * The data needed to update a article.
     */
    data: XOR<articleUpdateInput, articleUncheckedUpdateInput>
    /**
     * Choose, which article to update.
     */
    where: articleWhereUniqueInput
  }

  /**
   * article updateMany
   */
  export type articleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update articles.
     */
    data: XOR<articleUpdateManyMutationInput, articleUncheckedUpdateManyInput>
    /**
     * Filter which articles to update
     */
    where?: articleWhereInput
  }

  /**
   * article upsert
   */
  export type articleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the article
     */
    select?: articleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: articleInclude<ExtArgs> | null
    /**
     * The filter to search for the article to update in case it exists.
     */
    where: articleWhereUniqueInput
    /**
     * In case the article found by the `where` argument doesn't exist, create a new article with this data.
     */
    create: XOR<articleCreateInput, articleUncheckedCreateInput>
    /**
     * In case the article was found with the provided `where` argument, update it with this data.
     */
    update: XOR<articleUpdateInput, articleUncheckedUpdateInput>
  }

  /**
   * article delete
   */
  export type articleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the article
     */
    select?: articleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: articleInclude<ExtArgs> | null
    /**
     * Filter which article to delete.
     */
    where: articleWhereUniqueInput
  }

  /**
   * article deleteMany
   */
  export type articleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which articles to delete
     */
    where?: articleWhereInput
  }

  /**
   * article.images
   */
  export type article$imagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the image
     */
    select?: imageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: imageInclude<ExtArgs> | null
    where?: imageWhereInput
    orderBy?: imageOrderByWithRelationInput | imageOrderByWithRelationInput[]
    cursor?: imageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ImageScalarFieldEnum | ImageScalarFieldEnum[]
  }

  /**
   * article without action
   */
  export type articleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the article
     */
    select?: articleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: articleInclude<ExtArgs> | null
  }


  /**
   * Model image
   */

  export type AggregateImage = {
    _count: ImageCountAggregateOutputType | null
    _avg: ImageAvgAggregateOutputType | null
    _sum: ImageSumAggregateOutputType | null
    _min: ImageMinAggregateOutputType | null
    _max: ImageMaxAggregateOutputType | null
  }

  export type ImageAvgAggregateOutputType = {
    id: number | null
    articleId: number | null
  }

  export type ImageSumAggregateOutputType = {
    id: number | null
    articleId: number | null
  }

  export type ImageMinAggregateOutputType = {
    id: number | null
    path: string | null
    articleId: number | null
  }

  export type ImageMaxAggregateOutputType = {
    id: number | null
    path: string | null
    articleId: number | null
  }

  export type ImageCountAggregateOutputType = {
    id: number
    path: number
    articleId: number
    _all: number
  }


  export type ImageAvgAggregateInputType = {
    id?: true
    articleId?: true
  }

  export type ImageSumAggregateInputType = {
    id?: true
    articleId?: true
  }

  export type ImageMinAggregateInputType = {
    id?: true
    path?: true
    articleId?: true
  }

  export type ImageMaxAggregateInputType = {
    id?: true
    path?: true
    articleId?: true
  }

  export type ImageCountAggregateInputType = {
    id?: true
    path?: true
    articleId?: true
    _all?: true
  }

  export type ImageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which image to aggregate.
     */
    where?: imageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of images to fetch.
     */
    orderBy?: imageOrderByWithRelationInput | imageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: imageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned images
    **/
    _count?: true | ImageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ImageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ImageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ImageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ImageMaxAggregateInputType
  }

  export type GetImageAggregateType<T extends ImageAggregateArgs> = {
        [P in keyof T & keyof AggregateImage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateImage[P]>
      : GetScalarType<T[P], AggregateImage[P]>
  }




  export type imageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: imageWhereInput
    orderBy?: imageOrderByWithAggregationInput | imageOrderByWithAggregationInput[]
    by: ImageScalarFieldEnum[] | ImageScalarFieldEnum
    having?: imageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ImageCountAggregateInputType | true
    _avg?: ImageAvgAggregateInputType
    _sum?: ImageSumAggregateInputType
    _min?: ImageMinAggregateInputType
    _max?: ImageMaxAggregateInputType
  }

  export type ImageGroupByOutputType = {
    id: number
    path: string
    articleId: number
    _count: ImageCountAggregateOutputType | null
    _avg: ImageAvgAggregateOutputType | null
    _sum: ImageSumAggregateOutputType | null
    _min: ImageMinAggregateOutputType | null
    _max: ImageMaxAggregateOutputType | null
  }

  type GetImageGroupByPayload<T extends imageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ImageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ImageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ImageGroupByOutputType[P]>
            : GetScalarType<T[P], ImageGroupByOutputType[P]>
        }
      >
    >


  export type imageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    path?: boolean
    articleId?: boolean
    article?: boolean | articleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["image"]>

  export type imageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    path?: boolean
    articleId?: boolean
    article?: boolean | articleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["image"]>

  export type imageSelectScalar = {
    id?: boolean
    path?: boolean
    articleId?: boolean
  }

  export type imageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    article?: boolean | articleDefaultArgs<ExtArgs>
  }
  export type imageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    article?: boolean | articleDefaultArgs<ExtArgs>
  }

  export type $imagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "image"
    objects: {
      article: Prisma.$articlePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      path: string
      articleId: number
    }, ExtArgs["result"]["image"]>
    composites: {}
  }

  type imageGetPayload<S extends boolean | null | undefined | imageDefaultArgs> = $Result.GetResult<Prisma.$imagePayload, S>

  type imageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<imageFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ImageCountAggregateInputType | true
    }

  export interface imageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['image'], meta: { name: 'image' } }
    /**
     * Find zero or one Image that matches the filter.
     * @param {imageFindUniqueArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends imageFindUniqueArgs>(args: SelectSubset<T, imageFindUniqueArgs<ExtArgs>>): Prisma__imageClient<$Result.GetResult<Prisma.$imagePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Image that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {imageFindUniqueOrThrowArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends imageFindUniqueOrThrowArgs>(args: SelectSubset<T, imageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__imageClient<$Result.GetResult<Prisma.$imagePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Image that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {imageFindFirstArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends imageFindFirstArgs>(args?: SelectSubset<T, imageFindFirstArgs<ExtArgs>>): Prisma__imageClient<$Result.GetResult<Prisma.$imagePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Image that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {imageFindFirstOrThrowArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends imageFindFirstOrThrowArgs>(args?: SelectSubset<T, imageFindFirstOrThrowArgs<ExtArgs>>): Prisma__imageClient<$Result.GetResult<Prisma.$imagePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Images that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {imageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Images
     * const images = await prisma.image.findMany()
     * 
     * // Get first 10 Images
     * const images = await prisma.image.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const imageWithIdOnly = await prisma.image.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends imageFindManyArgs>(args?: SelectSubset<T, imageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$imagePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Image.
     * @param {imageCreateArgs} args - Arguments to create a Image.
     * @example
     * // Create one Image
     * const Image = await prisma.image.create({
     *   data: {
     *     // ... data to create a Image
     *   }
     * })
     * 
     */
    create<T extends imageCreateArgs>(args: SelectSubset<T, imageCreateArgs<ExtArgs>>): Prisma__imageClient<$Result.GetResult<Prisma.$imagePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Images.
     * @param {imageCreateManyArgs} args - Arguments to create many Images.
     * @example
     * // Create many Images
     * const image = await prisma.image.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends imageCreateManyArgs>(args?: SelectSubset<T, imageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Images and returns the data saved in the database.
     * @param {imageCreateManyAndReturnArgs} args - Arguments to create many Images.
     * @example
     * // Create many Images
     * const image = await prisma.image.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Images and only return the `id`
     * const imageWithIdOnly = await prisma.image.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends imageCreateManyAndReturnArgs>(args?: SelectSubset<T, imageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$imagePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Image.
     * @param {imageDeleteArgs} args - Arguments to delete one Image.
     * @example
     * // Delete one Image
     * const Image = await prisma.image.delete({
     *   where: {
     *     // ... filter to delete one Image
     *   }
     * })
     * 
     */
    delete<T extends imageDeleteArgs>(args: SelectSubset<T, imageDeleteArgs<ExtArgs>>): Prisma__imageClient<$Result.GetResult<Prisma.$imagePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Image.
     * @param {imageUpdateArgs} args - Arguments to update one Image.
     * @example
     * // Update one Image
     * const image = await prisma.image.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends imageUpdateArgs>(args: SelectSubset<T, imageUpdateArgs<ExtArgs>>): Prisma__imageClient<$Result.GetResult<Prisma.$imagePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Images.
     * @param {imageDeleteManyArgs} args - Arguments to filter Images to delete.
     * @example
     * // Delete a few Images
     * const { count } = await prisma.image.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends imageDeleteManyArgs>(args?: SelectSubset<T, imageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {imageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Images
     * const image = await prisma.image.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends imageUpdateManyArgs>(args: SelectSubset<T, imageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Image.
     * @param {imageUpsertArgs} args - Arguments to update or create a Image.
     * @example
     * // Update or create a Image
     * const image = await prisma.image.upsert({
     *   create: {
     *     // ... data to create a Image
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Image we want to update
     *   }
     * })
     */
    upsert<T extends imageUpsertArgs>(args: SelectSubset<T, imageUpsertArgs<ExtArgs>>): Prisma__imageClient<$Result.GetResult<Prisma.$imagePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {imageCountArgs} args - Arguments to filter Images to count.
     * @example
     * // Count the number of Images
     * const count = await prisma.image.count({
     *   where: {
     *     // ... the filter for the Images we want to count
     *   }
     * })
    **/
    count<T extends imageCountArgs>(
      args?: Subset<T, imageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ImageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Image.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ImageAggregateArgs>(args: Subset<T, ImageAggregateArgs>): Prisma.PrismaPromise<GetImageAggregateType<T>>

    /**
     * Group by Image.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {imageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends imageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: imageGroupByArgs['orderBy'] }
        : { orderBy?: imageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, imageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetImageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the image model
   */
  readonly fields: imageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for image.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__imageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    article<T extends articleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, articleDefaultArgs<ExtArgs>>): Prisma__articleClient<$Result.GetResult<Prisma.$articlePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the image model
   */ 
  interface imageFieldRefs {
    readonly id: FieldRef<"image", 'Int'>
    readonly path: FieldRef<"image", 'String'>
    readonly articleId: FieldRef<"image", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * image findUnique
   */
  export type imageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the image
     */
    select?: imageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: imageInclude<ExtArgs> | null
    /**
     * Filter, which image to fetch.
     */
    where: imageWhereUniqueInput
  }

  /**
   * image findUniqueOrThrow
   */
  export type imageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the image
     */
    select?: imageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: imageInclude<ExtArgs> | null
    /**
     * Filter, which image to fetch.
     */
    where: imageWhereUniqueInput
  }

  /**
   * image findFirst
   */
  export type imageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the image
     */
    select?: imageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: imageInclude<ExtArgs> | null
    /**
     * Filter, which image to fetch.
     */
    where?: imageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of images to fetch.
     */
    orderBy?: imageOrderByWithRelationInput | imageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for images.
     */
    cursor?: imageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of images.
     */
    distinct?: ImageScalarFieldEnum | ImageScalarFieldEnum[]
  }

  /**
   * image findFirstOrThrow
   */
  export type imageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the image
     */
    select?: imageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: imageInclude<ExtArgs> | null
    /**
     * Filter, which image to fetch.
     */
    where?: imageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of images to fetch.
     */
    orderBy?: imageOrderByWithRelationInput | imageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for images.
     */
    cursor?: imageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of images.
     */
    distinct?: ImageScalarFieldEnum | ImageScalarFieldEnum[]
  }

  /**
   * image findMany
   */
  export type imageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the image
     */
    select?: imageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: imageInclude<ExtArgs> | null
    /**
     * Filter, which images to fetch.
     */
    where?: imageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of images to fetch.
     */
    orderBy?: imageOrderByWithRelationInput | imageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing images.
     */
    cursor?: imageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` images.
     */
    skip?: number
    distinct?: ImageScalarFieldEnum | ImageScalarFieldEnum[]
  }

  /**
   * image create
   */
  export type imageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the image
     */
    select?: imageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: imageInclude<ExtArgs> | null
    /**
     * The data needed to create a image.
     */
    data: XOR<imageCreateInput, imageUncheckedCreateInput>
  }

  /**
   * image createMany
   */
  export type imageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many images.
     */
    data: imageCreateManyInput | imageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * image createManyAndReturn
   */
  export type imageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the image
     */
    select?: imageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many images.
     */
    data: imageCreateManyInput | imageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: imageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * image update
   */
  export type imageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the image
     */
    select?: imageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: imageInclude<ExtArgs> | null
    /**
     * The data needed to update a image.
     */
    data: XOR<imageUpdateInput, imageUncheckedUpdateInput>
    /**
     * Choose, which image to update.
     */
    where: imageWhereUniqueInput
  }

  /**
   * image updateMany
   */
  export type imageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update images.
     */
    data: XOR<imageUpdateManyMutationInput, imageUncheckedUpdateManyInput>
    /**
     * Filter which images to update
     */
    where?: imageWhereInput
  }

  /**
   * image upsert
   */
  export type imageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the image
     */
    select?: imageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: imageInclude<ExtArgs> | null
    /**
     * The filter to search for the image to update in case it exists.
     */
    where: imageWhereUniqueInput
    /**
     * In case the image found by the `where` argument doesn't exist, create a new image with this data.
     */
    create: XOR<imageCreateInput, imageUncheckedCreateInput>
    /**
     * In case the image was found with the provided `where` argument, update it with this data.
     */
    update: XOR<imageUpdateInput, imageUncheckedUpdateInput>
  }

  /**
   * image delete
   */
  export type imageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the image
     */
    select?: imageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: imageInclude<ExtArgs> | null
    /**
     * Filter which image to delete.
     */
    where: imageWhereUniqueInput
  }

  /**
   * image deleteMany
   */
  export type imageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which images to delete
     */
    where?: imageWhereInput
  }

  /**
   * image without action
   */
  export type imageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the image
     */
    select?: imageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: imageInclude<ExtArgs> | null
  }


  /**
   * Model transactions
   */

  export type AggregateTransactions = {
    _count: TransactionsCountAggregateOutputType | null
    _avg: TransactionsAvgAggregateOutputType | null
    _sum: TransactionsSumAggregateOutputType | null
    _min: TransactionsMinAggregateOutputType | null
    _max: TransactionsMaxAggregateOutputType | null
  }

  export type TransactionsAvgAggregateOutputType = {
    id: number | null
    price: Decimal | null
    quantity: number | null
    annonceId: number | null
    userId: number | null
  }

  export type TransactionsSumAggregateOutputType = {
    id: number | null
    price: Decimal | null
    quantity: number | null
    annonceId: number | null
    userId: number | null
  }

  export type TransactionsMinAggregateOutputType = {
    id: number | null
    price: Decimal | null
    quantity: number | null
    status: $Enums.transactionStatus | null
    createdAt: Date | null
    updatedAt: Date | null
    annonceId: number | null
    userId: number | null
  }

  export type TransactionsMaxAggregateOutputType = {
    id: number | null
    price: Decimal | null
    quantity: number | null
    status: $Enums.transactionStatus | null
    createdAt: Date | null
    updatedAt: Date | null
    annonceId: number | null
    userId: number | null
  }

  export type TransactionsCountAggregateOutputType = {
    id: number
    dateRange: number
    price: number
    quantity: number
    status: number
    createdAt: number
    updatedAt: number
    annonceId: number
    userId: number
    _all: number
  }


  export type TransactionsAvgAggregateInputType = {
    id?: true
    price?: true
    quantity?: true
    annonceId?: true
    userId?: true
  }

  export type TransactionsSumAggregateInputType = {
    id?: true
    price?: true
    quantity?: true
    annonceId?: true
    userId?: true
  }

  export type TransactionsMinAggregateInputType = {
    id?: true
    price?: true
    quantity?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    annonceId?: true
    userId?: true
  }

  export type TransactionsMaxAggregateInputType = {
    id?: true
    price?: true
    quantity?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    annonceId?: true
    userId?: true
  }

  export type TransactionsCountAggregateInputType = {
    id?: true
    dateRange?: true
    price?: true
    quantity?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    annonceId?: true
    userId?: true
    _all?: true
  }

  export type TransactionsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which transactions to aggregate.
     */
    where?: transactionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of transactions to fetch.
     */
    orderBy?: transactionsOrderByWithRelationInput | transactionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: transactionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned transactions
    **/
    _count?: true | TransactionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TransactionsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TransactionsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TransactionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TransactionsMaxAggregateInputType
  }

  export type GetTransactionsAggregateType<T extends TransactionsAggregateArgs> = {
        [P in keyof T & keyof AggregateTransactions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTransactions[P]>
      : GetScalarType<T[P], AggregateTransactions[P]>
  }




  export type transactionsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: transactionsWhereInput
    orderBy?: transactionsOrderByWithAggregationInput | transactionsOrderByWithAggregationInput[]
    by: TransactionsScalarFieldEnum[] | TransactionsScalarFieldEnum
    having?: transactionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TransactionsCountAggregateInputType | true
    _avg?: TransactionsAvgAggregateInputType
    _sum?: TransactionsSumAggregateInputType
    _min?: TransactionsMinAggregateInputType
    _max?: TransactionsMaxAggregateInputType
  }

  export type TransactionsGroupByOutputType = {
    id: number
    dateRange: JsonValue
    price: Decimal
    quantity: number
    status: $Enums.transactionStatus
    createdAt: Date
    updatedAt: Date
    annonceId: number
    userId: number
    _count: TransactionsCountAggregateOutputType | null
    _avg: TransactionsAvgAggregateOutputType | null
    _sum: TransactionsSumAggregateOutputType | null
    _min: TransactionsMinAggregateOutputType | null
    _max: TransactionsMaxAggregateOutputType | null
  }

  type GetTransactionsGroupByPayload<T extends transactionsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TransactionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TransactionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TransactionsGroupByOutputType[P]>
            : GetScalarType<T[P], TransactionsGroupByOutputType[P]>
        }
      >
    >


  export type transactionsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    dateRange?: boolean
    price?: boolean
    quantity?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    annonceId?: boolean
    userId?: boolean
    annonce?: boolean | annoncesDefaultArgs<ExtArgs>
    user?: boolean | userDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transactions"]>

  export type transactionsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    dateRange?: boolean
    price?: boolean
    quantity?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    annonceId?: boolean
    userId?: boolean
    annonce?: boolean | annoncesDefaultArgs<ExtArgs>
    user?: boolean | userDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transactions"]>

  export type transactionsSelectScalar = {
    id?: boolean
    dateRange?: boolean
    price?: boolean
    quantity?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    annonceId?: boolean
    userId?: boolean
  }

  export type transactionsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    annonce?: boolean | annoncesDefaultArgs<ExtArgs>
    user?: boolean | userDefaultArgs<ExtArgs>
  }
  export type transactionsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    annonce?: boolean | annoncesDefaultArgs<ExtArgs>
    user?: boolean | userDefaultArgs<ExtArgs>
  }

  export type $transactionsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "transactions"
    objects: {
      annonce: Prisma.$annoncesPayload<ExtArgs>
      user: Prisma.$userPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      dateRange: Prisma.JsonValue
      price: Prisma.Decimal
      quantity: number
      status: $Enums.transactionStatus
      createdAt: Date
      updatedAt: Date
      annonceId: number
      userId: number
    }, ExtArgs["result"]["transactions"]>
    composites: {}
  }

  type transactionsGetPayload<S extends boolean | null | undefined | transactionsDefaultArgs> = $Result.GetResult<Prisma.$transactionsPayload, S>

  type transactionsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<transactionsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TransactionsCountAggregateInputType | true
    }

  export interface transactionsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['transactions'], meta: { name: 'transactions' } }
    /**
     * Find zero or one Transactions that matches the filter.
     * @param {transactionsFindUniqueArgs} args - Arguments to find a Transactions
     * @example
     * // Get one Transactions
     * const transactions = await prisma.transactions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends transactionsFindUniqueArgs>(args: SelectSubset<T, transactionsFindUniqueArgs<ExtArgs>>): Prisma__transactionsClient<$Result.GetResult<Prisma.$transactionsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Transactions that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {transactionsFindUniqueOrThrowArgs} args - Arguments to find a Transactions
     * @example
     * // Get one Transactions
     * const transactions = await prisma.transactions.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends transactionsFindUniqueOrThrowArgs>(args: SelectSubset<T, transactionsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__transactionsClient<$Result.GetResult<Prisma.$transactionsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Transactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transactionsFindFirstArgs} args - Arguments to find a Transactions
     * @example
     * // Get one Transactions
     * const transactions = await prisma.transactions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends transactionsFindFirstArgs>(args?: SelectSubset<T, transactionsFindFirstArgs<ExtArgs>>): Prisma__transactionsClient<$Result.GetResult<Prisma.$transactionsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Transactions that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transactionsFindFirstOrThrowArgs} args - Arguments to find a Transactions
     * @example
     * // Get one Transactions
     * const transactions = await prisma.transactions.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends transactionsFindFirstOrThrowArgs>(args?: SelectSubset<T, transactionsFindFirstOrThrowArgs<ExtArgs>>): Prisma__transactionsClient<$Result.GetResult<Prisma.$transactionsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Transactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transactionsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Transactions
     * const transactions = await prisma.transactions.findMany()
     * 
     * // Get first 10 Transactions
     * const transactions = await prisma.transactions.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const transactionsWithIdOnly = await prisma.transactions.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends transactionsFindManyArgs>(args?: SelectSubset<T, transactionsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$transactionsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Transactions.
     * @param {transactionsCreateArgs} args - Arguments to create a Transactions.
     * @example
     * // Create one Transactions
     * const Transactions = await prisma.transactions.create({
     *   data: {
     *     // ... data to create a Transactions
     *   }
     * })
     * 
     */
    create<T extends transactionsCreateArgs>(args: SelectSubset<T, transactionsCreateArgs<ExtArgs>>): Prisma__transactionsClient<$Result.GetResult<Prisma.$transactionsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Transactions.
     * @param {transactionsCreateManyArgs} args - Arguments to create many Transactions.
     * @example
     * // Create many Transactions
     * const transactions = await prisma.transactions.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends transactionsCreateManyArgs>(args?: SelectSubset<T, transactionsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Transactions and returns the data saved in the database.
     * @param {transactionsCreateManyAndReturnArgs} args - Arguments to create many Transactions.
     * @example
     * // Create many Transactions
     * const transactions = await prisma.transactions.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Transactions and only return the `id`
     * const transactionsWithIdOnly = await prisma.transactions.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends transactionsCreateManyAndReturnArgs>(args?: SelectSubset<T, transactionsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$transactionsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Transactions.
     * @param {transactionsDeleteArgs} args - Arguments to delete one Transactions.
     * @example
     * // Delete one Transactions
     * const Transactions = await prisma.transactions.delete({
     *   where: {
     *     // ... filter to delete one Transactions
     *   }
     * })
     * 
     */
    delete<T extends transactionsDeleteArgs>(args: SelectSubset<T, transactionsDeleteArgs<ExtArgs>>): Prisma__transactionsClient<$Result.GetResult<Prisma.$transactionsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Transactions.
     * @param {transactionsUpdateArgs} args - Arguments to update one Transactions.
     * @example
     * // Update one Transactions
     * const transactions = await prisma.transactions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends transactionsUpdateArgs>(args: SelectSubset<T, transactionsUpdateArgs<ExtArgs>>): Prisma__transactionsClient<$Result.GetResult<Prisma.$transactionsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Transactions.
     * @param {transactionsDeleteManyArgs} args - Arguments to filter Transactions to delete.
     * @example
     * // Delete a few Transactions
     * const { count } = await prisma.transactions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends transactionsDeleteManyArgs>(args?: SelectSubset<T, transactionsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transactionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Transactions
     * const transactions = await prisma.transactions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends transactionsUpdateManyArgs>(args: SelectSubset<T, transactionsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Transactions.
     * @param {transactionsUpsertArgs} args - Arguments to update or create a Transactions.
     * @example
     * // Update or create a Transactions
     * const transactions = await prisma.transactions.upsert({
     *   create: {
     *     // ... data to create a Transactions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Transactions we want to update
     *   }
     * })
     */
    upsert<T extends transactionsUpsertArgs>(args: SelectSubset<T, transactionsUpsertArgs<ExtArgs>>): Prisma__transactionsClient<$Result.GetResult<Prisma.$transactionsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transactionsCountArgs} args - Arguments to filter Transactions to count.
     * @example
     * // Count the number of Transactions
     * const count = await prisma.transactions.count({
     *   where: {
     *     // ... the filter for the Transactions we want to count
     *   }
     * })
    **/
    count<T extends transactionsCountArgs>(
      args?: Subset<T, transactionsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TransactionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TransactionsAggregateArgs>(args: Subset<T, TransactionsAggregateArgs>): Prisma.PrismaPromise<GetTransactionsAggregateType<T>>

    /**
     * Group by Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transactionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends transactionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: transactionsGroupByArgs['orderBy'] }
        : { orderBy?: transactionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, transactionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransactionsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the transactions model
   */
  readonly fields: transactionsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for transactions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__transactionsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    annonce<T extends annoncesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, annoncesDefaultArgs<ExtArgs>>): Prisma__annoncesClient<$Result.GetResult<Prisma.$annoncesPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, userDefaultArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the transactions model
   */ 
  interface transactionsFieldRefs {
    readonly id: FieldRef<"transactions", 'Int'>
    readonly dateRange: FieldRef<"transactions", 'Json'>
    readonly price: FieldRef<"transactions", 'Decimal'>
    readonly quantity: FieldRef<"transactions", 'Int'>
    readonly status: FieldRef<"transactions", 'transactionStatus'>
    readonly createdAt: FieldRef<"transactions", 'DateTime'>
    readonly updatedAt: FieldRef<"transactions", 'DateTime'>
    readonly annonceId: FieldRef<"transactions", 'Int'>
    readonly userId: FieldRef<"transactions", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * transactions findUnique
   */
  export type transactionsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactionsInclude<ExtArgs> | null
    /**
     * Filter, which transactions to fetch.
     */
    where: transactionsWhereUniqueInput
  }

  /**
   * transactions findUniqueOrThrow
   */
  export type transactionsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactionsInclude<ExtArgs> | null
    /**
     * Filter, which transactions to fetch.
     */
    where: transactionsWhereUniqueInput
  }

  /**
   * transactions findFirst
   */
  export type transactionsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactionsInclude<ExtArgs> | null
    /**
     * Filter, which transactions to fetch.
     */
    where?: transactionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of transactions to fetch.
     */
    orderBy?: transactionsOrderByWithRelationInput | transactionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for transactions.
     */
    cursor?: transactionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of transactions.
     */
    distinct?: TransactionsScalarFieldEnum | TransactionsScalarFieldEnum[]
  }

  /**
   * transactions findFirstOrThrow
   */
  export type transactionsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactionsInclude<ExtArgs> | null
    /**
     * Filter, which transactions to fetch.
     */
    where?: transactionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of transactions to fetch.
     */
    orderBy?: transactionsOrderByWithRelationInput | transactionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for transactions.
     */
    cursor?: transactionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of transactions.
     */
    distinct?: TransactionsScalarFieldEnum | TransactionsScalarFieldEnum[]
  }

  /**
   * transactions findMany
   */
  export type transactionsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactionsInclude<ExtArgs> | null
    /**
     * Filter, which transactions to fetch.
     */
    where?: transactionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of transactions to fetch.
     */
    orderBy?: transactionsOrderByWithRelationInput | transactionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing transactions.
     */
    cursor?: transactionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` transactions.
     */
    skip?: number
    distinct?: TransactionsScalarFieldEnum | TransactionsScalarFieldEnum[]
  }

  /**
   * transactions create
   */
  export type transactionsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactionsInclude<ExtArgs> | null
    /**
     * The data needed to create a transactions.
     */
    data: XOR<transactionsCreateInput, transactionsUncheckedCreateInput>
  }

  /**
   * transactions createMany
   */
  export type transactionsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many transactions.
     */
    data: transactionsCreateManyInput | transactionsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * transactions createManyAndReturn
   */
  export type transactionsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many transactions.
     */
    data: transactionsCreateManyInput | transactionsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactionsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * transactions update
   */
  export type transactionsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactionsInclude<ExtArgs> | null
    /**
     * The data needed to update a transactions.
     */
    data: XOR<transactionsUpdateInput, transactionsUncheckedUpdateInput>
    /**
     * Choose, which transactions to update.
     */
    where: transactionsWhereUniqueInput
  }

  /**
   * transactions updateMany
   */
  export type transactionsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update transactions.
     */
    data: XOR<transactionsUpdateManyMutationInput, transactionsUncheckedUpdateManyInput>
    /**
     * Filter which transactions to update
     */
    where?: transactionsWhereInput
  }

  /**
   * transactions upsert
   */
  export type transactionsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactionsInclude<ExtArgs> | null
    /**
     * The filter to search for the transactions to update in case it exists.
     */
    where: transactionsWhereUniqueInput
    /**
     * In case the transactions found by the `where` argument doesn't exist, create a new transactions with this data.
     */
    create: XOR<transactionsCreateInput, transactionsUncheckedCreateInput>
    /**
     * In case the transactions was found with the provided `where` argument, update it with this data.
     */
    update: XOR<transactionsUpdateInput, transactionsUncheckedUpdateInput>
  }

  /**
   * transactions delete
   */
  export type transactionsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactionsInclude<ExtArgs> | null
    /**
     * Filter which transactions to delete.
     */
    where: transactionsWhereUniqueInput
  }

  /**
   * transactions deleteMany
   */
  export type transactionsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which transactions to delete
     */
    where?: transactionsWhereInput
  }

  /**
   * transactions without action
   */
  export type transactionsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactionsInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const NewsletterScalarFieldEnum: {
    id: 'id',
    email: 'email',
    unsubscribeToken: 'unsubscribeToken'
  };

  export type NewsletterScalarFieldEnum = (typeof NewsletterScalarFieldEnum)[keyof typeof NewsletterScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    nom: 'nom',
    prenom: 'prenom',
    email: 'email',
    phone: 'phone',
    hashPassword: 'hashPassword',
    statutUser: 'statutUser',
    role: 'role',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    companyId: 'companyId',
    stripeAccountId: 'stripeAccountId',
    stripeAccountCompleted: 'stripeAccountCompleted'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const CompanyScalarFieldEnum: {
    id: 'id',
    siret: 'siret',
    nomSociete: 'nomSociete',
    codePostal: 'codePostal',
    adresse: 'adresse',
    ville: 'ville',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    secteurActivite: 'secteurActivite',
    typeSociete: 'typeSociete'
  };

  export type CompanyScalarFieldEnum = (typeof CompanyScalarFieldEnum)[keyof typeof CompanyScalarFieldEnum]


  export const ProfileImageScalarFieldEnum: {
    id: 'id',
    path: 'path',
    userId: 'userId'
  };

  export type ProfileImageScalarFieldEnum = (typeof ProfileImageScalarFieldEnum)[keyof typeof ProfileImageScalarFieldEnum]


  export const FavorisScalarFieldEnum: {
    id: 'id',
    saveDate: 'saveDate',
    userId: 'userId',
    annonceId: 'annonceId'
  };

  export type FavorisScalarFieldEnum = (typeof FavorisScalarFieldEnum)[keyof typeof FavorisScalarFieldEnum]


  export const AnnoncesScalarFieldEnum: {
    id: 'id',
    titre: 'titre',
    description: 'description',
    prix: 'prix',
    typeTarif: 'typeTarif',
    priority: 'priority',
    localisation: 'localisation',
    adresse: 'adresse',
    statut: 'statut',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    categorieAnnonce: 'categorieAnnonce',
    sousCategorie: 'sousCategorie',
    userId: 'userId',
    priceId: 'priceId'
  };

  export type AnnoncesScalarFieldEnum = (typeof AnnoncesScalarFieldEnum)[keyof typeof AnnoncesScalarFieldEnum]


  export const ImageAnnonceScalarFieldEnum: {
    id: 'id',
    path: 'path',
    annoncesId: 'annoncesId'
  };

  export type ImageAnnonceScalarFieldEnum = (typeof ImageAnnonceScalarFieldEnum)[keyof typeof ImageAnnonceScalarFieldEnum]


  export const CommentaireScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    commentaire: 'commentaire',
    note: 'note',
    annoncesId: 'annoncesId',
    userId: 'userId'
  };

  export type CommentaireScalarFieldEnum = (typeof CommentaireScalarFieldEnum)[keyof typeof CommentaireScalarFieldEnum]


  export const TemoignagesScalarFieldEnum: {
    id: 'id',
    temoignage: 'temoignage',
    noteLilee: 'noteLilee',
    ville: 'ville',
    pays: 'pays',
    userId: 'userId'
  };

  export type TemoignagesScalarFieldEnum = (typeof TemoignagesScalarFieldEnum)[keyof typeof TemoignagesScalarFieldEnum]


  export const AdresseFacturationScalarFieldEnum: {
    id: 'id',
    nom: 'nom',
    adresse: 'adresse',
    codePostal: 'codePostal',
    ville: 'ville',
    pays: 'pays',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId'
  };

  export type AdresseFacturationScalarFieldEnum = (typeof AdresseFacturationScalarFieldEnum)[keyof typeof AdresseFacturationScalarFieldEnum]


  export const EngagementScalarFieldEnum: {
    id: 'id',
    nom: 'nom',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    statutPartenaire: 'statutPartenaire',
    siteWeb: 'siteWeb',
    adresse: 'adresse',
    email: 'email',
    phone: 'phone',
    facebook: 'facebook',
    instagram: 'instagram',
    twitter: 'twitter',
    linkedin: 'linkedin',
    tikTok: 'tikTok',
    youtube: 'youtube',
    duree: 'duree',
    description: 'description'
  };

  export type EngagementScalarFieldEnum = (typeof EngagementScalarFieldEnum)[keyof typeof EngagementScalarFieldEnum]


  export const ContenuPartenaireScalarFieldEnum: {
    id: 'id',
    path: 'path',
    engagementId: 'engagementId'
  };

  export type ContenuPartenaireScalarFieldEnum = (typeof ContenuPartenaireScalarFieldEnum)[keyof typeof ContenuPartenaireScalarFieldEnum]


  export const LogoScalarFieldEnum: {
    id: 'id',
    path: 'path',
    engagementId: 'engagementId'
  };

  export type LogoScalarFieldEnum = (typeof LogoScalarFieldEnum)[keyof typeof LogoScalarFieldEnum]


  export const ArticleScalarFieldEnum: {
    id: 'id',
    titre: 'titre',
    contenu: 'contenu',
    categorieArticle: 'categorieArticle',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ArticleScalarFieldEnum = (typeof ArticleScalarFieldEnum)[keyof typeof ArticleScalarFieldEnum]


  export const ImageScalarFieldEnum: {
    id: 'id',
    path: 'path',
    articleId: 'articleId'
  };

  export type ImageScalarFieldEnum = (typeof ImageScalarFieldEnum)[keyof typeof ImageScalarFieldEnum]


  export const TransactionsScalarFieldEnum: {
    id: 'id',
    dateRange: 'dateRange',
    price: 'price',
    quantity: 'quantity',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    annonceId: 'annonceId',
    userId: 'userId'
  };

  export type TransactionsScalarFieldEnum = (typeof TransactionsScalarFieldEnum)[keyof typeof TransactionsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'statutUser'
   */
  export type EnumstatutUserFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'statutUser'>
    


  /**
   * Reference to a field of type 'statutUser[]'
   */
  export type ListEnumstatutUserFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'statutUser[]'>
    


  /**
   * Reference to a field of type 'role'
   */
  export type EnumroleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'role'>
    


  /**
   * Reference to a field of type 'role[]'
   */
  export type ListEnumroleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'role[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'secteurActivite'
   */
  export type EnumsecteurActiviteFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'secteurActivite'>
    


  /**
   * Reference to a field of type 'secteurActivite[]'
   */
  export type ListEnumsecteurActiviteFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'secteurActivite[]'>
    


  /**
   * Reference to a field of type 'typeSociete'
   */
  export type EnumtypeSocieteFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'typeSociete'>
    


  /**
   * Reference to a field of type 'typeSociete[]'
   */
  export type ListEnumtypeSocieteFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'typeSociete[]'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'typeTarif'
   */
  export type EnumtypeTarifFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'typeTarif'>
    


  /**
   * Reference to a field of type 'typeTarif[]'
   */
  export type ListEnumtypeTarifFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'typeTarif[]'>
    


  /**
   * Reference to a field of type 'priority'
   */
  export type EnumpriorityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'priority'>
    


  /**
   * Reference to a field of type 'priority[]'
   */
  export type ListEnumpriorityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'priority[]'>
    


  /**
   * Reference to a field of type 'statut'
   */
  export type EnumstatutFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'statut'>
    


  /**
   * Reference to a field of type 'statut[]'
   */
  export type ListEnumstatutFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'statut[]'>
    


  /**
   * Reference to a field of type 'categorieAnnonce'
   */
  export type EnumcategorieAnnonceFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'categorieAnnonce'>
    


  /**
   * Reference to a field of type 'categorieAnnonce[]'
   */
  export type ListEnumcategorieAnnonceFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'categorieAnnonce[]'>
    


  /**
   * Reference to a field of type 'statutPartenaire'
   */
  export type EnumstatutPartenaireFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'statutPartenaire'>
    


  /**
   * Reference to a field of type 'statutPartenaire[]'
   */
  export type ListEnumstatutPartenaireFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'statutPartenaire[]'>
    


  /**
   * Reference to a field of type 'duree'
   */
  export type EnumdureeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'duree'>
    


  /**
   * Reference to a field of type 'duree[]'
   */
  export type ListEnumdureeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'duree[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'transactionStatus'
   */
  export type EnumtransactionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'transactionStatus'>
    


  /**
   * Reference to a field of type 'transactionStatus[]'
   */
  export type ListEnumtransactionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'transactionStatus[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type newsletterWhereInput = {
    AND?: newsletterWhereInput | newsletterWhereInput[]
    OR?: newsletterWhereInput[]
    NOT?: newsletterWhereInput | newsletterWhereInput[]
    id?: IntFilter<"newsletter"> | number
    email?: StringFilter<"newsletter"> | string
    unsubscribeToken?: StringNullableFilter<"newsletter"> | string | null
  }

  export type newsletterOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    unsubscribeToken?: SortOrderInput | SortOrder
  }

  export type newsletterWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: newsletterWhereInput | newsletterWhereInput[]
    OR?: newsletterWhereInput[]
    NOT?: newsletterWhereInput | newsletterWhereInput[]
    unsubscribeToken?: StringNullableFilter<"newsletter"> | string | null
  }, "id" | "email">

  export type newsletterOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    unsubscribeToken?: SortOrderInput | SortOrder
    _count?: newsletterCountOrderByAggregateInput
    _avg?: newsletterAvgOrderByAggregateInput
    _max?: newsletterMaxOrderByAggregateInput
    _min?: newsletterMinOrderByAggregateInput
    _sum?: newsletterSumOrderByAggregateInput
  }

  export type newsletterScalarWhereWithAggregatesInput = {
    AND?: newsletterScalarWhereWithAggregatesInput | newsletterScalarWhereWithAggregatesInput[]
    OR?: newsletterScalarWhereWithAggregatesInput[]
    NOT?: newsletterScalarWhereWithAggregatesInput | newsletterScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"newsletter"> | number
    email?: StringWithAggregatesFilter<"newsletter"> | string
    unsubscribeToken?: StringNullableWithAggregatesFilter<"newsletter"> | string | null
  }

  export type userWhereInput = {
    AND?: userWhereInput | userWhereInput[]
    OR?: userWhereInput[]
    NOT?: userWhereInput | userWhereInput[]
    id?: IntFilter<"user"> | number
    nom?: StringFilter<"user"> | string
    prenom?: StringFilter<"user"> | string
    email?: StringFilter<"user"> | string
    phone?: StringFilter<"user"> | string
    hashPassword?: StringFilter<"user"> | string
    statutUser?: EnumstatutUserFilter<"user"> | $Enums.statutUser
    role?: EnumroleFilter<"user"> | $Enums.role
    createdAt?: DateTimeFilter<"user"> | Date | string
    updatedAt?: DateTimeFilter<"user"> | Date | string
    companyId?: IntNullableFilter<"user"> | number | null
    stripeAccountId?: StringNullableFilter<"user"> | string | null
    stripeAccountCompleted?: BoolFilter<"user"> | boolean
    profileImages?: ProfileImageListRelationFilter
    company?: XOR<CompanyNullableScalarRelationFilter, companyWhereInput> | null
    annonces?: AnnoncesListRelationFilter
    commentaire?: CommentaireListRelationFilter
    favoris?: FavorisListRelationFilter
    temoignages?: TemoignagesListRelationFilter
    transactions?: TransactionsListRelationFilter
    adresseFacturation?: AdresseFacturationListRelationFilter
  }

  export type userOrderByWithRelationInput = {
    id?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    hashPassword?: SortOrder
    statutUser?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    companyId?: SortOrderInput | SortOrder
    stripeAccountId?: SortOrderInput | SortOrder
    stripeAccountCompleted?: SortOrder
    profileImages?: profileImageOrderByRelationAggregateInput
    company?: companyOrderByWithRelationInput
    annonces?: annoncesOrderByRelationAggregateInput
    commentaire?: commentaireOrderByRelationAggregateInput
    favoris?: favorisOrderByRelationAggregateInput
    temoignages?: temoignagesOrderByRelationAggregateInput
    transactions?: transactionsOrderByRelationAggregateInput
    adresseFacturation?: adresseFacturationOrderByRelationAggregateInput
  }

  export type userWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    phone?: string
    AND?: userWhereInput | userWhereInput[]
    OR?: userWhereInput[]
    NOT?: userWhereInput | userWhereInput[]
    nom?: StringFilter<"user"> | string
    prenom?: StringFilter<"user"> | string
    hashPassword?: StringFilter<"user"> | string
    statutUser?: EnumstatutUserFilter<"user"> | $Enums.statutUser
    role?: EnumroleFilter<"user"> | $Enums.role
    createdAt?: DateTimeFilter<"user"> | Date | string
    updatedAt?: DateTimeFilter<"user"> | Date | string
    companyId?: IntNullableFilter<"user"> | number | null
    stripeAccountId?: StringNullableFilter<"user"> | string | null
    stripeAccountCompleted?: BoolFilter<"user"> | boolean
    profileImages?: ProfileImageListRelationFilter
    company?: XOR<CompanyNullableScalarRelationFilter, companyWhereInput> | null
    annonces?: AnnoncesListRelationFilter
    commentaire?: CommentaireListRelationFilter
    favoris?: FavorisListRelationFilter
    temoignages?: TemoignagesListRelationFilter
    transactions?: TransactionsListRelationFilter
    adresseFacturation?: AdresseFacturationListRelationFilter
  }, "id" | "email" | "phone">

  export type userOrderByWithAggregationInput = {
    id?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    hashPassword?: SortOrder
    statutUser?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    companyId?: SortOrderInput | SortOrder
    stripeAccountId?: SortOrderInput | SortOrder
    stripeAccountCompleted?: SortOrder
    _count?: userCountOrderByAggregateInput
    _avg?: userAvgOrderByAggregateInput
    _max?: userMaxOrderByAggregateInput
    _min?: userMinOrderByAggregateInput
    _sum?: userSumOrderByAggregateInput
  }

  export type userScalarWhereWithAggregatesInput = {
    AND?: userScalarWhereWithAggregatesInput | userScalarWhereWithAggregatesInput[]
    OR?: userScalarWhereWithAggregatesInput[]
    NOT?: userScalarWhereWithAggregatesInput | userScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"user"> | number
    nom?: StringWithAggregatesFilter<"user"> | string
    prenom?: StringWithAggregatesFilter<"user"> | string
    email?: StringWithAggregatesFilter<"user"> | string
    phone?: StringWithAggregatesFilter<"user"> | string
    hashPassword?: StringWithAggregatesFilter<"user"> | string
    statutUser?: EnumstatutUserWithAggregatesFilter<"user"> | $Enums.statutUser
    role?: EnumroleWithAggregatesFilter<"user"> | $Enums.role
    createdAt?: DateTimeWithAggregatesFilter<"user"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"user"> | Date | string
    companyId?: IntNullableWithAggregatesFilter<"user"> | number | null
    stripeAccountId?: StringNullableWithAggregatesFilter<"user"> | string | null
    stripeAccountCompleted?: BoolWithAggregatesFilter<"user"> | boolean
  }

  export type companyWhereInput = {
    AND?: companyWhereInput | companyWhereInput[]
    OR?: companyWhereInput[]
    NOT?: companyWhereInput | companyWhereInput[]
    id?: IntFilter<"company"> | number
    siret?: StringFilter<"company"> | string
    nomSociete?: StringFilter<"company"> | string
    codePostal?: StringFilter<"company"> | string
    adresse?: StringFilter<"company"> | string
    ville?: StringFilter<"company"> | string
    createdAt?: DateTimeFilter<"company"> | Date | string
    updatedAt?: DateTimeFilter<"company"> | Date | string
    secteurActivite?: EnumsecteurActiviteFilter<"company"> | $Enums.secteurActivite
    typeSociete?: EnumtypeSocieteFilter<"company"> | $Enums.typeSociete
    users?: UserListRelationFilter
  }

  export type companyOrderByWithRelationInput = {
    id?: SortOrder
    siret?: SortOrder
    nomSociete?: SortOrder
    codePostal?: SortOrder
    adresse?: SortOrder
    ville?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    secteurActivite?: SortOrder
    typeSociete?: SortOrder
    users?: userOrderByRelationAggregateInput
  }

  export type companyWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    siret?: string
    nomSociete?: string
    AND?: companyWhereInput | companyWhereInput[]
    OR?: companyWhereInput[]
    NOT?: companyWhereInput | companyWhereInput[]
    codePostal?: StringFilter<"company"> | string
    adresse?: StringFilter<"company"> | string
    ville?: StringFilter<"company"> | string
    createdAt?: DateTimeFilter<"company"> | Date | string
    updatedAt?: DateTimeFilter<"company"> | Date | string
    secteurActivite?: EnumsecteurActiviteFilter<"company"> | $Enums.secteurActivite
    typeSociete?: EnumtypeSocieteFilter<"company"> | $Enums.typeSociete
    users?: UserListRelationFilter
  }, "id" | "siret" | "nomSociete">

  export type companyOrderByWithAggregationInput = {
    id?: SortOrder
    siret?: SortOrder
    nomSociete?: SortOrder
    codePostal?: SortOrder
    adresse?: SortOrder
    ville?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    secteurActivite?: SortOrder
    typeSociete?: SortOrder
    _count?: companyCountOrderByAggregateInput
    _avg?: companyAvgOrderByAggregateInput
    _max?: companyMaxOrderByAggregateInput
    _min?: companyMinOrderByAggregateInput
    _sum?: companySumOrderByAggregateInput
  }

  export type companyScalarWhereWithAggregatesInput = {
    AND?: companyScalarWhereWithAggregatesInput | companyScalarWhereWithAggregatesInput[]
    OR?: companyScalarWhereWithAggregatesInput[]
    NOT?: companyScalarWhereWithAggregatesInput | companyScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"company"> | number
    siret?: StringWithAggregatesFilter<"company"> | string
    nomSociete?: StringWithAggregatesFilter<"company"> | string
    codePostal?: StringWithAggregatesFilter<"company"> | string
    adresse?: StringWithAggregatesFilter<"company"> | string
    ville?: StringWithAggregatesFilter<"company"> | string
    createdAt?: DateTimeWithAggregatesFilter<"company"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"company"> | Date | string
    secteurActivite?: EnumsecteurActiviteWithAggregatesFilter<"company"> | $Enums.secteurActivite
    typeSociete?: EnumtypeSocieteWithAggregatesFilter<"company"> | $Enums.typeSociete
  }

  export type profileImageWhereInput = {
    AND?: profileImageWhereInput | profileImageWhereInput[]
    OR?: profileImageWhereInput[]
    NOT?: profileImageWhereInput | profileImageWhereInput[]
    id?: IntFilter<"profileImage"> | number
    path?: StringFilter<"profileImage"> | string
    userId?: IntFilter<"profileImage"> | number
    user?: XOR<UserScalarRelationFilter, userWhereInput>
  }

  export type profileImageOrderByWithRelationInput = {
    id?: SortOrder
    path?: SortOrder
    userId?: SortOrder
    user?: userOrderByWithRelationInput
  }

  export type profileImageWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: profileImageWhereInput | profileImageWhereInput[]
    OR?: profileImageWhereInput[]
    NOT?: profileImageWhereInput | profileImageWhereInput[]
    path?: StringFilter<"profileImage"> | string
    userId?: IntFilter<"profileImage"> | number
    user?: XOR<UserScalarRelationFilter, userWhereInput>
  }, "id">

  export type profileImageOrderByWithAggregationInput = {
    id?: SortOrder
    path?: SortOrder
    userId?: SortOrder
    _count?: profileImageCountOrderByAggregateInput
    _avg?: profileImageAvgOrderByAggregateInput
    _max?: profileImageMaxOrderByAggregateInput
    _min?: profileImageMinOrderByAggregateInput
    _sum?: profileImageSumOrderByAggregateInput
  }

  export type profileImageScalarWhereWithAggregatesInput = {
    AND?: profileImageScalarWhereWithAggregatesInput | profileImageScalarWhereWithAggregatesInput[]
    OR?: profileImageScalarWhereWithAggregatesInput[]
    NOT?: profileImageScalarWhereWithAggregatesInput | profileImageScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"profileImage"> | number
    path?: StringWithAggregatesFilter<"profileImage"> | string
    userId?: IntWithAggregatesFilter<"profileImage"> | number
  }

  export type favorisWhereInput = {
    AND?: favorisWhereInput | favorisWhereInput[]
    OR?: favorisWhereInput[]
    NOT?: favorisWhereInput | favorisWhereInput[]
    id?: IntFilter<"favoris"> | number
    saveDate?: DateTimeFilter<"favoris"> | Date | string
    userId?: IntFilter<"favoris"> | number
    annonceId?: IntFilter<"favoris"> | number
    user?: XOR<UserScalarRelationFilter, userWhereInput>
    annonce?: XOR<AnnoncesScalarRelationFilter, annoncesWhereInput>
  }

  export type favorisOrderByWithRelationInput = {
    id?: SortOrder
    saveDate?: SortOrder
    userId?: SortOrder
    annonceId?: SortOrder
    user?: userOrderByWithRelationInput
    annonce?: annoncesOrderByWithRelationInput
  }

  export type favorisWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: favorisWhereInput | favorisWhereInput[]
    OR?: favorisWhereInput[]
    NOT?: favorisWhereInput | favorisWhereInput[]
    saveDate?: DateTimeFilter<"favoris"> | Date | string
    userId?: IntFilter<"favoris"> | number
    annonceId?: IntFilter<"favoris"> | number
    user?: XOR<UserScalarRelationFilter, userWhereInput>
    annonce?: XOR<AnnoncesScalarRelationFilter, annoncesWhereInput>
  }, "id">

  export type favorisOrderByWithAggregationInput = {
    id?: SortOrder
    saveDate?: SortOrder
    userId?: SortOrder
    annonceId?: SortOrder
    _count?: favorisCountOrderByAggregateInput
    _avg?: favorisAvgOrderByAggregateInput
    _max?: favorisMaxOrderByAggregateInput
    _min?: favorisMinOrderByAggregateInput
    _sum?: favorisSumOrderByAggregateInput
  }

  export type favorisScalarWhereWithAggregatesInput = {
    AND?: favorisScalarWhereWithAggregatesInput | favorisScalarWhereWithAggregatesInput[]
    OR?: favorisScalarWhereWithAggregatesInput[]
    NOT?: favorisScalarWhereWithAggregatesInput | favorisScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"favoris"> | number
    saveDate?: DateTimeWithAggregatesFilter<"favoris"> | Date | string
    userId?: IntWithAggregatesFilter<"favoris"> | number
    annonceId?: IntWithAggregatesFilter<"favoris"> | number
  }

  export type annoncesWhereInput = {
    AND?: annoncesWhereInput | annoncesWhereInput[]
    OR?: annoncesWhereInput[]
    NOT?: annoncesWhereInput | annoncesWhereInput[]
    id?: IntFilter<"annonces"> | number
    titre?: StringFilter<"annonces"> | string
    description?: StringFilter<"annonces"> | string
    prix?: DecimalNullableFilter<"annonces"> | Decimal | DecimalJsLike | number | string | null
    typeTarif?: EnumtypeTarifNullableFilter<"annonces"> | $Enums.typeTarif | null
    priority?: EnumpriorityNullableFilter<"annonces"> | $Enums.priority | null
    localisation?: StringNullableFilter<"annonces"> | string | null
    adresse?: StringFilter<"annonces"> | string
    statut?: EnumstatutNullableFilter<"annonces"> | $Enums.statut | null
    createdAt?: DateTimeFilter<"annonces"> | Date | string
    updatedAt?: DateTimeFilter<"annonces"> | Date | string
    categorieAnnonce?: EnumcategorieAnnonceFilter<"annonces"> | $Enums.categorieAnnonce
    sousCategorie?: StringFilter<"annonces"> | string
    userId?: IntFilter<"annonces"> | number
    priceId?: StringNullableFilter<"annonces"> | string | null
    imageAnnonces?: ImageAnnonceListRelationFilter
    user?: XOR<UserScalarRelationFilter, userWhereInput>
    commentaire?: CommentaireListRelationFilter
    favoris?: FavorisListRelationFilter
    transactions?: TransactionsListRelationFilter
  }

  export type annoncesOrderByWithRelationInput = {
    id?: SortOrder
    titre?: SortOrder
    description?: SortOrder
    prix?: SortOrderInput | SortOrder
    typeTarif?: SortOrderInput | SortOrder
    priority?: SortOrderInput | SortOrder
    localisation?: SortOrderInput | SortOrder
    adresse?: SortOrder
    statut?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    categorieAnnonce?: SortOrder
    sousCategorie?: SortOrder
    userId?: SortOrder
    priceId?: SortOrderInput | SortOrder
    imageAnnonces?: imageAnnonceOrderByRelationAggregateInput
    user?: userOrderByWithRelationInput
    commentaire?: commentaireOrderByRelationAggregateInput
    favoris?: favorisOrderByRelationAggregateInput
    transactions?: transactionsOrderByRelationAggregateInput
  }

  export type annoncesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    titre?: string
    AND?: annoncesWhereInput | annoncesWhereInput[]
    OR?: annoncesWhereInput[]
    NOT?: annoncesWhereInput | annoncesWhereInput[]
    description?: StringFilter<"annonces"> | string
    prix?: DecimalNullableFilter<"annonces"> | Decimal | DecimalJsLike | number | string | null
    typeTarif?: EnumtypeTarifNullableFilter<"annonces"> | $Enums.typeTarif | null
    priority?: EnumpriorityNullableFilter<"annonces"> | $Enums.priority | null
    localisation?: StringNullableFilter<"annonces"> | string | null
    adresse?: StringFilter<"annonces"> | string
    statut?: EnumstatutNullableFilter<"annonces"> | $Enums.statut | null
    createdAt?: DateTimeFilter<"annonces"> | Date | string
    updatedAt?: DateTimeFilter<"annonces"> | Date | string
    categorieAnnonce?: EnumcategorieAnnonceFilter<"annonces"> | $Enums.categorieAnnonce
    sousCategorie?: StringFilter<"annonces"> | string
    userId?: IntFilter<"annonces"> | number
    priceId?: StringNullableFilter<"annonces"> | string | null
    imageAnnonces?: ImageAnnonceListRelationFilter
    user?: XOR<UserScalarRelationFilter, userWhereInput>
    commentaire?: CommentaireListRelationFilter
    favoris?: FavorisListRelationFilter
    transactions?: TransactionsListRelationFilter
  }, "id" | "titre">

  export type annoncesOrderByWithAggregationInput = {
    id?: SortOrder
    titre?: SortOrder
    description?: SortOrder
    prix?: SortOrderInput | SortOrder
    typeTarif?: SortOrderInput | SortOrder
    priority?: SortOrderInput | SortOrder
    localisation?: SortOrderInput | SortOrder
    adresse?: SortOrder
    statut?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    categorieAnnonce?: SortOrder
    sousCategorie?: SortOrder
    userId?: SortOrder
    priceId?: SortOrderInput | SortOrder
    _count?: annoncesCountOrderByAggregateInput
    _avg?: annoncesAvgOrderByAggregateInput
    _max?: annoncesMaxOrderByAggregateInput
    _min?: annoncesMinOrderByAggregateInput
    _sum?: annoncesSumOrderByAggregateInput
  }

  export type annoncesScalarWhereWithAggregatesInput = {
    AND?: annoncesScalarWhereWithAggregatesInput | annoncesScalarWhereWithAggregatesInput[]
    OR?: annoncesScalarWhereWithAggregatesInput[]
    NOT?: annoncesScalarWhereWithAggregatesInput | annoncesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"annonces"> | number
    titre?: StringWithAggregatesFilter<"annonces"> | string
    description?: StringWithAggregatesFilter<"annonces"> | string
    prix?: DecimalNullableWithAggregatesFilter<"annonces"> | Decimal | DecimalJsLike | number | string | null
    typeTarif?: EnumtypeTarifNullableWithAggregatesFilter<"annonces"> | $Enums.typeTarif | null
    priority?: EnumpriorityNullableWithAggregatesFilter<"annonces"> | $Enums.priority | null
    localisation?: StringNullableWithAggregatesFilter<"annonces"> | string | null
    adresse?: StringWithAggregatesFilter<"annonces"> | string
    statut?: EnumstatutNullableWithAggregatesFilter<"annonces"> | $Enums.statut | null
    createdAt?: DateTimeWithAggregatesFilter<"annonces"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"annonces"> | Date | string
    categorieAnnonce?: EnumcategorieAnnonceWithAggregatesFilter<"annonces"> | $Enums.categorieAnnonce
    sousCategorie?: StringWithAggregatesFilter<"annonces"> | string
    userId?: IntWithAggregatesFilter<"annonces"> | number
    priceId?: StringNullableWithAggregatesFilter<"annonces"> | string | null
  }

  export type imageAnnonceWhereInput = {
    AND?: imageAnnonceWhereInput | imageAnnonceWhereInput[]
    OR?: imageAnnonceWhereInput[]
    NOT?: imageAnnonceWhereInput | imageAnnonceWhereInput[]
    id?: IntFilter<"imageAnnonce"> | number
    path?: StringFilter<"imageAnnonce"> | string
    annoncesId?: IntFilter<"imageAnnonce"> | number
    annonces?: XOR<AnnoncesScalarRelationFilter, annoncesWhereInput>
  }

  export type imageAnnonceOrderByWithRelationInput = {
    id?: SortOrder
    path?: SortOrder
    annoncesId?: SortOrder
    annonces?: annoncesOrderByWithRelationInput
  }

  export type imageAnnonceWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: imageAnnonceWhereInput | imageAnnonceWhereInput[]
    OR?: imageAnnonceWhereInput[]
    NOT?: imageAnnonceWhereInput | imageAnnonceWhereInput[]
    path?: StringFilter<"imageAnnonce"> | string
    annoncesId?: IntFilter<"imageAnnonce"> | number
    annonces?: XOR<AnnoncesScalarRelationFilter, annoncesWhereInput>
  }, "id">

  export type imageAnnonceOrderByWithAggregationInput = {
    id?: SortOrder
    path?: SortOrder
    annoncesId?: SortOrder
    _count?: imageAnnonceCountOrderByAggregateInput
    _avg?: imageAnnonceAvgOrderByAggregateInput
    _max?: imageAnnonceMaxOrderByAggregateInput
    _min?: imageAnnonceMinOrderByAggregateInput
    _sum?: imageAnnonceSumOrderByAggregateInput
  }

  export type imageAnnonceScalarWhereWithAggregatesInput = {
    AND?: imageAnnonceScalarWhereWithAggregatesInput | imageAnnonceScalarWhereWithAggregatesInput[]
    OR?: imageAnnonceScalarWhereWithAggregatesInput[]
    NOT?: imageAnnonceScalarWhereWithAggregatesInput | imageAnnonceScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"imageAnnonce"> | number
    path?: StringWithAggregatesFilter<"imageAnnonce"> | string
    annoncesId?: IntWithAggregatesFilter<"imageAnnonce"> | number
  }

  export type commentaireWhereInput = {
    AND?: commentaireWhereInput | commentaireWhereInput[]
    OR?: commentaireWhereInput[]
    NOT?: commentaireWhereInput | commentaireWhereInput[]
    id?: IntFilter<"commentaire"> | number
    createdAt?: DateTimeFilter<"commentaire"> | Date | string
    updatedAt?: DateTimeFilter<"commentaire"> | Date | string
    commentaire?: StringFilter<"commentaire"> | string
    note?: IntNullableFilter<"commentaire"> | number | null
    annoncesId?: IntFilter<"commentaire"> | number
    userId?: IntFilter<"commentaire"> | number
    annonces?: XOR<AnnoncesScalarRelationFilter, annoncesWhereInput>
    user?: XOR<UserScalarRelationFilter, userWhereInput>
  }

  export type commentaireOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    commentaire?: SortOrder
    note?: SortOrderInput | SortOrder
    annoncesId?: SortOrder
    userId?: SortOrder
    annonces?: annoncesOrderByWithRelationInput
    user?: userOrderByWithRelationInput
  }

  export type commentaireWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: commentaireWhereInput | commentaireWhereInput[]
    OR?: commentaireWhereInput[]
    NOT?: commentaireWhereInput | commentaireWhereInput[]
    createdAt?: DateTimeFilter<"commentaire"> | Date | string
    updatedAt?: DateTimeFilter<"commentaire"> | Date | string
    commentaire?: StringFilter<"commentaire"> | string
    note?: IntNullableFilter<"commentaire"> | number | null
    annoncesId?: IntFilter<"commentaire"> | number
    userId?: IntFilter<"commentaire"> | number
    annonces?: XOR<AnnoncesScalarRelationFilter, annoncesWhereInput>
    user?: XOR<UserScalarRelationFilter, userWhereInput>
  }, "id">

  export type commentaireOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    commentaire?: SortOrder
    note?: SortOrderInput | SortOrder
    annoncesId?: SortOrder
    userId?: SortOrder
    _count?: commentaireCountOrderByAggregateInput
    _avg?: commentaireAvgOrderByAggregateInput
    _max?: commentaireMaxOrderByAggregateInput
    _min?: commentaireMinOrderByAggregateInput
    _sum?: commentaireSumOrderByAggregateInput
  }

  export type commentaireScalarWhereWithAggregatesInput = {
    AND?: commentaireScalarWhereWithAggregatesInput | commentaireScalarWhereWithAggregatesInput[]
    OR?: commentaireScalarWhereWithAggregatesInput[]
    NOT?: commentaireScalarWhereWithAggregatesInput | commentaireScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"commentaire"> | number
    createdAt?: DateTimeWithAggregatesFilter<"commentaire"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"commentaire"> | Date | string
    commentaire?: StringWithAggregatesFilter<"commentaire"> | string
    note?: IntNullableWithAggregatesFilter<"commentaire"> | number | null
    annoncesId?: IntWithAggregatesFilter<"commentaire"> | number
    userId?: IntWithAggregatesFilter<"commentaire"> | number
  }

  export type temoignagesWhereInput = {
    AND?: temoignagesWhereInput | temoignagesWhereInput[]
    OR?: temoignagesWhereInput[]
    NOT?: temoignagesWhereInput | temoignagesWhereInput[]
    id?: IntFilter<"temoignages"> | number
    temoignage?: StringFilter<"temoignages"> | string
    noteLilee?: IntFilter<"temoignages"> | number
    ville?: StringNullableFilter<"temoignages"> | string | null
    pays?: StringNullableFilter<"temoignages"> | string | null
    userId?: IntFilter<"temoignages"> | number
    user?: XOR<UserScalarRelationFilter, userWhereInput>
  }

  export type temoignagesOrderByWithRelationInput = {
    id?: SortOrder
    temoignage?: SortOrder
    noteLilee?: SortOrder
    ville?: SortOrderInput | SortOrder
    pays?: SortOrderInput | SortOrder
    userId?: SortOrder
    user?: userOrderByWithRelationInput
  }

  export type temoignagesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: temoignagesWhereInput | temoignagesWhereInput[]
    OR?: temoignagesWhereInput[]
    NOT?: temoignagesWhereInput | temoignagesWhereInput[]
    temoignage?: StringFilter<"temoignages"> | string
    noteLilee?: IntFilter<"temoignages"> | number
    ville?: StringNullableFilter<"temoignages"> | string | null
    pays?: StringNullableFilter<"temoignages"> | string | null
    userId?: IntFilter<"temoignages"> | number
    user?: XOR<UserScalarRelationFilter, userWhereInput>
  }, "id">

  export type temoignagesOrderByWithAggregationInput = {
    id?: SortOrder
    temoignage?: SortOrder
    noteLilee?: SortOrder
    ville?: SortOrderInput | SortOrder
    pays?: SortOrderInput | SortOrder
    userId?: SortOrder
    _count?: temoignagesCountOrderByAggregateInput
    _avg?: temoignagesAvgOrderByAggregateInput
    _max?: temoignagesMaxOrderByAggregateInput
    _min?: temoignagesMinOrderByAggregateInput
    _sum?: temoignagesSumOrderByAggregateInput
  }

  export type temoignagesScalarWhereWithAggregatesInput = {
    AND?: temoignagesScalarWhereWithAggregatesInput | temoignagesScalarWhereWithAggregatesInput[]
    OR?: temoignagesScalarWhereWithAggregatesInput[]
    NOT?: temoignagesScalarWhereWithAggregatesInput | temoignagesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"temoignages"> | number
    temoignage?: StringWithAggregatesFilter<"temoignages"> | string
    noteLilee?: IntWithAggregatesFilter<"temoignages"> | number
    ville?: StringNullableWithAggregatesFilter<"temoignages"> | string | null
    pays?: StringNullableWithAggregatesFilter<"temoignages"> | string | null
    userId?: IntWithAggregatesFilter<"temoignages"> | number
  }

  export type adresseFacturationWhereInput = {
    AND?: adresseFacturationWhereInput | adresseFacturationWhereInput[]
    OR?: adresseFacturationWhereInput[]
    NOT?: adresseFacturationWhereInput | adresseFacturationWhereInput[]
    id?: IntFilter<"adresseFacturation"> | number
    nom?: StringFilter<"adresseFacturation"> | string
    adresse?: StringFilter<"adresseFacturation"> | string
    codePostal?: StringFilter<"adresseFacturation"> | string
    ville?: StringFilter<"adresseFacturation"> | string
    pays?: StringFilter<"adresseFacturation"> | string
    createdAt?: DateTimeFilter<"adresseFacturation"> | Date | string
    updatedAt?: DateTimeFilter<"adresseFacturation"> | Date | string
    userId?: IntFilter<"adresseFacturation"> | number
    user?: XOR<UserScalarRelationFilter, userWhereInput>
  }

  export type adresseFacturationOrderByWithRelationInput = {
    id?: SortOrder
    nom?: SortOrder
    adresse?: SortOrder
    codePostal?: SortOrder
    ville?: SortOrder
    pays?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    user?: userOrderByWithRelationInput
  }

  export type adresseFacturationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    nom?: string
    AND?: adresseFacturationWhereInput | adresseFacturationWhereInput[]
    OR?: adresseFacturationWhereInput[]
    NOT?: adresseFacturationWhereInput | adresseFacturationWhereInput[]
    adresse?: StringFilter<"adresseFacturation"> | string
    codePostal?: StringFilter<"adresseFacturation"> | string
    ville?: StringFilter<"adresseFacturation"> | string
    pays?: StringFilter<"adresseFacturation"> | string
    createdAt?: DateTimeFilter<"adresseFacturation"> | Date | string
    updatedAt?: DateTimeFilter<"adresseFacturation"> | Date | string
    userId?: IntFilter<"adresseFacturation"> | number
    user?: XOR<UserScalarRelationFilter, userWhereInput>
  }, "id" | "nom">

  export type adresseFacturationOrderByWithAggregationInput = {
    id?: SortOrder
    nom?: SortOrder
    adresse?: SortOrder
    codePostal?: SortOrder
    ville?: SortOrder
    pays?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    _count?: adresseFacturationCountOrderByAggregateInput
    _avg?: adresseFacturationAvgOrderByAggregateInput
    _max?: adresseFacturationMaxOrderByAggregateInput
    _min?: adresseFacturationMinOrderByAggregateInput
    _sum?: adresseFacturationSumOrderByAggregateInput
  }

  export type adresseFacturationScalarWhereWithAggregatesInput = {
    AND?: adresseFacturationScalarWhereWithAggregatesInput | adresseFacturationScalarWhereWithAggregatesInput[]
    OR?: adresseFacturationScalarWhereWithAggregatesInput[]
    NOT?: adresseFacturationScalarWhereWithAggregatesInput | adresseFacturationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"adresseFacturation"> | number
    nom?: StringWithAggregatesFilter<"adresseFacturation"> | string
    adresse?: StringWithAggregatesFilter<"adresseFacturation"> | string
    codePostal?: StringWithAggregatesFilter<"adresseFacturation"> | string
    ville?: StringWithAggregatesFilter<"adresseFacturation"> | string
    pays?: StringWithAggregatesFilter<"adresseFacturation"> | string
    createdAt?: DateTimeWithAggregatesFilter<"adresseFacturation"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"adresseFacturation"> | Date | string
    userId?: IntWithAggregatesFilter<"adresseFacturation"> | number
  }

  export type engagementWhereInput = {
    AND?: engagementWhereInput | engagementWhereInput[]
    OR?: engagementWhereInput[]
    NOT?: engagementWhereInput | engagementWhereInput[]
    id?: IntFilter<"engagement"> | number
    nom?: StringFilter<"engagement"> | string
    createdAt?: DateTimeFilter<"engagement"> | Date | string
    updatedAt?: DateTimeFilter<"engagement"> | Date | string
    statutPartenaire?: EnumstatutPartenaireFilter<"engagement"> | $Enums.statutPartenaire
    siteWeb?: StringNullableFilter<"engagement"> | string | null
    adresse?: StringFilter<"engagement"> | string
    email?: StringFilter<"engagement"> | string
    phone?: StringFilter<"engagement"> | string
    facebook?: StringNullableFilter<"engagement"> | string | null
    instagram?: StringNullableFilter<"engagement"> | string | null
    twitter?: StringNullableFilter<"engagement"> | string | null
    linkedin?: StringNullableFilter<"engagement"> | string | null
    tikTok?: StringNullableFilter<"engagement"> | string | null
    youtube?: StringNullableFilter<"engagement"> | string | null
    duree?: EnumdureeFilter<"engagement"> | $Enums.duree
    description?: StringNullableFilter<"engagement"> | string | null
    logo?: LogoListRelationFilter
    contenuPartenaire?: ContenuPartenaireListRelationFilter
  }

  export type engagementOrderByWithRelationInput = {
    id?: SortOrder
    nom?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    statutPartenaire?: SortOrder
    siteWeb?: SortOrderInput | SortOrder
    adresse?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    facebook?: SortOrderInput | SortOrder
    instagram?: SortOrderInput | SortOrder
    twitter?: SortOrderInput | SortOrder
    linkedin?: SortOrderInput | SortOrder
    tikTok?: SortOrderInput | SortOrder
    youtube?: SortOrderInput | SortOrder
    duree?: SortOrder
    description?: SortOrderInput | SortOrder
    logo?: logoOrderByRelationAggregateInput
    contenuPartenaire?: contenuPartenaireOrderByRelationAggregateInput
  }

  export type engagementWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    nom?: string
    email?: string
    phone?: string
    AND?: engagementWhereInput | engagementWhereInput[]
    OR?: engagementWhereInput[]
    NOT?: engagementWhereInput | engagementWhereInput[]
    createdAt?: DateTimeFilter<"engagement"> | Date | string
    updatedAt?: DateTimeFilter<"engagement"> | Date | string
    statutPartenaire?: EnumstatutPartenaireFilter<"engagement"> | $Enums.statutPartenaire
    siteWeb?: StringNullableFilter<"engagement"> | string | null
    adresse?: StringFilter<"engagement"> | string
    facebook?: StringNullableFilter<"engagement"> | string | null
    instagram?: StringNullableFilter<"engagement"> | string | null
    twitter?: StringNullableFilter<"engagement"> | string | null
    linkedin?: StringNullableFilter<"engagement"> | string | null
    tikTok?: StringNullableFilter<"engagement"> | string | null
    youtube?: StringNullableFilter<"engagement"> | string | null
    duree?: EnumdureeFilter<"engagement"> | $Enums.duree
    description?: StringNullableFilter<"engagement"> | string | null
    logo?: LogoListRelationFilter
    contenuPartenaire?: ContenuPartenaireListRelationFilter
  }, "id" | "nom" | "email" | "phone">

  export type engagementOrderByWithAggregationInput = {
    id?: SortOrder
    nom?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    statutPartenaire?: SortOrder
    siteWeb?: SortOrderInput | SortOrder
    adresse?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    facebook?: SortOrderInput | SortOrder
    instagram?: SortOrderInput | SortOrder
    twitter?: SortOrderInput | SortOrder
    linkedin?: SortOrderInput | SortOrder
    tikTok?: SortOrderInput | SortOrder
    youtube?: SortOrderInput | SortOrder
    duree?: SortOrder
    description?: SortOrderInput | SortOrder
    _count?: engagementCountOrderByAggregateInput
    _avg?: engagementAvgOrderByAggregateInput
    _max?: engagementMaxOrderByAggregateInput
    _min?: engagementMinOrderByAggregateInput
    _sum?: engagementSumOrderByAggregateInput
  }

  export type engagementScalarWhereWithAggregatesInput = {
    AND?: engagementScalarWhereWithAggregatesInput | engagementScalarWhereWithAggregatesInput[]
    OR?: engagementScalarWhereWithAggregatesInput[]
    NOT?: engagementScalarWhereWithAggregatesInput | engagementScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"engagement"> | number
    nom?: StringWithAggregatesFilter<"engagement"> | string
    createdAt?: DateTimeWithAggregatesFilter<"engagement"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"engagement"> | Date | string
    statutPartenaire?: EnumstatutPartenaireWithAggregatesFilter<"engagement"> | $Enums.statutPartenaire
    siteWeb?: StringNullableWithAggregatesFilter<"engagement"> | string | null
    adresse?: StringWithAggregatesFilter<"engagement"> | string
    email?: StringWithAggregatesFilter<"engagement"> | string
    phone?: StringWithAggregatesFilter<"engagement"> | string
    facebook?: StringNullableWithAggregatesFilter<"engagement"> | string | null
    instagram?: StringNullableWithAggregatesFilter<"engagement"> | string | null
    twitter?: StringNullableWithAggregatesFilter<"engagement"> | string | null
    linkedin?: StringNullableWithAggregatesFilter<"engagement"> | string | null
    tikTok?: StringNullableWithAggregatesFilter<"engagement"> | string | null
    youtube?: StringNullableWithAggregatesFilter<"engagement"> | string | null
    duree?: EnumdureeWithAggregatesFilter<"engagement"> | $Enums.duree
    description?: StringNullableWithAggregatesFilter<"engagement"> | string | null
  }

  export type contenuPartenaireWhereInput = {
    AND?: contenuPartenaireWhereInput | contenuPartenaireWhereInput[]
    OR?: contenuPartenaireWhereInput[]
    NOT?: contenuPartenaireWhereInput | contenuPartenaireWhereInput[]
    id?: IntFilter<"contenuPartenaire"> | number
    path?: StringFilter<"contenuPartenaire"> | string
    engagementId?: IntFilter<"contenuPartenaire"> | number
    engagement?: XOR<EngagementScalarRelationFilter, engagementWhereInput>
  }

  export type contenuPartenaireOrderByWithRelationInput = {
    id?: SortOrder
    path?: SortOrder
    engagementId?: SortOrder
    engagement?: engagementOrderByWithRelationInput
  }

  export type contenuPartenaireWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: contenuPartenaireWhereInput | contenuPartenaireWhereInput[]
    OR?: contenuPartenaireWhereInput[]
    NOT?: contenuPartenaireWhereInput | contenuPartenaireWhereInput[]
    path?: StringFilter<"contenuPartenaire"> | string
    engagementId?: IntFilter<"contenuPartenaire"> | number
    engagement?: XOR<EngagementScalarRelationFilter, engagementWhereInput>
  }, "id">

  export type contenuPartenaireOrderByWithAggregationInput = {
    id?: SortOrder
    path?: SortOrder
    engagementId?: SortOrder
    _count?: contenuPartenaireCountOrderByAggregateInput
    _avg?: contenuPartenaireAvgOrderByAggregateInput
    _max?: contenuPartenaireMaxOrderByAggregateInput
    _min?: contenuPartenaireMinOrderByAggregateInput
    _sum?: contenuPartenaireSumOrderByAggregateInput
  }

  export type contenuPartenaireScalarWhereWithAggregatesInput = {
    AND?: contenuPartenaireScalarWhereWithAggregatesInput | contenuPartenaireScalarWhereWithAggregatesInput[]
    OR?: contenuPartenaireScalarWhereWithAggregatesInput[]
    NOT?: contenuPartenaireScalarWhereWithAggregatesInput | contenuPartenaireScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"contenuPartenaire"> | number
    path?: StringWithAggregatesFilter<"contenuPartenaire"> | string
    engagementId?: IntWithAggregatesFilter<"contenuPartenaire"> | number
  }

  export type logoWhereInput = {
    AND?: logoWhereInput | logoWhereInput[]
    OR?: logoWhereInput[]
    NOT?: logoWhereInput | logoWhereInput[]
    id?: IntFilter<"logo"> | number
    path?: StringFilter<"logo"> | string
    engagementId?: IntFilter<"logo"> | number
    engagement?: XOR<EngagementScalarRelationFilter, engagementWhereInput>
  }

  export type logoOrderByWithRelationInput = {
    id?: SortOrder
    path?: SortOrder
    engagementId?: SortOrder
    engagement?: engagementOrderByWithRelationInput
  }

  export type logoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: logoWhereInput | logoWhereInput[]
    OR?: logoWhereInput[]
    NOT?: logoWhereInput | logoWhereInput[]
    path?: StringFilter<"logo"> | string
    engagementId?: IntFilter<"logo"> | number
    engagement?: XOR<EngagementScalarRelationFilter, engagementWhereInput>
  }, "id">

  export type logoOrderByWithAggregationInput = {
    id?: SortOrder
    path?: SortOrder
    engagementId?: SortOrder
    _count?: logoCountOrderByAggregateInput
    _avg?: logoAvgOrderByAggregateInput
    _max?: logoMaxOrderByAggregateInput
    _min?: logoMinOrderByAggregateInput
    _sum?: logoSumOrderByAggregateInput
  }

  export type logoScalarWhereWithAggregatesInput = {
    AND?: logoScalarWhereWithAggregatesInput | logoScalarWhereWithAggregatesInput[]
    OR?: logoScalarWhereWithAggregatesInput[]
    NOT?: logoScalarWhereWithAggregatesInput | logoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"logo"> | number
    path?: StringWithAggregatesFilter<"logo"> | string
    engagementId?: IntWithAggregatesFilter<"logo"> | number
  }

  export type articleWhereInput = {
    AND?: articleWhereInput | articleWhereInput[]
    OR?: articleWhereInput[]
    NOT?: articleWhereInput | articleWhereInput[]
    id?: IntFilter<"article"> | number
    titre?: StringFilter<"article"> | string
    contenu?: StringFilter<"article"> | string
    categorieArticle?: StringFilter<"article"> | string
    createdAt?: DateTimeFilter<"article"> | Date | string
    updatedAt?: DateTimeFilter<"article"> | Date | string
    images?: ImageListRelationFilter
  }

  export type articleOrderByWithRelationInput = {
    id?: SortOrder
    titre?: SortOrder
    contenu?: SortOrder
    categorieArticle?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    images?: imageOrderByRelationAggregateInput
  }

  export type articleWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: articleWhereInput | articleWhereInput[]
    OR?: articleWhereInput[]
    NOT?: articleWhereInput | articleWhereInput[]
    titre?: StringFilter<"article"> | string
    contenu?: StringFilter<"article"> | string
    categorieArticle?: StringFilter<"article"> | string
    createdAt?: DateTimeFilter<"article"> | Date | string
    updatedAt?: DateTimeFilter<"article"> | Date | string
    images?: ImageListRelationFilter
  }, "id">

  export type articleOrderByWithAggregationInput = {
    id?: SortOrder
    titre?: SortOrder
    contenu?: SortOrder
    categorieArticle?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: articleCountOrderByAggregateInput
    _avg?: articleAvgOrderByAggregateInput
    _max?: articleMaxOrderByAggregateInput
    _min?: articleMinOrderByAggregateInput
    _sum?: articleSumOrderByAggregateInput
  }

  export type articleScalarWhereWithAggregatesInput = {
    AND?: articleScalarWhereWithAggregatesInput | articleScalarWhereWithAggregatesInput[]
    OR?: articleScalarWhereWithAggregatesInput[]
    NOT?: articleScalarWhereWithAggregatesInput | articleScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"article"> | number
    titre?: StringWithAggregatesFilter<"article"> | string
    contenu?: StringWithAggregatesFilter<"article"> | string
    categorieArticle?: StringWithAggregatesFilter<"article"> | string
    createdAt?: DateTimeWithAggregatesFilter<"article"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"article"> | Date | string
  }

  export type imageWhereInput = {
    AND?: imageWhereInput | imageWhereInput[]
    OR?: imageWhereInput[]
    NOT?: imageWhereInput | imageWhereInput[]
    id?: IntFilter<"image"> | number
    path?: StringFilter<"image"> | string
    articleId?: IntFilter<"image"> | number
    article?: XOR<ArticleScalarRelationFilter, articleWhereInput>
  }

  export type imageOrderByWithRelationInput = {
    id?: SortOrder
    path?: SortOrder
    articleId?: SortOrder
    article?: articleOrderByWithRelationInput
  }

  export type imageWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: imageWhereInput | imageWhereInput[]
    OR?: imageWhereInput[]
    NOT?: imageWhereInput | imageWhereInput[]
    path?: StringFilter<"image"> | string
    articleId?: IntFilter<"image"> | number
    article?: XOR<ArticleScalarRelationFilter, articleWhereInput>
  }, "id">

  export type imageOrderByWithAggregationInput = {
    id?: SortOrder
    path?: SortOrder
    articleId?: SortOrder
    _count?: imageCountOrderByAggregateInput
    _avg?: imageAvgOrderByAggregateInput
    _max?: imageMaxOrderByAggregateInput
    _min?: imageMinOrderByAggregateInput
    _sum?: imageSumOrderByAggregateInput
  }

  export type imageScalarWhereWithAggregatesInput = {
    AND?: imageScalarWhereWithAggregatesInput | imageScalarWhereWithAggregatesInput[]
    OR?: imageScalarWhereWithAggregatesInput[]
    NOT?: imageScalarWhereWithAggregatesInput | imageScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"image"> | number
    path?: StringWithAggregatesFilter<"image"> | string
    articleId?: IntWithAggregatesFilter<"image"> | number
  }

  export type transactionsWhereInput = {
    AND?: transactionsWhereInput | transactionsWhereInput[]
    OR?: transactionsWhereInput[]
    NOT?: transactionsWhereInput | transactionsWhereInput[]
    id?: IntFilter<"transactions"> | number
    dateRange?: JsonFilter<"transactions">
    price?: DecimalFilter<"transactions"> | Decimal | DecimalJsLike | number | string
    quantity?: IntFilter<"transactions"> | number
    status?: EnumtransactionStatusFilter<"transactions"> | $Enums.transactionStatus
    createdAt?: DateTimeFilter<"transactions"> | Date | string
    updatedAt?: DateTimeFilter<"transactions"> | Date | string
    annonceId?: IntFilter<"transactions"> | number
    userId?: IntFilter<"transactions"> | number
    annonce?: XOR<AnnoncesScalarRelationFilter, annoncesWhereInput>
    user?: XOR<UserScalarRelationFilter, userWhereInput>
  }

  export type transactionsOrderByWithRelationInput = {
    id?: SortOrder
    dateRange?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    annonceId?: SortOrder
    userId?: SortOrder
    annonce?: annoncesOrderByWithRelationInput
    user?: userOrderByWithRelationInput
  }

  export type transactionsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: transactionsWhereInput | transactionsWhereInput[]
    OR?: transactionsWhereInput[]
    NOT?: transactionsWhereInput | transactionsWhereInput[]
    dateRange?: JsonFilter<"transactions">
    price?: DecimalFilter<"transactions"> | Decimal | DecimalJsLike | number | string
    quantity?: IntFilter<"transactions"> | number
    status?: EnumtransactionStatusFilter<"transactions"> | $Enums.transactionStatus
    createdAt?: DateTimeFilter<"transactions"> | Date | string
    updatedAt?: DateTimeFilter<"transactions"> | Date | string
    annonceId?: IntFilter<"transactions"> | number
    userId?: IntFilter<"transactions"> | number
    annonce?: XOR<AnnoncesScalarRelationFilter, annoncesWhereInput>
    user?: XOR<UserScalarRelationFilter, userWhereInput>
  }, "id">

  export type transactionsOrderByWithAggregationInput = {
    id?: SortOrder
    dateRange?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    annonceId?: SortOrder
    userId?: SortOrder
    _count?: transactionsCountOrderByAggregateInput
    _avg?: transactionsAvgOrderByAggregateInput
    _max?: transactionsMaxOrderByAggregateInput
    _min?: transactionsMinOrderByAggregateInput
    _sum?: transactionsSumOrderByAggregateInput
  }

  export type transactionsScalarWhereWithAggregatesInput = {
    AND?: transactionsScalarWhereWithAggregatesInput | transactionsScalarWhereWithAggregatesInput[]
    OR?: transactionsScalarWhereWithAggregatesInput[]
    NOT?: transactionsScalarWhereWithAggregatesInput | transactionsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"transactions"> | number
    dateRange?: JsonWithAggregatesFilter<"transactions">
    price?: DecimalWithAggregatesFilter<"transactions"> | Decimal | DecimalJsLike | number | string
    quantity?: IntWithAggregatesFilter<"transactions"> | number
    status?: EnumtransactionStatusWithAggregatesFilter<"transactions"> | $Enums.transactionStatus
    createdAt?: DateTimeWithAggregatesFilter<"transactions"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"transactions"> | Date | string
    annonceId?: IntWithAggregatesFilter<"transactions"> | number
    userId?: IntWithAggregatesFilter<"transactions"> | number
  }

  export type newsletterCreateInput = {
    email: string
    unsubscribeToken?: string | null
  }

  export type newsletterUncheckedCreateInput = {
    id?: number
    email: string
    unsubscribeToken?: string | null
  }

  export type newsletterUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    unsubscribeToken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type newsletterUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    unsubscribeToken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type newsletterCreateManyInput = {
    id?: number
    email: string
    unsubscribeToken?: string | null
  }

  export type newsletterUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    unsubscribeToken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type newsletterUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    unsubscribeToken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type userCreateInput = {
    nom: string
    prenom: string
    email: string
    phone: string
    hashPassword: string
    statutUser: $Enums.statutUser
    role: $Enums.role
    createdAt?: Date | string
    updatedAt?: Date | string
    stripeAccountId?: string | null
    stripeAccountCompleted?: boolean
    profileImages?: profileImageCreateNestedManyWithoutUserInput
    company?: companyCreateNestedOneWithoutUsersInput
    annonces?: annoncesCreateNestedManyWithoutUserInput
    commentaire?: commentaireCreateNestedManyWithoutUserInput
    favoris?: favorisCreateNestedManyWithoutUserInput
    temoignages?: temoignagesCreateNestedManyWithoutUserInput
    transactions?: transactionsCreateNestedManyWithoutUserInput
    adresseFacturation?: adresseFacturationCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateInput = {
    id?: number
    nom: string
    prenom: string
    email: string
    phone: string
    hashPassword: string
    statutUser: $Enums.statutUser
    role: $Enums.role
    createdAt?: Date | string
    updatedAt?: Date | string
    companyId?: number | null
    stripeAccountId?: string | null
    stripeAccountCompleted?: boolean
    profileImages?: profileImageUncheckedCreateNestedManyWithoutUserInput
    annonces?: annoncesUncheckedCreateNestedManyWithoutUserInput
    commentaire?: commentaireUncheckedCreateNestedManyWithoutUserInput
    favoris?: favorisUncheckedCreateNestedManyWithoutUserInput
    temoignages?: temoignagesUncheckedCreateNestedManyWithoutUserInput
    transactions?: transactionsUncheckedCreateNestedManyWithoutUserInput
    adresseFacturation?: adresseFacturationUncheckedCreateNestedManyWithoutUserInput
  }

  export type userUpdateInput = {
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    hashPassword?: StringFieldUpdateOperationsInput | string
    statutUser?: EnumstatutUserFieldUpdateOperationsInput | $Enums.statutUser
    role?: EnumroleFieldUpdateOperationsInput | $Enums.role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stripeAccountId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeAccountCompleted?: BoolFieldUpdateOperationsInput | boolean
    profileImages?: profileImageUpdateManyWithoutUserNestedInput
    company?: companyUpdateOneWithoutUsersNestedInput
    annonces?: annoncesUpdateManyWithoutUserNestedInput
    commentaire?: commentaireUpdateManyWithoutUserNestedInput
    favoris?: favorisUpdateManyWithoutUserNestedInput
    temoignages?: temoignagesUpdateManyWithoutUserNestedInput
    transactions?: transactionsUpdateManyWithoutUserNestedInput
    adresseFacturation?: adresseFacturationUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    hashPassword?: StringFieldUpdateOperationsInput | string
    statutUser?: EnumstatutUserFieldUpdateOperationsInput | $Enums.statutUser
    role?: EnumroleFieldUpdateOperationsInput | $Enums.role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companyId?: NullableIntFieldUpdateOperationsInput | number | null
    stripeAccountId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeAccountCompleted?: BoolFieldUpdateOperationsInput | boolean
    profileImages?: profileImageUncheckedUpdateManyWithoutUserNestedInput
    annonces?: annoncesUncheckedUpdateManyWithoutUserNestedInput
    commentaire?: commentaireUncheckedUpdateManyWithoutUserNestedInput
    favoris?: favorisUncheckedUpdateManyWithoutUserNestedInput
    temoignages?: temoignagesUncheckedUpdateManyWithoutUserNestedInput
    transactions?: transactionsUncheckedUpdateManyWithoutUserNestedInput
    adresseFacturation?: adresseFacturationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type userCreateManyInput = {
    id?: number
    nom: string
    prenom: string
    email: string
    phone: string
    hashPassword: string
    statutUser: $Enums.statutUser
    role: $Enums.role
    createdAt?: Date | string
    updatedAt?: Date | string
    companyId?: number | null
    stripeAccountId?: string | null
    stripeAccountCompleted?: boolean
  }

  export type userUpdateManyMutationInput = {
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    hashPassword?: StringFieldUpdateOperationsInput | string
    statutUser?: EnumstatutUserFieldUpdateOperationsInput | $Enums.statutUser
    role?: EnumroleFieldUpdateOperationsInput | $Enums.role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stripeAccountId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeAccountCompleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type userUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    hashPassword?: StringFieldUpdateOperationsInput | string
    statutUser?: EnumstatutUserFieldUpdateOperationsInput | $Enums.statutUser
    role?: EnumroleFieldUpdateOperationsInput | $Enums.role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companyId?: NullableIntFieldUpdateOperationsInput | number | null
    stripeAccountId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeAccountCompleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type companyCreateInput = {
    siret: string
    nomSociete: string
    codePostal: string
    adresse: string
    ville: string
    createdAt?: Date | string
    updatedAt?: Date | string
    secteurActivite: $Enums.secteurActivite
    typeSociete: $Enums.typeSociete
    users?: userCreateNestedManyWithoutCompanyInput
  }

  export type companyUncheckedCreateInput = {
    id?: number
    siret: string
    nomSociete: string
    codePostal: string
    adresse: string
    ville: string
    createdAt?: Date | string
    updatedAt?: Date | string
    secteurActivite: $Enums.secteurActivite
    typeSociete: $Enums.typeSociete
    users?: userUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type companyUpdateInput = {
    siret?: StringFieldUpdateOperationsInput | string
    nomSociete?: StringFieldUpdateOperationsInput | string
    codePostal?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    ville?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    secteurActivite?: EnumsecteurActiviteFieldUpdateOperationsInput | $Enums.secteurActivite
    typeSociete?: EnumtypeSocieteFieldUpdateOperationsInput | $Enums.typeSociete
    users?: userUpdateManyWithoutCompanyNestedInput
  }

  export type companyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    siret?: StringFieldUpdateOperationsInput | string
    nomSociete?: StringFieldUpdateOperationsInput | string
    codePostal?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    ville?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    secteurActivite?: EnumsecteurActiviteFieldUpdateOperationsInput | $Enums.secteurActivite
    typeSociete?: EnumtypeSocieteFieldUpdateOperationsInput | $Enums.typeSociete
    users?: userUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type companyCreateManyInput = {
    id?: number
    siret: string
    nomSociete: string
    codePostal: string
    adresse: string
    ville: string
    createdAt?: Date | string
    updatedAt?: Date | string
    secteurActivite: $Enums.secteurActivite
    typeSociete: $Enums.typeSociete
  }

  export type companyUpdateManyMutationInput = {
    siret?: StringFieldUpdateOperationsInput | string
    nomSociete?: StringFieldUpdateOperationsInput | string
    codePostal?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    ville?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    secteurActivite?: EnumsecteurActiviteFieldUpdateOperationsInput | $Enums.secteurActivite
    typeSociete?: EnumtypeSocieteFieldUpdateOperationsInput | $Enums.typeSociete
  }

  export type companyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    siret?: StringFieldUpdateOperationsInput | string
    nomSociete?: StringFieldUpdateOperationsInput | string
    codePostal?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    ville?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    secteurActivite?: EnumsecteurActiviteFieldUpdateOperationsInput | $Enums.secteurActivite
    typeSociete?: EnumtypeSocieteFieldUpdateOperationsInput | $Enums.typeSociete
  }

  export type profileImageCreateInput = {
    path: string
    user: userCreateNestedOneWithoutProfileImagesInput
  }

  export type profileImageUncheckedCreateInput = {
    id?: number
    path: string
    userId: number
  }

  export type profileImageUpdateInput = {
    path?: StringFieldUpdateOperationsInput | string
    user?: userUpdateOneRequiredWithoutProfileImagesNestedInput
  }

  export type profileImageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type profileImageCreateManyInput = {
    id?: number
    path: string
    userId: number
  }

  export type profileImageUpdateManyMutationInput = {
    path?: StringFieldUpdateOperationsInput | string
  }

  export type profileImageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type favorisCreateInput = {
    saveDate?: Date | string
    user: userCreateNestedOneWithoutFavorisInput
    annonce: annoncesCreateNestedOneWithoutFavorisInput
  }

  export type favorisUncheckedCreateInput = {
    id?: number
    saveDate?: Date | string
    userId: number
    annonceId: number
  }

  export type favorisUpdateInput = {
    saveDate?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: userUpdateOneRequiredWithoutFavorisNestedInput
    annonce?: annoncesUpdateOneRequiredWithoutFavorisNestedInput
  }

  export type favorisUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    saveDate?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    annonceId?: IntFieldUpdateOperationsInput | number
  }

  export type favorisCreateManyInput = {
    id?: number
    saveDate?: Date | string
    userId: number
    annonceId: number
  }

  export type favorisUpdateManyMutationInput = {
    saveDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type favorisUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    saveDate?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    annonceId?: IntFieldUpdateOperationsInput | number
  }

  export type annoncesCreateInput = {
    titre: string
    description: string
    prix?: Decimal | DecimalJsLike | number | string | null
    typeTarif?: $Enums.typeTarif | null
    priority?: $Enums.priority | null
    localisation?: string | null
    adresse: string
    statut?: $Enums.statut | null
    createdAt?: Date | string
    updatedAt?: Date | string
    categorieAnnonce: $Enums.categorieAnnonce
    sousCategorie: string
    priceId?: string | null
    imageAnnonces?: imageAnnonceCreateNestedManyWithoutAnnoncesInput
    user: userCreateNestedOneWithoutAnnoncesInput
    commentaire?: commentaireCreateNestedManyWithoutAnnoncesInput
    favoris?: favorisCreateNestedManyWithoutAnnonceInput
    transactions?: transactionsCreateNestedManyWithoutAnnonceInput
  }

  export type annoncesUncheckedCreateInput = {
    id?: number
    titre: string
    description: string
    prix?: Decimal | DecimalJsLike | number | string | null
    typeTarif?: $Enums.typeTarif | null
    priority?: $Enums.priority | null
    localisation?: string | null
    adresse: string
    statut?: $Enums.statut | null
    createdAt?: Date | string
    updatedAt?: Date | string
    categorieAnnonce: $Enums.categorieAnnonce
    sousCategorie: string
    userId: number
    priceId?: string | null
    imageAnnonces?: imageAnnonceUncheckedCreateNestedManyWithoutAnnoncesInput
    commentaire?: commentaireUncheckedCreateNestedManyWithoutAnnoncesInput
    favoris?: favorisUncheckedCreateNestedManyWithoutAnnonceInput
    transactions?: transactionsUncheckedCreateNestedManyWithoutAnnonceInput
  }

  export type annoncesUpdateInput = {
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    prix?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    typeTarif?: NullableEnumtypeTarifFieldUpdateOperationsInput | $Enums.typeTarif | null
    priority?: NullableEnumpriorityFieldUpdateOperationsInput | $Enums.priority | null
    localisation?: NullableStringFieldUpdateOperationsInput | string | null
    adresse?: StringFieldUpdateOperationsInput | string
    statut?: NullableEnumstatutFieldUpdateOperationsInput | $Enums.statut | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categorieAnnonce?: EnumcategorieAnnonceFieldUpdateOperationsInput | $Enums.categorieAnnonce
    sousCategorie?: StringFieldUpdateOperationsInput | string
    priceId?: NullableStringFieldUpdateOperationsInput | string | null
    imageAnnonces?: imageAnnonceUpdateManyWithoutAnnoncesNestedInput
    user?: userUpdateOneRequiredWithoutAnnoncesNestedInput
    commentaire?: commentaireUpdateManyWithoutAnnoncesNestedInput
    favoris?: favorisUpdateManyWithoutAnnonceNestedInput
    transactions?: transactionsUpdateManyWithoutAnnonceNestedInput
  }

  export type annoncesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    prix?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    typeTarif?: NullableEnumtypeTarifFieldUpdateOperationsInput | $Enums.typeTarif | null
    priority?: NullableEnumpriorityFieldUpdateOperationsInput | $Enums.priority | null
    localisation?: NullableStringFieldUpdateOperationsInput | string | null
    adresse?: StringFieldUpdateOperationsInput | string
    statut?: NullableEnumstatutFieldUpdateOperationsInput | $Enums.statut | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categorieAnnonce?: EnumcategorieAnnonceFieldUpdateOperationsInput | $Enums.categorieAnnonce
    sousCategorie?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    priceId?: NullableStringFieldUpdateOperationsInput | string | null
    imageAnnonces?: imageAnnonceUncheckedUpdateManyWithoutAnnoncesNestedInput
    commentaire?: commentaireUncheckedUpdateManyWithoutAnnoncesNestedInput
    favoris?: favorisUncheckedUpdateManyWithoutAnnonceNestedInput
    transactions?: transactionsUncheckedUpdateManyWithoutAnnonceNestedInput
  }

  export type annoncesCreateManyInput = {
    id?: number
    titre: string
    description: string
    prix?: Decimal | DecimalJsLike | number | string | null
    typeTarif?: $Enums.typeTarif | null
    priority?: $Enums.priority | null
    localisation?: string | null
    adresse: string
    statut?: $Enums.statut | null
    createdAt?: Date | string
    updatedAt?: Date | string
    categorieAnnonce: $Enums.categorieAnnonce
    sousCategorie: string
    userId: number
    priceId?: string | null
  }

  export type annoncesUpdateManyMutationInput = {
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    prix?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    typeTarif?: NullableEnumtypeTarifFieldUpdateOperationsInput | $Enums.typeTarif | null
    priority?: NullableEnumpriorityFieldUpdateOperationsInput | $Enums.priority | null
    localisation?: NullableStringFieldUpdateOperationsInput | string | null
    adresse?: StringFieldUpdateOperationsInput | string
    statut?: NullableEnumstatutFieldUpdateOperationsInput | $Enums.statut | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categorieAnnonce?: EnumcategorieAnnonceFieldUpdateOperationsInput | $Enums.categorieAnnonce
    sousCategorie?: StringFieldUpdateOperationsInput | string
    priceId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type annoncesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    prix?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    typeTarif?: NullableEnumtypeTarifFieldUpdateOperationsInput | $Enums.typeTarif | null
    priority?: NullableEnumpriorityFieldUpdateOperationsInput | $Enums.priority | null
    localisation?: NullableStringFieldUpdateOperationsInput | string | null
    adresse?: StringFieldUpdateOperationsInput | string
    statut?: NullableEnumstatutFieldUpdateOperationsInput | $Enums.statut | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categorieAnnonce?: EnumcategorieAnnonceFieldUpdateOperationsInput | $Enums.categorieAnnonce
    sousCategorie?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    priceId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type imageAnnonceCreateInput = {
    path: string
    annonces: annoncesCreateNestedOneWithoutImageAnnoncesInput
  }

  export type imageAnnonceUncheckedCreateInput = {
    id?: number
    path: string
    annoncesId: number
  }

  export type imageAnnonceUpdateInput = {
    path?: StringFieldUpdateOperationsInput | string
    annonces?: annoncesUpdateOneRequiredWithoutImageAnnoncesNestedInput
  }

  export type imageAnnonceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
    annoncesId?: IntFieldUpdateOperationsInput | number
  }

  export type imageAnnonceCreateManyInput = {
    id?: number
    path: string
    annoncesId: number
  }

  export type imageAnnonceUpdateManyMutationInput = {
    path?: StringFieldUpdateOperationsInput | string
  }

  export type imageAnnonceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
    annoncesId?: IntFieldUpdateOperationsInput | number
  }

  export type commentaireCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    commentaire: string
    note?: number | null
    annonces: annoncesCreateNestedOneWithoutCommentaireInput
    user: userCreateNestedOneWithoutCommentaireInput
  }

  export type commentaireUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    commentaire: string
    note?: number | null
    annoncesId: number
    userId: number
  }

  export type commentaireUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    commentaire?: StringFieldUpdateOperationsInput | string
    note?: NullableIntFieldUpdateOperationsInput | number | null
    annonces?: annoncesUpdateOneRequiredWithoutCommentaireNestedInput
    user?: userUpdateOneRequiredWithoutCommentaireNestedInput
  }

  export type commentaireUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    commentaire?: StringFieldUpdateOperationsInput | string
    note?: NullableIntFieldUpdateOperationsInput | number | null
    annoncesId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type commentaireCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    commentaire: string
    note?: number | null
    annoncesId: number
    userId: number
  }

  export type commentaireUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    commentaire?: StringFieldUpdateOperationsInput | string
    note?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type commentaireUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    commentaire?: StringFieldUpdateOperationsInput | string
    note?: NullableIntFieldUpdateOperationsInput | number | null
    annoncesId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type temoignagesCreateInput = {
    temoignage: string
    noteLilee: number
    ville?: string | null
    pays?: string | null
    user: userCreateNestedOneWithoutTemoignagesInput
  }

  export type temoignagesUncheckedCreateInput = {
    id?: number
    temoignage: string
    noteLilee: number
    ville?: string | null
    pays?: string | null
    userId: number
  }

  export type temoignagesUpdateInput = {
    temoignage?: StringFieldUpdateOperationsInput | string
    noteLilee?: IntFieldUpdateOperationsInput | number
    ville?: NullableStringFieldUpdateOperationsInput | string | null
    pays?: NullableStringFieldUpdateOperationsInput | string | null
    user?: userUpdateOneRequiredWithoutTemoignagesNestedInput
  }

  export type temoignagesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    temoignage?: StringFieldUpdateOperationsInput | string
    noteLilee?: IntFieldUpdateOperationsInput | number
    ville?: NullableStringFieldUpdateOperationsInput | string | null
    pays?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type temoignagesCreateManyInput = {
    id?: number
    temoignage: string
    noteLilee: number
    ville?: string | null
    pays?: string | null
    userId: number
  }

  export type temoignagesUpdateManyMutationInput = {
    temoignage?: StringFieldUpdateOperationsInput | string
    noteLilee?: IntFieldUpdateOperationsInput | number
    ville?: NullableStringFieldUpdateOperationsInput | string | null
    pays?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type temoignagesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    temoignage?: StringFieldUpdateOperationsInput | string
    noteLilee?: IntFieldUpdateOperationsInput | number
    ville?: NullableStringFieldUpdateOperationsInput | string | null
    pays?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type adresseFacturationCreateInput = {
    nom: string
    adresse: string
    codePostal: string
    ville: string
    pays: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: userCreateNestedOneWithoutAdresseFacturationInput
  }

  export type adresseFacturationUncheckedCreateInput = {
    id?: number
    nom: string
    adresse: string
    codePostal: string
    ville: string
    pays: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: number
  }

  export type adresseFacturationUpdateInput = {
    nom?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    codePostal?: StringFieldUpdateOperationsInput | string
    ville?: StringFieldUpdateOperationsInput | string
    pays?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: userUpdateOneRequiredWithoutAdresseFacturationNestedInput
  }

  export type adresseFacturationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    codePostal?: StringFieldUpdateOperationsInput | string
    ville?: StringFieldUpdateOperationsInput | string
    pays?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type adresseFacturationCreateManyInput = {
    id?: number
    nom: string
    adresse: string
    codePostal: string
    ville: string
    pays: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: number
  }

  export type adresseFacturationUpdateManyMutationInput = {
    nom?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    codePostal?: StringFieldUpdateOperationsInput | string
    ville?: StringFieldUpdateOperationsInput | string
    pays?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type adresseFacturationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    codePostal?: StringFieldUpdateOperationsInput | string
    ville?: StringFieldUpdateOperationsInput | string
    pays?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type engagementCreateInput = {
    nom: string
    createdAt?: Date | string
    updatedAt?: Date | string
    statutPartenaire?: $Enums.statutPartenaire
    siteWeb?: string | null
    adresse: string
    email: string
    phone: string
    facebook?: string | null
    instagram?: string | null
    twitter?: string | null
    linkedin?: string | null
    tikTok?: string | null
    youtube?: string | null
    duree: $Enums.duree
    description?: string | null
    logo?: logoCreateNestedManyWithoutEngagementInput
    contenuPartenaire?: contenuPartenaireCreateNestedManyWithoutEngagementInput
  }

  export type engagementUncheckedCreateInput = {
    id?: number
    nom: string
    createdAt?: Date | string
    updatedAt?: Date | string
    statutPartenaire?: $Enums.statutPartenaire
    siteWeb?: string | null
    adresse: string
    email: string
    phone: string
    facebook?: string | null
    instagram?: string | null
    twitter?: string | null
    linkedin?: string | null
    tikTok?: string | null
    youtube?: string | null
    duree: $Enums.duree
    description?: string | null
    logo?: logoUncheckedCreateNestedManyWithoutEngagementInput
    contenuPartenaire?: contenuPartenaireUncheckedCreateNestedManyWithoutEngagementInput
  }

  export type engagementUpdateInput = {
    nom?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    statutPartenaire?: EnumstatutPartenaireFieldUpdateOperationsInput | $Enums.statutPartenaire
    siteWeb?: NullableStringFieldUpdateOperationsInput | string | null
    adresse?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    twitter?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    tikTok?: NullableStringFieldUpdateOperationsInput | string | null
    youtube?: NullableStringFieldUpdateOperationsInput | string | null
    duree?: EnumdureeFieldUpdateOperationsInput | $Enums.duree
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: logoUpdateManyWithoutEngagementNestedInput
    contenuPartenaire?: contenuPartenaireUpdateManyWithoutEngagementNestedInput
  }

  export type engagementUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    statutPartenaire?: EnumstatutPartenaireFieldUpdateOperationsInput | $Enums.statutPartenaire
    siteWeb?: NullableStringFieldUpdateOperationsInput | string | null
    adresse?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    twitter?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    tikTok?: NullableStringFieldUpdateOperationsInput | string | null
    youtube?: NullableStringFieldUpdateOperationsInput | string | null
    duree?: EnumdureeFieldUpdateOperationsInput | $Enums.duree
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: logoUncheckedUpdateManyWithoutEngagementNestedInput
    contenuPartenaire?: contenuPartenaireUncheckedUpdateManyWithoutEngagementNestedInput
  }

  export type engagementCreateManyInput = {
    id?: number
    nom: string
    createdAt?: Date | string
    updatedAt?: Date | string
    statutPartenaire?: $Enums.statutPartenaire
    siteWeb?: string | null
    adresse: string
    email: string
    phone: string
    facebook?: string | null
    instagram?: string | null
    twitter?: string | null
    linkedin?: string | null
    tikTok?: string | null
    youtube?: string | null
    duree: $Enums.duree
    description?: string | null
  }

  export type engagementUpdateManyMutationInput = {
    nom?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    statutPartenaire?: EnumstatutPartenaireFieldUpdateOperationsInput | $Enums.statutPartenaire
    siteWeb?: NullableStringFieldUpdateOperationsInput | string | null
    adresse?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    twitter?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    tikTok?: NullableStringFieldUpdateOperationsInput | string | null
    youtube?: NullableStringFieldUpdateOperationsInput | string | null
    duree?: EnumdureeFieldUpdateOperationsInput | $Enums.duree
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type engagementUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    statutPartenaire?: EnumstatutPartenaireFieldUpdateOperationsInput | $Enums.statutPartenaire
    siteWeb?: NullableStringFieldUpdateOperationsInput | string | null
    adresse?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    twitter?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    tikTok?: NullableStringFieldUpdateOperationsInput | string | null
    youtube?: NullableStringFieldUpdateOperationsInput | string | null
    duree?: EnumdureeFieldUpdateOperationsInput | $Enums.duree
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type contenuPartenaireCreateInput = {
    path: string
    engagement: engagementCreateNestedOneWithoutContenuPartenaireInput
  }

  export type contenuPartenaireUncheckedCreateInput = {
    id?: number
    path: string
    engagementId: number
  }

  export type contenuPartenaireUpdateInput = {
    path?: StringFieldUpdateOperationsInput | string
    engagement?: engagementUpdateOneRequiredWithoutContenuPartenaireNestedInput
  }

  export type contenuPartenaireUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
    engagementId?: IntFieldUpdateOperationsInput | number
  }

  export type contenuPartenaireCreateManyInput = {
    id?: number
    path: string
    engagementId: number
  }

  export type contenuPartenaireUpdateManyMutationInput = {
    path?: StringFieldUpdateOperationsInput | string
  }

  export type contenuPartenaireUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
    engagementId?: IntFieldUpdateOperationsInput | number
  }

  export type logoCreateInput = {
    path: string
    engagement: engagementCreateNestedOneWithoutLogoInput
  }

  export type logoUncheckedCreateInput = {
    id?: number
    path: string
    engagementId: number
  }

  export type logoUpdateInput = {
    path?: StringFieldUpdateOperationsInput | string
    engagement?: engagementUpdateOneRequiredWithoutLogoNestedInput
  }

  export type logoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
    engagementId?: IntFieldUpdateOperationsInput | number
  }

  export type logoCreateManyInput = {
    id?: number
    path: string
    engagementId: number
  }

  export type logoUpdateManyMutationInput = {
    path?: StringFieldUpdateOperationsInput | string
  }

  export type logoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
    engagementId?: IntFieldUpdateOperationsInput | number
  }

  export type articleCreateInput = {
    titre: string
    contenu: string
    categorieArticle: string
    createdAt?: Date | string
    updatedAt?: Date | string
    images?: imageCreateNestedManyWithoutArticleInput
  }

  export type articleUncheckedCreateInput = {
    id?: number
    titre: string
    contenu: string
    categorieArticle: string
    createdAt?: Date | string
    updatedAt?: Date | string
    images?: imageUncheckedCreateNestedManyWithoutArticleInput
  }

  export type articleUpdateInput = {
    titre?: StringFieldUpdateOperationsInput | string
    contenu?: StringFieldUpdateOperationsInput | string
    categorieArticle?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: imageUpdateManyWithoutArticleNestedInput
  }

  export type articleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    contenu?: StringFieldUpdateOperationsInput | string
    categorieArticle?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: imageUncheckedUpdateManyWithoutArticleNestedInput
  }

  export type articleCreateManyInput = {
    id?: number
    titre: string
    contenu: string
    categorieArticle: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type articleUpdateManyMutationInput = {
    titre?: StringFieldUpdateOperationsInput | string
    contenu?: StringFieldUpdateOperationsInput | string
    categorieArticle?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type articleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    contenu?: StringFieldUpdateOperationsInput | string
    categorieArticle?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type imageCreateInput = {
    path: string
    article: articleCreateNestedOneWithoutImagesInput
  }

  export type imageUncheckedCreateInput = {
    id?: number
    path: string
    articleId: number
  }

  export type imageUpdateInput = {
    path?: StringFieldUpdateOperationsInput | string
    article?: articleUpdateOneRequiredWithoutImagesNestedInput
  }

  export type imageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
    articleId?: IntFieldUpdateOperationsInput | number
  }

  export type imageCreateManyInput = {
    id?: number
    path: string
    articleId: number
  }

  export type imageUpdateManyMutationInput = {
    path?: StringFieldUpdateOperationsInput | string
  }

  export type imageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
    articleId?: IntFieldUpdateOperationsInput | number
  }

  export type transactionsCreateInput = {
    dateRange?: JsonNullValueInput | InputJsonValue
    price: Decimal | DecimalJsLike | number | string
    quantity: number
    status?: $Enums.transactionStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    annonce: annoncesCreateNestedOneWithoutTransactionsInput
    user: userCreateNestedOneWithoutTransactionsInput
  }

  export type transactionsUncheckedCreateInput = {
    id?: number
    dateRange?: JsonNullValueInput | InputJsonValue
    price: Decimal | DecimalJsLike | number | string
    quantity: number
    status?: $Enums.transactionStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    annonceId: number
    userId: number
  }

  export type transactionsUpdateInput = {
    dateRange?: JsonNullValueInput | InputJsonValue
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantity?: IntFieldUpdateOperationsInput | number
    status?: EnumtransactionStatusFieldUpdateOperationsInput | $Enums.transactionStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    annonce?: annoncesUpdateOneRequiredWithoutTransactionsNestedInput
    user?: userUpdateOneRequiredWithoutTransactionsNestedInput
  }

  export type transactionsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateRange?: JsonNullValueInput | InputJsonValue
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantity?: IntFieldUpdateOperationsInput | number
    status?: EnumtransactionStatusFieldUpdateOperationsInput | $Enums.transactionStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    annonceId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type transactionsCreateManyInput = {
    id?: number
    dateRange?: JsonNullValueInput | InputJsonValue
    price: Decimal | DecimalJsLike | number | string
    quantity: number
    status?: $Enums.transactionStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    annonceId: number
    userId: number
  }

  export type transactionsUpdateManyMutationInput = {
    dateRange?: JsonNullValueInput | InputJsonValue
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantity?: IntFieldUpdateOperationsInput | number
    status?: EnumtransactionStatusFieldUpdateOperationsInput | $Enums.transactionStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type transactionsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateRange?: JsonNullValueInput | InputJsonValue
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantity?: IntFieldUpdateOperationsInput | number
    status?: EnumtransactionStatusFieldUpdateOperationsInput | $Enums.transactionStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    annonceId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type newsletterCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    unsubscribeToken?: SortOrder
  }

  export type newsletterAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type newsletterMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    unsubscribeToken?: SortOrder
  }

  export type newsletterMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    unsubscribeToken?: SortOrder
  }

  export type newsletterSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumstatutUserFilter<$PrismaModel = never> = {
    equals?: $Enums.statutUser | EnumstatutUserFieldRefInput<$PrismaModel>
    in?: $Enums.statutUser[] | ListEnumstatutUserFieldRefInput<$PrismaModel>
    notIn?: $Enums.statutUser[] | ListEnumstatutUserFieldRefInput<$PrismaModel>
    not?: NestedEnumstatutUserFilter<$PrismaModel> | $Enums.statutUser
  }

  export type EnumroleFilter<$PrismaModel = never> = {
    equals?: $Enums.role | EnumroleFieldRefInput<$PrismaModel>
    in?: $Enums.role[] | ListEnumroleFieldRefInput<$PrismaModel>
    notIn?: $Enums.role[] | ListEnumroleFieldRefInput<$PrismaModel>
    not?: NestedEnumroleFilter<$PrismaModel> | $Enums.role
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type ProfileImageListRelationFilter = {
    every?: profileImageWhereInput
    some?: profileImageWhereInput
    none?: profileImageWhereInput
  }

  export type CompanyNullableScalarRelationFilter = {
    is?: companyWhereInput | null
    isNot?: companyWhereInput | null
  }

  export type AnnoncesListRelationFilter = {
    every?: annoncesWhereInput
    some?: annoncesWhereInput
    none?: annoncesWhereInput
  }

  export type CommentaireListRelationFilter = {
    every?: commentaireWhereInput
    some?: commentaireWhereInput
    none?: commentaireWhereInput
  }

  export type FavorisListRelationFilter = {
    every?: favorisWhereInput
    some?: favorisWhereInput
    none?: favorisWhereInput
  }

  export type TemoignagesListRelationFilter = {
    every?: temoignagesWhereInput
    some?: temoignagesWhereInput
    none?: temoignagesWhereInput
  }

  export type TransactionsListRelationFilter = {
    every?: transactionsWhereInput
    some?: transactionsWhereInput
    none?: transactionsWhereInput
  }

  export type AdresseFacturationListRelationFilter = {
    every?: adresseFacturationWhereInput
    some?: adresseFacturationWhereInput
    none?: adresseFacturationWhereInput
  }

  export type profileImageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type annoncesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type commentaireOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type favorisOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type temoignagesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type transactionsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type adresseFacturationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type userCountOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    hashPassword?: SortOrder
    statutUser?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    companyId?: SortOrder
    stripeAccountId?: SortOrder
    stripeAccountCompleted?: SortOrder
  }

  export type userAvgOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
  }

  export type userMaxOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    hashPassword?: SortOrder
    statutUser?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    companyId?: SortOrder
    stripeAccountId?: SortOrder
    stripeAccountCompleted?: SortOrder
  }

  export type userMinOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    hashPassword?: SortOrder
    statutUser?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    companyId?: SortOrder
    stripeAccountId?: SortOrder
    stripeAccountCompleted?: SortOrder
  }

  export type userSumOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
  }

  export type EnumstatutUserWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.statutUser | EnumstatutUserFieldRefInput<$PrismaModel>
    in?: $Enums.statutUser[] | ListEnumstatutUserFieldRefInput<$PrismaModel>
    notIn?: $Enums.statutUser[] | ListEnumstatutUserFieldRefInput<$PrismaModel>
    not?: NestedEnumstatutUserWithAggregatesFilter<$PrismaModel> | $Enums.statutUser
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumstatutUserFilter<$PrismaModel>
    _max?: NestedEnumstatutUserFilter<$PrismaModel>
  }

  export type EnumroleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.role | EnumroleFieldRefInput<$PrismaModel>
    in?: $Enums.role[] | ListEnumroleFieldRefInput<$PrismaModel>
    notIn?: $Enums.role[] | ListEnumroleFieldRefInput<$PrismaModel>
    not?: NestedEnumroleWithAggregatesFilter<$PrismaModel> | $Enums.role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumroleFilter<$PrismaModel>
    _max?: NestedEnumroleFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumsecteurActiviteFilter<$PrismaModel = never> = {
    equals?: $Enums.secteurActivite | EnumsecteurActiviteFieldRefInput<$PrismaModel>
    in?: $Enums.secteurActivite[] | ListEnumsecteurActiviteFieldRefInput<$PrismaModel>
    notIn?: $Enums.secteurActivite[] | ListEnumsecteurActiviteFieldRefInput<$PrismaModel>
    not?: NestedEnumsecteurActiviteFilter<$PrismaModel> | $Enums.secteurActivite
  }

  export type EnumtypeSocieteFilter<$PrismaModel = never> = {
    equals?: $Enums.typeSociete | EnumtypeSocieteFieldRefInput<$PrismaModel>
    in?: $Enums.typeSociete[] | ListEnumtypeSocieteFieldRefInput<$PrismaModel>
    notIn?: $Enums.typeSociete[] | ListEnumtypeSocieteFieldRefInput<$PrismaModel>
    not?: NestedEnumtypeSocieteFilter<$PrismaModel> | $Enums.typeSociete
  }

  export type UserListRelationFilter = {
    every?: userWhereInput
    some?: userWhereInput
    none?: userWhereInput
  }

  export type userOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type companyCountOrderByAggregateInput = {
    id?: SortOrder
    siret?: SortOrder
    nomSociete?: SortOrder
    codePostal?: SortOrder
    adresse?: SortOrder
    ville?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    secteurActivite?: SortOrder
    typeSociete?: SortOrder
  }

  export type companyAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type companyMaxOrderByAggregateInput = {
    id?: SortOrder
    siret?: SortOrder
    nomSociete?: SortOrder
    codePostal?: SortOrder
    adresse?: SortOrder
    ville?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    secteurActivite?: SortOrder
    typeSociete?: SortOrder
  }

  export type companyMinOrderByAggregateInput = {
    id?: SortOrder
    siret?: SortOrder
    nomSociete?: SortOrder
    codePostal?: SortOrder
    adresse?: SortOrder
    ville?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    secteurActivite?: SortOrder
    typeSociete?: SortOrder
  }

  export type companySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumsecteurActiviteWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.secteurActivite | EnumsecteurActiviteFieldRefInput<$PrismaModel>
    in?: $Enums.secteurActivite[] | ListEnumsecteurActiviteFieldRefInput<$PrismaModel>
    notIn?: $Enums.secteurActivite[] | ListEnumsecteurActiviteFieldRefInput<$PrismaModel>
    not?: NestedEnumsecteurActiviteWithAggregatesFilter<$PrismaModel> | $Enums.secteurActivite
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumsecteurActiviteFilter<$PrismaModel>
    _max?: NestedEnumsecteurActiviteFilter<$PrismaModel>
  }

  export type EnumtypeSocieteWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.typeSociete | EnumtypeSocieteFieldRefInput<$PrismaModel>
    in?: $Enums.typeSociete[] | ListEnumtypeSocieteFieldRefInput<$PrismaModel>
    notIn?: $Enums.typeSociete[] | ListEnumtypeSocieteFieldRefInput<$PrismaModel>
    not?: NestedEnumtypeSocieteWithAggregatesFilter<$PrismaModel> | $Enums.typeSociete
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumtypeSocieteFilter<$PrismaModel>
    _max?: NestedEnumtypeSocieteFilter<$PrismaModel>
  }

  export type UserScalarRelationFilter = {
    is?: userWhereInput
    isNot?: userWhereInput
  }

  export type profileImageCountOrderByAggregateInput = {
    id?: SortOrder
    path?: SortOrder
    userId?: SortOrder
  }

  export type profileImageAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type profileImageMaxOrderByAggregateInput = {
    id?: SortOrder
    path?: SortOrder
    userId?: SortOrder
  }

  export type profileImageMinOrderByAggregateInput = {
    id?: SortOrder
    path?: SortOrder
    userId?: SortOrder
  }

  export type profileImageSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type AnnoncesScalarRelationFilter = {
    is?: annoncesWhereInput
    isNot?: annoncesWhereInput
  }

  export type favorisCountOrderByAggregateInput = {
    id?: SortOrder
    saveDate?: SortOrder
    userId?: SortOrder
    annonceId?: SortOrder
  }

  export type favorisAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    annonceId?: SortOrder
  }

  export type favorisMaxOrderByAggregateInput = {
    id?: SortOrder
    saveDate?: SortOrder
    userId?: SortOrder
    annonceId?: SortOrder
  }

  export type favorisMinOrderByAggregateInput = {
    id?: SortOrder
    saveDate?: SortOrder
    userId?: SortOrder
    annonceId?: SortOrder
  }

  export type favorisSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    annonceId?: SortOrder
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type EnumtypeTarifNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.typeTarif | EnumtypeTarifFieldRefInput<$PrismaModel> | null
    in?: $Enums.typeTarif[] | ListEnumtypeTarifFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.typeTarif[] | ListEnumtypeTarifFieldRefInput<$PrismaModel> | null
    not?: NestedEnumtypeTarifNullableFilter<$PrismaModel> | $Enums.typeTarif | null
  }

  export type EnumpriorityNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.priority | EnumpriorityFieldRefInput<$PrismaModel> | null
    in?: $Enums.priority[] | ListEnumpriorityFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.priority[] | ListEnumpriorityFieldRefInput<$PrismaModel> | null
    not?: NestedEnumpriorityNullableFilter<$PrismaModel> | $Enums.priority | null
  }

  export type EnumstatutNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.statut | EnumstatutFieldRefInput<$PrismaModel> | null
    in?: $Enums.statut[] | ListEnumstatutFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.statut[] | ListEnumstatutFieldRefInput<$PrismaModel> | null
    not?: NestedEnumstatutNullableFilter<$PrismaModel> | $Enums.statut | null
  }

  export type EnumcategorieAnnonceFilter<$PrismaModel = never> = {
    equals?: $Enums.categorieAnnonce | EnumcategorieAnnonceFieldRefInput<$PrismaModel>
    in?: $Enums.categorieAnnonce[] | ListEnumcategorieAnnonceFieldRefInput<$PrismaModel>
    notIn?: $Enums.categorieAnnonce[] | ListEnumcategorieAnnonceFieldRefInput<$PrismaModel>
    not?: NestedEnumcategorieAnnonceFilter<$PrismaModel> | $Enums.categorieAnnonce
  }

  export type ImageAnnonceListRelationFilter = {
    every?: imageAnnonceWhereInput
    some?: imageAnnonceWhereInput
    none?: imageAnnonceWhereInput
  }

  export type imageAnnonceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type annoncesCountOrderByAggregateInput = {
    id?: SortOrder
    titre?: SortOrder
    description?: SortOrder
    prix?: SortOrder
    typeTarif?: SortOrder
    priority?: SortOrder
    localisation?: SortOrder
    adresse?: SortOrder
    statut?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    categorieAnnonce?: SortOrder
    sousCategorie?: SortOrder
    userId?: SortOrder
    priceId?: SortOrder
  }

  export type annoncesAvgOrderByAggregateInput = {
    id?: SortOrder
    prix?: SortOrder
    userId?: SortOrder
  }

  export type annoncesMaxOrderByAggregateInput = {
    id?: SortOrder
    titre?: SortOrder
    description?: SortOrder
    prix?: SortOrder
    typeTarif?: SortOrder
    priority?: SortOrder
    localisation?: SortOrder
    adresse?: SortOrder
    statut?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    categorieAnnonce?: SortOrder
    sousCategorie?: SortOrder
    userId?: SortOrder
    priceId?: SortOrder
  }

  export type annoncesMinOrderByAggregateInput = {
    id?: SortOrder
    titre?: SortOrder
    description?: SortOrder
    prix?: SortOrder
    typeTarif?: SortOrder
    priority?: SortOrder
    localisation?: SortOrder
    adresse?: SortOrder
    statut?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    categorieAnnonce?: SortOrder
    sousCategorie?: SortOrder
    userId?: SortOrder
    priceId?: SortOrder
  }

  export type annoncesSumOrderByAggregateInput = {
    id?: SortOrder
    prix?: SortOrder
    userId?: SortOrder
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type EnumtypeTarifNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.typeTarif | EnumtypeTarifFieldRefInput<$PrismaModel> | null
    in?: $Enums.typeTarif[] | ListEnumtypeTarifFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.typeTarif[] | ListEnumtypeTarifFieldRefInput<$PrismaModel> | null
    not?: NestedEnumtypeTarifNullableWithAggregatesFilter<$PrismaModel> | $Enums.typeTarif | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumtypeTarifNullableFilter<$PrismaModel>
    _max?: NestedEnumtypeTarifNullableFilter<$PrismaModel>
  }

  export type EnumpriorityNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.priority | EnumpriorityFieldRefInput<$PrismaModel> | null
    in?: $Enums.priority[] | ListEnumpriorityFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.priority[] | ListEnumpriorityFieldRefInput<$PrismaModel> | null
    not?: NestedEnumpriorityNullableWithAggregatesFilter<$PrismaModel> | $Enums.priority | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumpriorityNullableFilter<$PrismaModel>
    _max?: NestedEnumpriorityNullableFilter<$PrismaModel>
  }

  export type EnumstatutNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.statut | EnumstatutFieldRefInput<$PrismaModel> | null
    in?: $Enums.statut[] | ListEnumstatutFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.statut[] | ListEnumstatutFieldRefInput<$PrismaModel> | null
    not?: NestedEnumstatutNullableWithAggregatesFilter<$PrismaModel> | $Enums.statut | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumstatutNullableFilter<$PrismaModel>
    _max?: NestedEnumstatutNullableFilter<$PrismaModel>
  }

  export type EnumcategorieAnnonceWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.categorieAnnonce | EnumcategorieAnnonceFieldRefInput<$PrismaModel>
    in?: $Enums.categorieAnnonce[] | ListEnumcategorieAnnonceFieldRefInput<$PrismaModel>
    notIn?: $Enums.categorieAnnonce[] | ListEnumcategorieAnnonceFieldRefInput<$PrismaModel>
    not?: NestedEnumcategorieAnnonceWithAggregatesFilter<$PrismaModel> | $Enums.categorieAnnonce
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumcategorieAnnonceFilter<$PrismaModel>
    _max?: NestedEnumcategorieAnnonceFilter<$PrismaModel>
  }

  export type imageAnnonceCountOrderByAggregateInput = {
    id?: SortOrder
    path?: SortOrder
    annoncesId?: SortOrder
  }

  export type imageAnnonceAvgOrderByAggregateInput = {
    id?: SortOrder
    annoncesId?: SortOrder
  }

  export type imageAnnonceMaxOrderByAggregateInput = {
    id?: SortOrder
    path?: SortOrder
    annoncesId?: SortOrder
  }

  export type imageAnnonceMinOrderByAggregateInput = {
    id?: SortOrder
    path?: SortOrder
    annoncesId?: SortOrder
  }

  export type imageAnnonceSumOrderByAggregateInput = {
    id?: SortOrder
    annoncesId?: SortOrder
  }

  export type commentaireCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    commentaire?: SortOrder
    note?: SortOrder
    annoncesId?: SortOrder
    userId?: SortOrder
  }

  export type commentaireAvgOrderByAggregateInput = {
    id?: SortOrder
    note?: SortOrder
    annoncesId?: SortOrder
    userId?: SortOrder
  }

  export type commentaireMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    commentaire?: SortOrder
    note?: SortOrder
    annoncesId?: SortOrder
    userId?: SortOrder
  }

  export type commentaireMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    commentaire?: SortOrder
    note?: SortOrder
    annoncesId?: SortOrder
    userId?: SortOrder
  }

  export type commentaireSumOrderByAggregateInput = {
    id?: SortOrder
    note?: SortOrder
    annoncesId?: SortOrder
    userId?: SortOrder
  }

  export type temoignagesCountOrderByAggregateInput = {
    id?: SortOrder
    temoignage?: SortOrder
    noteLilee?: SortOrder
    ville?: SortOrder
    pays?: SortOrder
    userId?: SortOrder
  }

  export type temoignagesAvgOrderByAggregateInput = {
    id?: SortOrder
    noteLilee?: SortOrder
    userId?: SortOrder
  }

  export type temoignagesMaxOrderByAggregateInput = {
    id?: SortOrder
    temoignage?: SortOrder
    noteLilee?: SortOrder
    ville?: SortOrder
    pays?: SortOrder
    userId?: SortOrder
  }

  export type temoignagesMinOrderByAggregateInput = {
    id?: SortOrder
    temoignage?: SortOrder
    noteLilee?: SortOrder
    ville?: SortOrder
    pays?: SortOrder
    userId?: SortOrder
  }

  export type temoignagesSumOrderByAggregateInput = {
    id?: SortOrder
    noteLilee?: SortOrder
    userId?: SortOrder
  }

  export type adresseFacturationCountOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    adresse?: SortOrder
    codePostal?: SortOrder
    ville?: SortOrder
    pays?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type adresseFacturationAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type adresseFacturationMaxOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    adresse?: SortOrder
    codePostal?: SortOrder
    ville?: SortOrder
    pays?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type adresseFacturationMinOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    adresse?: SortOrder
    codePostal?: SortOrder
    ville?: SortOrder
    pays?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type adresseFacturationSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type EnumstatutPartenaireFilter<$PrismaModel = never> = {
    equals?: $Enums.statutPartenaire | EnumstatutPartenaireFieldRefInput<$PrismaModel>
    in?: $Enums.statutPartenaire[] | ListEnumstatutPartenaireFieldRefInput<$PrismaModel>
    notIn?: $Enums.statutPartenaire[] | ListEnumstatutPartenaireFieldRefInput<$PrismaModel>
    not?: NestedEnumstatutPartenaireFilter<$PrismaModel> | $Enums.statutPartenaire
  }

  export type EnumdureeFilter<$PrismaModel = never> = {
    equals?: $Enums.duree | EnumdureeFieldRefInput<$PrismaModel>
    in?: $Enums.duree[] | ListEnumdureeFieldRefInput<$PrismaModel>
    notIn?: $Enums.duree[] | ListEnumdureeFieldRefInput<$PrismaModel>
    not?: NestedEnumdureeFilter<$PrismaModel> | $Enums.duree
  }

  export type LogoListRelationFilter = {
    every?: logoWhereInput
    some?: logoWhereInput
    none?: logoWhereInput
  }

  export type ContenuPartenaireListRelationFilter = {
    every?: contenuPartenaireWhereInput
    some?: contenuPartenaireWhereInput
    none?: contenuPartenaireWhereInput
  }

  export type logoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type contenuPartenaireOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type engagementCountOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    statutPartenaire?: SortOrder
    siteWeb?: SortOrder
    adresse?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    facebook?: SortOrder
    instagram?: SortOrder
    twitter?: SortOrder
    linkedin?: SortOrder
    tikTok?: SortOrder
    youtube?: SortOrder
    duree?: SortOrder
    description?: SortOrder
  }

  export type engagementAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type engagementMaxOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    statutPartenaire?: SortOrder
    siteWeb?: SortOrder
    adresse?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    facebook?: SortOrder
    instagram?: SortOrder
    twitter?: SortOrder
    linkedin?: SortOrder
    tikTok?: SortOrder
    youtube?: SortOrder
    duree?: SortOrder
    description?: SortOrder
  }

  export type engagementMinOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    statutPartenaire?: SortOrder
    siteWeb?: SortOrder
    adresse?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    facebook?: SortOrder
    instagram?: SortOrder
    twitter?: SortOrder
    linkedin?: SortOrder
    tikTok?: SortOrder
    youtube?: SortOrder
    duree?: SortOrder
    description?: SortOrder
  }

  export type engagementSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumstatutPartenaireWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.statutPartenaire | EnumstatutPartenaireFieldRefInput<$PrismaModel>
    in?: $Enums.statutPartenaire[] | ListEnumstatutPartenaireFieldRefInput<$PrismaModel>
    notIn?: $Enums.statutPartenaire[] | ListEnumstatutPartenaireFieldRefInput<$PrismaModel>
    not?: NestedEnumstatutPartenaireWithAggregatesFilter<$PrismaModel> | $Enums.statutPartenaire
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumstatutPartenaireFilter<$PrismaModel>
    _max?: NestedEnumstatutPartenaireFilter<$PrismaModel>
  }

  export type EnumdureeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.duree | EnumdureeFieldRefInput<$PrismaModel>
    in?: $Enums.duree[] | ListEnumdureeFieldRefInput<$PrismaModel>
    notIn?: $Enums.duree[] | ListEnumdureeFieldRefInput<$PrismaModel>
    not?: NestedEnumdureeWithAggregatesFilter<$PrismaModel> | $Enums.duree
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumdureeFilter<$PrismaModel>
    _max?: NestedEnumdureeFilter<$PrismaModel>
  }

  export type EngagementScalarRelationFilter = {
    is?: engagementWhereInput
    isNot?: engagementWhereInput
  }

  export type contenuPartenaireCountOrderByAggregateInput = {
    id?: SortOrder
    path?: SortOrder
    engagementId?: SortOrder
  }

  export type contenuPartenaireAvgOrderByAggregateInput = {
    id?: SortOrder
    engagementId?: SortOrder
  }

  export type contenuPartenaireMaxOrderByAggregateInput = {
    id?: SortOrder
    path?: SortOrder
    engagementId?: SortOrder
  }

  export type contenuPartenaireMinOrderByAggregateInput = {
    id?: SortOrder
    path?: SortOrder
    engagementId?: SortOrder
  }

  export type contenuPartenaireSumOrderByAggregateInput = {
    id?: SortOrder
    engagementId?: SortOrder
  }

  export type logoCountOrderByAggregateInput = {
    id?: SortOrder
    path?: SortOrder
    engagementId?: SortOrder
  }

  export type logoAvgOrderByAggregateInput = {
    id?: SortOrder
    engagementId?: SortOrder
  }

  export type logoMaxOrderByAggregateInput = {
    id?: SortOrder
    path?: SortOrder
    engagementId?: SortOrder
  }

  export type logoMinOrderByAggregateInput = {
    id?: SortOrder
    path?: SortOrder
    engagementId?: SortOrder
  }

  export type logoSumOrderByAggregateInput = {
    id?: SortOrder
    engagementId?: SortOrder
  }

  export type ImageListRelationFilter = {
    every?: imageWhereInput
    some?: imageWhereInput
    none?: imageWhereInput
  }

  export type imageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type articleCountOrderByAggregateInput = {
    id?: SortOrder
    titre?: SortOrder
    contenu?: SortOrder
    categorieArticle?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type articleAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type articleMaxOrderByAggregateInput = {
    id?: SortOrder
    titre?: SortOrder
    contenu?: SortOrder
    categorieArticle?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type articleMinOrderByAggregateInput = {
    id?: SortOrder
    titre?: SortOrder
    contenu?: SortOrder
    categorieArticle?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type articleSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ArticleScalarRelationFilter = {
    is?: articleWhereInput
    isNot?: articleWhereInput
  }

  export type imageCountOrderByAggregateInput = {
    id?: SortOrder
    path?: SortOrder
    articleId?: SortOrder
  }

  export type imageAvgOrderByAggregateInput = {
    id?: SortOrder
    articleId?: SortOrder
  }

  export type imageMaxOrderByAggregateInput = {
    id?: SortOrder
    path?: SortOrder
    articleId?: SortOrder
  }

  export type imageMinOrderByAggregateInput = {
    id?: SortOrder
    path?: SortOrder
    articleId?: SortOrder
  }

  export type imageSumOrderByAggregateInput = {
    id?: SortOrder
    articleId?: SortOrder
  }
  export type JsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type EnumtransactionStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.transactionStatus | EnumtransactionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.transactionStatus[] | ListEnumtransactionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.transactionStatus[] | ListEnumtransactionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumtransactionStatusFilter<$PrismaModel> | $Enums.transactionStatus
  }

  export type transactionsCountOrderByAggregateInput = {
    id?: SortOrder
    dateRange?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    annonceId?: SortOrder
    userId?: SortOrder
  }

  export type transactionsAvgOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    annonceId?: SortOrder
    userId?: SortOrder
  }

  export type transactionsMaxOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    annonceId?: SortOrder
    userId?: SortOrder
  }

  export type transactionsMinOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    annonceId?: SortOrder
    userId?: SortOrder
  }

  export type transactionsSumOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    annonceId?: SortOrder
    userId?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type EnumtransactionStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.transactionStatus | EnumtransactionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.transactionStatus[] | ListEnumtransactionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.transactionStatus[] | ListEnumtransactionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumtransactionStatusWithAggregatesFilter<$PrismaModel> | $Enums.transactionStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumtransactionStatusFilter<$PrismaModel>
    _max?: NestedEnumtransactionStatusFilter<$PrismaModel>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type profileImageCreateNestedManyWithoutUserInput = {
    create?: XOR<profileImageCreateWithoutUserInput, profileImageUncheckedCreateWithoutUserInput> | profileImageCreateWithoutUserInput[] | profileImageUncheckedCreateWithoutUserInput[]
    connectOrCreate?: profileImageCreateOrConnectWithoutUserInput | profileImageCreateOrConnectWithoutUserInput[]
    createMany?: profileImageCreateManyUserInputEnvelope
    connect?: profileImageWhereUniqueInput | profileImageWhereUniqueInput[]
  }

  export type companyCreateNestedOneWithoutUsersInput = {
    create?: XOR<companyCreateWithoutUsersInput, companyUncheckedCreateWithoutUsersInput>
    connectOrCreate?: companyCreateOrConnectWithoutUsersInput
    connect?: companyWhereUniqueInput
  }

  export type annoncesCreateNestedManyWithoutUserInput = {
    create?: XOR<annoncesCreateWithoutUserInput, annoncesUncheckedCreateWithoutUserInput> | annoncesCreateWithoutUserInput[] | annoncesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: annoncesCreateOrConnectWithoutUserInput | annoncesCreateOrConnectWithoutUserInput[]
    createMany?: annoncesCreateManyUserInputEnvelope
    connect?: annoncesWhereUniqueInput | annoncesWhereUniqueInput[]
  }

  export type commentaireCreateNestedManyWithoutUserInput = {
    create?: XOR<commentaireCreateWithoutUserInput, commentaireUncheckedCreateWithoutUserInput> | commentaireCreateWithoutUserInput[] | commentaireUncheckedCreateWithoutUserInput[]
    connectOrCreate?: commentaireCreateOrConnectWithoutUserInput | commentaireCreateOrConnectWithoutUserInput[]
    createMany?: commentaireCreateManyUserInputEnvelope
    connect?: commentaireWhereUniqueInput | commentaireWhereUniqueInput[]
  }

  export type favorisCreateNestedManyWithoutUserInput = {
    create?: XOR<favorisCreateWithoutUserInput, favorisUncheckedCreateWithoutUserInput> | favorisCreateWithoutUserInput[] | favorisUncheckedCreateWithoutUserInput[]
    connectOrCreate?: favorisCreateOrConnectWithoutUserInput | favorisCreateOrConnectWithoutUserInput[]
    createMany?: favorisCreateManyUserInputEnvelope
    connect?: favorisWhereUniqueInput | favorisWhereUniqueInput[]
  }

  export type temoignagesCreateNestedManyWithoutUserInput = {
    create?: XOR<temoignagesCreateWithoutUserInput, temoignagesUncheckedCreateWithoutUserInput> | temoignagesCreateWithoutUserInput[] | temoignagesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: temoignagesCreateOrConnectWithoutUserInput | temoignagesCreateOrConnectWithoutUserInput[]
    createMany?: temoignagesCreateManyUserInputEnvelope
    connect?: temoignagesWhereUniqueInput | temoignagesWhereUniqueInput[]
  }

  export type transactionsCreateNestedManyWithoutUserInput = {
    create?: XOR<transactionsCreateWithoutUserInput, transactionsUncheckedCreateWithoutUserInput> | transactionsCreateWithoutUserInput[] | transactionsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: transactionsCreateOrConnectWithoutUserInput | transactionsCreateOrConnectWithoutUserInput[]
    createMany?: transactionsCreateManyUserInputEnvelope
    connect?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
  }

  export type adresseFacturationCreateNestedManyWithoutUserInput = {
    create?: XOR<adresseFacturationCreateWithoutUserInput, adresseFacturationUncheckedCreateWithoutUserInput> | adresseFacturationCreateWithoutUserInput[] | adresseFacturationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: adresseFacturationCreateOrConnectWithoutUserInput | adresseFacturationCreateOrConnectWithoutUserInput[]
    createMany?: adresseFacturationCreateManyUserInputEnvelope
    connect?: adresseFacturationWhereUniqueInput | adresseFacturationWhereUniqueInput[]
  }

  export type profileImageUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<profileImageCreateWithoutUserInput, profileImageUncheckedCreateWithoutUserInput> | profileImageCreateWithoutUserInput[] | profileImageUncheckedCreateWithoutUserInput[]
    connectOrCreate?: profileImageCreateOrConnectWithoutUserInput | profileImageCreateOrConnectWithoutUserInput[]
    createMany?: profileImageCreateManyUserInputEnvelope
    connect?: profileImageWhereUniqueInput | profileImageWhereUniqueInput[]
  }

  export type annoncesUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<annoncesCreateWithoutUserInput, annoncesUncheckedCreateWithoutUserInput> | annoncesCreateWithoutUserInput[] | annoncesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: annoncesCreateOrConnectWithoutUserInput | annoncesCreateOrConnectWithoutUserInput[]
    createMany?: annoncesCreateManyUserInputEnvelope
    connect?: annoncesWhereUniqueInput | annoncesWhereUniqueInput[]
  }

  export type commentaireUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<commentaireCreateWithoutUserInput, commentaireUncheckedCreateWithoutUserInput> | commentaireCreateWithoutUserInput[] | commentaireUncheckedCreateWithoutUserInput[]
    connectOrCreate?: commentaireCreateOrConnectWithoutUserInput | commentaireCreateOrConnectWithoutUserInput[]
    createMany?: commentaireCreateManyUserInputEnvelope
    connect?: commentaireWhereUniqueInput | commentaireWhereUniqueInput[]
  }

  export type favorisUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<favorisCreateWithoutUserInput, favorisUncheckedCreateWithoutUserInput> | favorisCreateWithoutUserInput[] | favorisUncheckedCreateWithoutUserInput[]
    connectOrCreate?: favorisCreateOrConnectWithoutUserInput | favorisCreateOrConnectWithoutUserInput[]
    createMany?: favorisCreateManyUserInputEnvelope
    connect?: favorisWhereUniqueInput | favorisWhereUniqueInput[]
  }

  export type temoignagesUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<temoignagesCreateWithoutUserInput, temoignagesUncheckedCreateWithoutUserInput> | temoignagesCreateWithoutUserInput[] | temoignagesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: temoignagesCreateOrConnectWithoutUserInput | temoignagesCreateOrConnectWithoutUserInput[]
    createMany?: temoignagesCreateManyUserInputEnvelope
    connect?: temoignagesWhereUniqueInput | temoignagesWhereUniqueInput[]
  }

  export type transactionsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<transactionsCreateWithoutUserInput, transactionsUncheckedCreateWithoutUserInput> | transactionsCreateWithoutUserInput[] | transactionsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: transactionsCreateOrConnectWithoutUserInput | transactionsCreateOrConnectWithoutUserInput[]
    createMany?: transactionsCreateManyUserInputEnvelope
    connect?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
  }

  export type adresseFacturationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<adresseFacturationCreateWithoutUserInput, adresseFacturationUncheckedCreateWithoutUserInput> | adresseFacturationCreateWithoutUserInput[] | adresseFacturationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: adresseFacturationCreateOrConnectWithoutUserInput | adresseFacturationCreateOrConnectWithoutUserInput[]
    createMany?: adresseFacturationCreateManyUserInputEnvelope
    connect?: adresseFacturationWhereUniqueInput | adresseFacturationWhereUniqueInput[]
  }

  export type EnumstatutUserFieldUpdateOperationsInput = {
    set?: $Enums.statutUser
  }

  export type EnumroleFieldUpdateOperationsInput = {
    set?: $Enums.role
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type profileImageUpdateManyWithoutUserNestedInput = {
    create?: XOR<profileImageCreateWithoutUserInput, profileImageUncheckedCreateWithoutUserInput> | profileImageCreateWithoutUserInput[] | profileImageUncheckedCreateWithoutUserInput[]
    connectOrCreate?: profileImageCreateOrConnectWithoutUserInput | profileImageCreateOrConnectWithoutUserInput[]
    upsert?: profileImageUpsertWithWhereUniqueWithoutUserInput | profileImageUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: profileImageCreateManyUserInputEnvelope
    set?: profileImageWhereUniqueInput | profileImageWhereUniqueInput[]
    disconnect?: profileImageWhereUniqueInput | profileImageWhereUniqueInput[]
    delete?: profileImageWhereUniqueInput | profileImageWhereUniqueInput[]
    connect?: profileImageWhereUniqueInput | profileImageWhereUniqueInput[]
    update?: profileImageUpdateWithWhereUniqueWithoutUserInput | profileImageUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: profileImageUpdateManyWithWhereWithoutUserInput | profileImageUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: profileImageScalarWhereInput | profileImageScalarWhereInput[]
  }

  export type companyUpdateOneWithoutUsersNestedInput = {
    create?: XOR<companyCreateWithoutUsersInput, companyUncheckedCreateWithoutUsersInput>
    connectOrCreate?: companyCreateOrConnectWithoutUsersInput
    upsert?: companyUpsertWithoutUsersInput
    disconnect?: companyWhereInput | boolean
    delete?: companyWhereInput | boolean
    connect?: companyWhereUniqueInput
    update?: XOR<XOR<companyUpdateToOneWithWhereWithoutUsersInput, companyUpdateWithoutUsersInput>, companyUncheckedUpdateWithoutUsersInput>
  }

  export type annoncesUpdateManyWithoutUserNestedInput = {
    create?: XOR<annoncesCreateWithoutUserInput, annoncesUncheckedCreateWithoutUserInput> | annoncesCreateWithoutUserInput[] | annoncesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: annoncesCreateOrConnectWithoutUserInput | annoncesCreateOrConnectWithoutUserInput[]
    upsert?: annoncesUpsertWithWhereUniqueWithoutUserInput | annoncesUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: annoncesCreateManyUserInputEnvelope
    set?: annoncesWhereUniqueInput | annoncesWhereUniqueInput[]
    disconnect?: annoncesWhereUniqueInput | annoncesWhereUniqueInput[]
    delete?: annoncesWhereUniqueInput | annoncesWhereUniqueInput[]
    connect?: annoncesWhereUniqueInput | annoncesWhereUniqueInput[]
    update?: annoncesUpdateWithWhereUniqueWithoutUserInput | annoncesUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: annoncesUpdateManyWithWhereWithoutUserInput | annoncesUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: annoncesScalarWhereInput | annoncesScalarWhereInput[]
  }

  export type commentaireUpdateManyWithoutUserNestedInput = {
    create?: XOR<commentaireCreateWithoutUserInput, commentaireUncheckedCreateWithoutUserInput> | commentaireCreateWithoutUserInput[] | commentaireUncheckedCreateWithoutUserInput[]
    connectOrCreate?: commentaireCreateOrConnectWithoutUserInput | commentaireCreateOrConnectWithoutUserInput[]
    upsert?: commentaireUpsertWithWhereUniqueWithoutUserInput | commentaireUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: commentaireCreateManyUserInputEnvelope
    set?: commentaireWhereUniqueInput | commentaireWhereUniqueInput[]
    disconnect?: commentaireWhereUniqueInput | commentaireWhereUniqueInput[]
    delete?: commentaireWhereUniqueInput | commentaireWhereUniqueInput[]
    connect?: commentaireWhereUniqueInput | commentaireWhereUniqueInput[]
    update?: commentaireUpdateWithWhereUniqueWithoutUserInput | commentaireUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: commentaireUpdateManyWithWhereWithoutUserInput | commentaireUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: commentaireScalarWhereInput | commentaireScalarWhereInput[]
  }

  export type favorisUpdateManyWithoutUserNestedInput = {
    create?: XOR<favorisCreateWithoutUserInput, favorisUncheckedCreateWithoutUserInput> | favorisCreateWithoutUserInput[] | favorisUncheckedCreateWithoutUserInput[]
    connectOrCreate?: favorisCreateOrConnectWithoutUserInput | favorisCreateOrConnectWithoutUserInput[]
    upsert?: favorisUpsertWithWhereUniqueWithoutUserInput | favorisUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: favorisCreateManyUserInputEnvelope
    set?: favorisWhereUniqueInput | favorisWhereUniqueInput[]
    disconnect?: favorisWhereUniqueInput | favorisWhereUniqueInput[]
    delete?: favorisWhereUniqueInput | favorisWhereUniqueInput[]
    connect?: favorisWhereUniqueInput | favorisWhereUniqueInput[]
    update?: favorisUpdateWithWhereUniqueWithoutUserInput | favorisUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: favorisUpdateManyWithWhereWithoutUserInput | favorisUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: favorisScalarWhereInput | favorisScalarWhereInput[]
  }

  export type temoignagesUpdateManyWithoutUserNestedInput = {
    create?: XOR<temoignagesCreateWithoutUserInput, temoignagesUncheckedCreateWithoutUserInput> | temoignagesCreateWithoutUserInput[] | temoignagesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: temoignagesCreateOrConnectWithoutUserInput | temoignagesCreateOrConnectWithoutUserInput[]
    upsert?: temoignagesUpsertWithWhereUniqueWithoutUserInput | temoignagesUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: temoignagesCreateManyUserInputEnvelope
    set?: temoignagesWhereUniqueInput | temoignagesWhereUniqueInput[]
    disconnect?: temoignagesWhereUniqueInput | temoignagesWhereUniqueInput[]
    delete?: temoignagesWhereUniqueInput | temoignagesWhereUniqueInput[]
    connect?: temoignagesWhereUniqueInput | temoignagesWhereUniqueInput[]
    update?: temoignagesUpdateWithWhereUniqueWithoutUserInput | temoignagesUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: temoignagesUpdateManyWithWhereWithoutUserInput | temoignagesUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: temoignagesScalarWhereInput | temoignagesScalarWhereInput[]
  }

  export type transactionsUpdateManyWithoutUserNestedInput = {
    create?: XOR<transactionsCreateWithoutUserInput, transactionsUncheckedCreateWithoutUserInput> | transactionsCreateWithoutUserInput[] | transactionsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: transactionsCreateOrConnectWithoutUserInput | transactionsCreateOrConnectWithoutUserInput[]
    upsert?: transactionsUpsertWithWhereUniqueWithoutUserInput | transactionsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: transactionsCreateManyUserInputEnvelope
    set?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    disconnect?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    delete?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    connect?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    update?: transactionsUpdateWithWhereUniqueWithoutUserInput | transactionsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: transactionsUpdateManyWithWhereWithoutUserInput | transactionsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: transactionsScalarWhereInput | transactionsScalarWhereInput[]
  }

  export type adresseFacturationUpdateManyWithoutUserNestedInput = {
    create?: XOR<adresseFacturationCreateWithoutUserInput, adresseFacturationUncheckedCreateWithoutUserInput> | adresseFacturationCreateWithoutUserInput[] | adresseFacturationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: adresseFacturationCreateOrConnectWithoutUserInput | adresseFacturationCreateOrConnectWithoutUserInput[]
    upsert?: adresseFacturationUpsertWithWhereUniqueWithoutUserInput | adresseFacturationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: adresseFacturationCreateManyUserInputEnvelope
    set?: adresseFacturationWhereUniqueInput | adresseFacturationWhereUniqueInput[]
    disconnect?: adresseFacturationWhereUniqueInput | adresseFacturationWhereUniqueInput[]
    delete?: adresseFacturationWhereUniqueInput | adresseFacturationWhereUniqueInput[]
    connect?: adresseFacturationWhereUniqueInput | adresseFacturationWhereUniqueInput[]
    update?: adresseFacturationUpdateWithWhereUniqueWithoutUserInput | adresseFacturationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: adresseFacturationUpdateManyWithWhereWithoutUserInput | adresseFacturationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: adresseFacturationScalarWhereInput | adresseFacturationScalarWhereInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type profileImageUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<profileImageCreateWithoutUserInput, profileImageUncheckedCreateWithoutUserInput> | profileImageCreateWithoutUserInput[] | profileImageUncheckedCreateWithoutUserInput[]
    connectOrCreate?: profileImageCreateOrConnectWithoutUserInput | profileImageCreateOrConnectWithoutUserInput[]
    upsert?: profileImageUpsertWithWhereUniqueWithoutUserInput | profileImageUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: profileImageCreateManyUserInputEnvelope
    set?: profileImageWhereUniqueInput | profileImageWhereUniqueInput[]
    disconnect?: profileImageWhereUniqueInput | profileImageWhereUniqueInput[]
    delete?: profileImageWhereUniqueInput | profileImageWhereUniqueInput[]
    connect?: profileImageWhereUniqueInput | profileImageWhereUniqueInput[]
    update?: profileImageUpdateWithWhereUniqueWithoutUserInput | profileImageUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: profileImageUpdateManyWithWhereWithoutUserInput | profileImageUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: profileImageScalarWhereInput | profileImageScalarWhereInput[]
  }

  export type annoncesUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<annoncesCreateWithoutUserInput, annoncesUncheckedCreateWithoutUserInput> | annoncesCreateWithoutUserInput[] | annoncesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: annoncesCreateOrConnectWithoutUserInput | annoncesCreateOrConnectWithoutUserInput[]
    upsert?: annoncesUpsertWithWhereUniqueWithoutUserInput | annoncesUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: annoncesCreateManyUserInputEnvelope
    set?: annoncesWhereUniqueInput | annoncesWhereUniqueInput[]
    disconnect?: annoncesWhereUniqueInput | annoncesWhereUniqueInput[]
    delete?: annoncesWhereUniqueInput | annoncesWhereUniqueInput[]
    connect?: annoncesWhereUniqueInput | annoncesWhereUniqueInput[]
    update?: annoncesUpdateWithWhereUniqueWithoutUserInput | annoncesUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: annoncesUpdateManyWithWhereWithoutUserInput | annoncesUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: annoncesScalarWhereInput | annoncesScalarWhereInput[]
  }

  export type commentaireUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<commentaireCreateWithoutUserInput, commentaireUncheckedCreateWithoutUserInput> | commentaireCreateWithoutUserInput[] | commentaireUncheckedCreateWithoutUserInput[]
    connectOrCreate?: commentaireCreateOrConnectWithoutUserInput | commentaireCreateOrConnectWithoutUserInput[]
    upsert?: commentaireUpsertWithWhereUniqueWithoutUserInput | commentaireUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: commentaireCreateManyUserInputEnvelope
    set?: commentaireWhereUniqueInput | commentaireWhereUniqueInput[]
    disconnect?: commentaireWhereUniqueInput | commentaireWhereUniqueInput[]
    delete?: commentaireWhereUniqueInput | commentaireWhereUniqueInput[]
    connect?: commentaireWhereUniqueInput | commentaireWhereUniqueInput[]
    update?: commentaireUpdateWithWhereUniqueWithoutUserInput | commentaireUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: commentaireUpdateManyWithWhereWithoutUserInput | commentaireUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: commentaireScalarWhereInput | commentaireScalarWhereInput[]
  }

  export type favorisUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<favorisCreateWithoutUserInput, favorisUncheckedCreateWithoutUserInput> | favorisCreateWithoutUserInput[] | favorisUncheckedCreateWithoutUserInput[]
    connectOrCreate?: favorisCreateOrConnectWithoutUserInput | favorisCreateOrConnectWithoutUserInput[]
    upsert?: favorisUpsertWithWhereUniqueWithoutUserInput | favorisUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: favorisCreateManyUserInputEnvelope
    set?: favorisWhereUniqueInput | favorisWhereUniqueInput[]
    disconnect?: favorisWhereUniqueInput | favorisWhereUniqueInput[]
    delete?: favorisWhereUniqueInput | favorisWhereUniqueInput[]
    connect?: favorisWhereUniqueInput | favorisWhereUniqueInput[]
    update?: favorisUpdateWithWhereUniqueWithoutUserInput | favorisUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: favorisUpdateManyWithWhereWithoutUserInput | favorisUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: favorisScalarWhereInput | favorisScalarWhereInput[]
  }

  export type temoignagesUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<temoignagesCreateWithoutUserInput, temoignagesUncheckedCreateWithoutUserInput> | temoignagesCreateWithoutUserInput[] | temoignagesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: temoignagesCreateOrConnectWithoutUserInput | temoignagesCreateOrConnectWithoutUserInput[]
    upsert?: temoignagesUpsertWithWhereUniqueWithoutUserInput | temoignagesUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: temoignagesCreateManyUserInputEnvelope
    set?: temoignagesWhereUniqueInput | temoignagesWhereUniqueInput[]
    disconnect?: temoignagesWhereUniqueInput | temoignagesWhereUniqueInput[]
    delete?: temoignagesWhereUniqueInput | temoignagesWhereUniqueInput[]
    connect?: temoignagesWhereUniqueInput | temoignagesWhereUniqueInput[]
    update?: temoignagesUpdateWithWhereUniqueWithoutUserInput | temoignagesUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: temoignagesUpdateManyWithWhereWithoutUserInput | temoignagesUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: temoignagesScalarWhereInput | temoignagesScalarWhereInput[]
  }

  export type transactionsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<transactionsCreateWithoutUserInput, transactionsUncheckedCreateWithoutUserInput> | transactionsCreateWithoutUserInput[] | transactionsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: transactionsCreateOrConnectWithoutUserInput | transactionsCreateOrConnectWithoutUserInput[]
    upsert?: transactionsUpsertWithWhereUniqueWithoutUserInput | transactionsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: transactionsCreateManyUserInputEnvelope
    set?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    disconnect?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    delete?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    connect?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    update?: transactionsUpdateWithWhereUniqueWithoutUserInput | transactionsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: transactionsUpdateManyWithWhereWithoutUserInput | transactionsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: transactionsScalarWhereInput | transactionsScalarWhereInput[]
  }

  export type adresseFacturationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<adresseFacturationCreateWithoutUserInput, adresseFacturationUncheckedCreateWithoutUserInput> | adresseFacturationCreateWithoutUserInput[] | adresseFacturationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: adresseFacturationCreateOrConnectWithoutUserInput | adresseFacturationCreateOrConnectWithoutUserInput[]
    upsert?: adresseFacturationUpsertWithWhereUniqueWithoutUserInput | adresseFacturationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: adresseFacturationCreateManyUserInputEnvelope
    set?: adresseFacturationWhereUniqueInput | adresseFacturationWhereUniqueInput[]
    disconnect?: adresseFacturationWhereUniqueInput | adresseFacturationWhereUniqueInput[]
    delete?: adresseFacturationWhereUniqueInput | adresseFacturationWhereUniqueInput[]
    connect?: adresseFacturationWhereUniqueInput | adresseFacturationWhereUniqueInput[]
    update?: adresseFacturationUpdateWithWhereUniqueWithoutUserInput | adresseFacturationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: adresseFacturationUpdateManyWithWhereWithoutUserInput | adresseFacturationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: adresseFacturationScalarWhereInput | adresseFacturationScalarWhereInput[]
  }

  export type userCreateNestedManyWithoutCompanyInput = {
    create?: XOR<userCreateWithoutCompanyInput, userUncheckedCreateWithoutCompanyInput> | userCreateWithoutCompanyInput[] | userUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: userCreateOrConnectWithoutCompanyInput | userCreateOrConnectWithoutCompanyInput[]
    createMany?: userCreateManyCompanyInputEnvelope
    connect?: userWhereUniqueInput | userWhereUniqueInput[]
  }

  export type userUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<userCreateWithoutCompanyInput, userUncheckedCreateWithoutCompanyInput> | userCreateWithoutCompanyInput[] | userUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: userCreateOrConnectWithoutCompanyInput | userCreateOrConnectWithoutCompanyInput[]
    createMany?: userCreateManyCompanyInputEnvelope
    connect?: userWhereUniqueInput | userWhereUniqueInput[]
  }

  export type EnumsecteurActiviteFieldUpdateOperationsInput = {
    set?: $Enums.secteurActivite
  }

  export type EnumtypeSocieteFieldUpdateOperationsInput = {
    set?: $Enums.typeSociete
  }

  export type userUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<userCreateWithoutCompanyInput, userUncheckedCreateWithoutCompanyInput> | userCreateWithoutCompanyInput[] | userUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: userCreateOrConnectWithoutCompanyInput | userCreateOrConnectWithoutCompanyInput[]
    upsert?: userUpsertWithWhereUniqueWithoutCompanyInput | userUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: userCreateManyCompanyInputEnvelope
    set?: userWhereUniqueInput | userWhereUniqueInput[]
    disconnect?: userWhereUniqueInput | userWhereUniqueInput[]
    delete?: userWhereUniqueInput | userWhereUniqueInput[]
    connect?: userWhereUniqueInput | userWhereUniqueInput[]
    update?: userUpdateWithWhereUniqueWithoutCompanyInput | userUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: userUpdateManyWithWhereWithoutCompanyInput | userUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: userScalarWhereInput | userScalarWhereInput[]
  }

  export type userUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<userCreateWithoutCompanyInput, userUncheckedCreateWithoutCompanyInput> | userCreateWithoutCompanyInput[] | userUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: userCreateOrConnectWithoutCompanyInput | userCreateOrConnectWithoutCompanyInput[]
    upsert?: userUpsertWithWhereUniqueWithoutCompanyInput | userUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: userCreateManyCompanyInputEnvelope
    set?: userWhereUniqueInput | userWhereUniqueInput[]
    disconnect?: userWhereUniqueInput | userWhereUniqueInput[]
    delete?: userWhereUniqueInput | userWhereUniqueInput[]
    connect?: userWhereUniqueInput | userWhereUniqueInput[]
    update?: userUpdateWithWhereUniqueWithoutCompanyInput | userUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: userUpdateManyWithWhereWithoutCompanyInput | userUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: userScalarWhereInput | userScalarWhereInput[]
  }

  export type userCreateNestedOneWithoutProfileImagesInput = {
    create?: XOR<userCreateWithoutProfileImagesInput, userUncheckedCreateWithoutProfileImagesInput>
    connectOrCreate?: userCreateOrConnectWithoutProfileImagesInput
    connect?: userWhereUniqueInput
  }

  export type userUpdateOneRequiredWithoutProfileImagesNestedInput = {
    create?: XOR<userCreateWithoutProfileImagesInput, userUncheckedCreateWithoutProfileImagesInput>
    connectOrCreate?: userCreateOrConnectWithoutProfileImagesInput
    upsert?: userUpsertWithoutProfileImagesInput
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutProfileImagesInput, userUpdateWithoutProfileImagesInput>, userUncheckedUpdateWithoutProfileImagesInput>
  }

  export type userCreateNestedOneWithoutFavorisInput = {
    create?: XOR<userCreateWithoutFavorisInput, userUncheckedCreateWithoutFavorisInput>
    connectOrCreate?: userCreateOrConnectWithoutFavorisInput
    connect?: userWhereUniqueInput
  }

  export type annoncesCreateNestedOneWithoutFavorisInput = {
    create?: XOR<annoncesCreateWithoutFavorisInput, annoncesUncheckedCreateWithoutFavorisInput>
    connectOrCreate?: annoncesCreateOrConnectWithoutFavorisInput
    connect?: annoncesWhereUniqueInput
  }

  export type userUpdateOneRequiredWithoutFavorisNestedInput = {
    create?: XOR<userCreateWithoutFavorisInput, userUncheckedCreateWithoutFavorisInput>
    connectOrCreate?: userCreateOrConnectWithoutFavorisInput
    upsert?: userUpsertWithoutFavorisInput
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutFavorisInput, userUpdateWithoutFavorisInput>, userUncheckedUpdateWithoutFavorisInput>
  }

  export type annoncesUpdateOneRequiredWithoutFavorisNestedInput = {
    create?: XOR<annoncesCreateWithoutFavorisInput, annoncesUncheckedCreateWithoutFavorisInput>
    connectOrCreate?: annoncesCreateOrConnectWithoutFavorisInput
    upsert?: annoncesUpsertWithoutFavorisInput
    connect?: annoncesWhereUniqueInput
    update?: XOR<XOR<annoncesUpdateToOneWithWhereWithoutFavorisInput, annoncesUpdateWithoutFavorisInput>, annoncesUncheckedUpdateWithoutFavorisInput>
  }

  export type imageAnnonceCreateNestedManyWithoutAnnoncesInput = {
    create?: XOR<imageAnnonceCreateWithoutAnnoncesInput, imageAnnonceUncheckedCreateWithoutAnnoncesInput> | imageAnnonceCreateWithoutAnnoncesInput[] | imageAnnonceUncheckedCreateWithoutAnnoncesInput[]
    connectOrCreate?: imageAnnonceCreateOrConnectWithoutAnnoncesInput | imageAnnonceCreateOrConnectWithoutAnnoncesInput[]
    createMany?: imageAnnonceCreateManyAnnoncesInputEnvelope
    connect?: imageAnnonceWhereUniqueInput | imageAnnonceWhereUniqueInput[]
  }

  export type userCreateNestedOneWithoutAnnoncesInput = {
    create?: XOR<userCreateWithoutAnnoncesInput, userUncheckedCreateWithoutAnnoncesInput>
    connectOrCreate?: userCreateOrConnectWithoutAnnoncesInput
    connect?: userWhereUniqueInput
  }

  export type commentaireCreateNestedManyWithoutAnnoncesInput = {
    create?: XOR<commentaireCreateWithoutAnnoncesInput, commentaireUncheckedCreateWithoutAnnoncesInput> | commentaireCreateWithoutAnnoncesInput[] | commentaireUncheckedCreateWithoutAnnoncesInput[]
    connectOrCreate?: commentaireCreateOrConnectWithoutAnnoncesInput | commentaireCreateOrConnectWithoutAnnoncesInput[]
    createMany?: commentaireCreateManyAnnoncesInputEnvelope
    connect?: commentaireWhereUniqueInput | commentaireWhereUniqueInput[]
  }

  export type favorisCreateNestedManyWithoutAnnonceInput = {
    create?: XOR<favorisCreateWithoutAnnonceInput, favorisUncheckedCreateWithoutAnnonceInput> | favorisCreateWithoutAnnonceInput[] | favorisUncheckedCreateWithoutAnnonceInput[]
    connectOrCreate?: favorisCreateOrConnectWithoutAnnonceInput | favorisCreateOrConnectWithoutAnnonceInput[]
    createMany?: favorisCreateManyAnnonceInputEnvelope
    connect?: favorisWhereUniqueInput | favorisWhereUniqueInput[]
  }

  export type transactionsCreateNestedManyWithoutAnnonceInput = {
    create?: XOR<transactionsCreateWithoutAnnonceInput, transactionsUncheckedCreateWithoutAnnonceInput> | transactionsCreateWithoutAnnonceInput[] | transactionsUncheckedCreateWithoutAnnonceInput[]
    connectOrCreate?: transactionsCreateOrConnectWithoutAnnonceInput | transactionsCreateOrConnectWithoutAnnonceInput[]
    createMany?: transactionsCreateManyAnnonceInputEnvelope
    connect?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
  }

  export type imageAnnonceUncheckedCreateNestedManyWithoutAnnoncesInput = {
    create?: XOR<imageAnnonceCreateWithoutAnnoncesInput, imageAnnonceUncheckedCreateWithoutAnnoncesInput> | imageAnnonceCreateWithoutAnnoncesInput[] | imageAnnonceUncheckedCreateWithoutAnnoncesInput[]
    connectOrCreate?: imageAnnonceCreateOrConnectWithoutAnnoncesInput | imageAnnonceCreateOrConnectWithoutAnnoncesInput[]
    createMany?: imageAnnonceCreateManyAnnoncesInputEnvelope
    connect?: imageAnnonceWhereUniqueInput | imageAnnonceWhereUniqueInput[]
  }

  export type commentaireUncheckedCreateNestedManyWithoutAnnoncesInput = {
    create?: XOR<commentaireCreateWithoutAnnoncesInput, commentaireUncheckedCreateWithoutAnnoncesInput> | commentaireCreateWithoutAnnoncesInput[] | commentaireUncheckedCreateWithoutAnnoncesInput[]
    connectOrCreate?: commentaireCreateOrConnectWithoutAnnoncesInput | commentaireCreateOrConnectWithoutAnnoncesInput[]
    createMany?: commentaireCreateManyAnnoncesInputEnvelope
    connect?: commentaireWhereUniqueInput | commentaireWhereUniqueInput[]
  }

  export type favorisUncheckedCreateNestedManyWithoutAnnonceInput = {
    create?: XOR<favorisCreateWithoutAnnonceInput, favorisUncheckedCreateWithoutAnnonceInput> | favorisCreateWithoutAnnonceInput[] | favorisUncheckedCreateWithoutAnnonceInput[]
    connectOrCreate?: favorisCreateOrConnectWithoutAnnonceInput | favorisCreateOrConnectWithoutAnnonceInput[]
    createMany?: favorisCreateManyAnnonceInputEnvelope
    connect?: favorisWhereUniqueInput | favorisWhereUniqueInput[]
  }

  export type transactionsUncheckedCreateNestedManyWithoutAnnonceInput = {
    create?: XOR<transactionsCreateWithoutAnnonceInput, transactionsUncheckedCreateWithoutAnnonceInput> | transactionsCreateWithoutAnnonceInput[] | transactionsUncheckedCreateWithoutAnnonceInput[]
    connectOrCreate?: transactionsCreateOrConnectWithoutAnnonceInput | transactionsCreateOrConnectWithoutAnnonceInput[]
    createMany?: transactionsCreateManyAnnonceInputEnvelope
    connect?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type NullableEnumtypeTarifFieldUpdateOperationsInput = {
    set?: $Enums.typeTarif | null
  }

  export type NullableEnumpriorityFieldUpdateOperationsInput = {
    set?: $Enums.priority | null
  }

  export type NullableEnumstatutFieldUpdateOperationsInput = {
    set?: $Enums.statut | null
  }

  export type EnumcategorieAnnonceFieldUpdateOperationsInput = {
    set?: $Enums.categorieAnnonce
  }

  export type imageAnnonceUpdateManyWithoutAnnoncesNestedInput = {
    create?: XOR<imageAnnonceCreateWithoutAnnoncesInput, imageAnnonceUncheckedCreateWithoutAnnoncesInput> | imageAnnonceCreateWithoutAnnoncesInput[] | imageAnnonceUncheckedCreateWithoutAnnoncesInput[]
    connectOrCreate?: imageAnnonceCreateOrConnectWithoutAnnoncesInput | imageAnnonceCreateOrConnectWithoutAnnoncesInput[]
    upsert?: imageAnnonceUpsertWithWhereUniqueWithoutAnnoncesInput | imageAnnonceUpsertWithWhereUniqueWithoutAnnoncesInput[]
    createMany?: imageAnnonceCreateManyAnnoncesInputEnvelope
    set?: imageAnnonceWhereUniqueInput | imageAnnonceWhereUniqueInput[]
    disconnect?: imageAnnonceWhereUniqueInput | imageAnnonceWhereUniqueInput[]
    delete?: imageAnnonceWhereUniqueInput | imageAnnonceWhereUniqueInput[]
    connect?: imageAnnonceWhereUniqueInput | imageAnnonceWhereUniqueInput[]
    update?: imageAnnonceUpdateWithWhereUniqueWithoutAnnoncesInput | imageAnnonceUpdateWithWhereUniqueWithoutAnnoncesInput[]
    updateMany?: imageAnnonceUpdateManyWithWhereWithoutAnnoncesInput | imageAnnonceUpdateManyWithWhereWithoutAnnoncesInput[]
    deleteMany?: imageAnnonceScalarWhereInput | imageAnnonceScalarWhereInput[]
  }

  export type userUpdateOneRequiredWithoutAnnoncesNestedInput = {
    create?: XOR<userCreateWithoutAnnoncesInput, userUncheckedCreateWithoutAnnoncesInput>
    connectOrCreate?: userCreateOrConnectWithoutAnnoncesInput
    upsert?: userUpsertWithoutAnnoncesInput
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutAnnoncesInput, userUpdateWithoutAnnoncesInput>, userUncheckedUpdateWithoutAnnoncesInput>
  }

  export type commentaireUpdateManyWithoutAnnoncesNestedInput = {
    create?: XOR<commentaireCreateWithoutAnnoncesInput, commentaireUncheckedCreateWithoutAnnoncesInput> | commentaireCreateWithoutAnnoncesInput[] | commentaireUncheckedCreateWithoutAnnoncesInput[]
    connectOrCreate?: commentaireCreateOrConnectWithoutAnnoncesInput | commentaireCreateOrConnectWithoutAnnoncesInput[]
    upsert?: commentaireUpsertWithWhereUniqueWithoutAnnoncesInput | commentaireUpsertWithWhereUniqueWithoutAnnoncesInput[]
    createMany?: commentaireCreateManyAnnoncesInputEnvelope
    set?: commentaireWhereUniqueInput | commentaireWhereUniqueInput[]
    disconnect?: commentaireWhereUniqueInput | commentaireWhereUniqueInput[]
    delete?: commentaireWhereUniqueInput | commentaireWhereUniqueInput[]
    connect?: commentaireWhereUniqueInput | commentaireWhereUniqueInput[]
    update?: commentaireUpdateWithWhereUniqueWithoutAnnoncesInput | commentaireUpdateWithWhereUniqueWithoutAnnoncesInput[]
    updateMany?: commentaireUpdateManyWithWhereWithoutAnnoncesInput | commentaireUpdateManyWithWhereWithoutAnnoncesInput[]
    deleteMany?: commentaireScalarWhereInput | commentaireScalarWhereInput[]
  }

  export type favorisUpdateManyWithoutAnnonceNestedInput = {
    create?: XOR<favorisCreateWithoutAnnonceInput, favorisUncheckedCreateWithoutAnnonceInput> | favorisCreateWithoutAnnonceInput[] | favorisUncheckedCreateWithoutAnnonceInput[]
    connectOrCreate?: favorisCreateOrConnectWithoutAnnonceInput | favorisCreateOrConnectWithoutAnnonceInput[]
    upsert?: favorisUpsertWithWhereUniqueWithoutAnnonceInput | favorisUpsertWithWhereUniqueWithoutAnnonceInput[]
    createMany?: favorisCreateManyAnnonceInputEnvelope
    set?: favorisWhereUniqueInput | favorisWhereUniqueInput[]
    disconnect?: favorisWhereUniqueInput | favorisWhereUniqueInput[]
    delete?: favorisWhereUniqueInput | favorisWhereUniqueInput[]
    connect?: favorisWhereUniqueInput | favorisWhereUniqueInput[]
    update?: favorisUpdateWithWhereUniqueWithoutAnnonceInput | favorisUpdateWithWhereUniqueWithoutAnnonceInput[]
    updateMany?: favorisUpdateManyWithWhereWithoutAnnonceInput | favorisUpdateManyWithWhereWithoutAnnonceInput[]
    deleteMany?: favorisScalarWhereInput | favorisScalarWhereInput[]
  }

  export type transactionsUpdateManyWithoutAnnonceNestedInput = {
    create?: XOR<transactionsCreateWithoutAnnonceInput, transactionsUncheckedCreateWithoutAnnonceInput> | transactionsCreateWithoutAnnonceInput[] | transactionsUncheckedCreateWithoutAnnonceInput[]
    connectOrCreate?: transactionsCreateOrConnectWithoutAnnonceInput | transactionsCreateOrConnectWithoutAnnonceInput[]
    upsert?: transactionsUpsertWithWhereUniqueWithoutAnnonceInput | transactionsUpsertWithWhereUniqueWithoutAnnonceInput[]
    createMany?: transactionsCreateManyAnnonceInputEnvelope
    set?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    disconnect?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    delete?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    connect?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    update?: transactionsUpdateWithWhereUniqueWithoutAnnonceInput | transactionsUpdateWithWhereUniqueWithoutAnnonceInput[]
    updateMany?: transactionsUpdateManyWithWhereWithoutAnnonceInput | transactionsUpdateManyWithWhereWithoutAnnonceInput[]
    deleteMany?: transactionsScalarWhereInput | transactionsScalarWhereInput[]
  }

  export type imageAnnonceUncheckedUpdateManyWithoutAnnoncesNestedInput = {
    create?: XOR<imageAnnonceCreateWithoutAnnoncesInput, imageAnnonceUncheckedCreateWithoutAnnoncesInput> | imageAnnonceCreateWithoutAnnoncesInput[] | imageAnnonceUncheckedCreateWithoutAnnoncesInput[]
    connectOrCreate?: imageAnnonceCreateOrConnectWithoutAnnoncesInput | imageAnnonceCreateOrConnectWithoutAnnoncesInput[]
    upsert?: imageAnnonceUpsertWithWhereUniqueWithoutAnnoncesInput | imageAnnonceUpsertWithWhereUniqueWithoutAnnoncesInput[]
    createMany?: imageAnnonceCreateManyAnnoncesInputEnvelope
    set?: imageAnnonceWhereUniqueInput | imageAnnonceWhereUniqueInput[]
    disconnect?: imageAnnonceWhereUniqueInput | imageAnnonceWhereUniqueInput[]
    delete?: imageAnnonceWhereUniqueInput | imageAnnonceWhereUniqueInput[]
    connect?: imageAnnonceWhereUniqueInput | imageAnnonceWhereUniqueInput[]
    update?: imageAnnonceUpdateWithWhereUniqueWithoutAnnoncesInput | imageAnnonceUpdateWithWhereUniqueWithoutAnnoncesInput[]
    updateMany?: imageAnnonceUpdateManyWithWhereWithoutAnnoncesInput | imageAnnonceUpdateManyWithWhereWithoutAnnoncesInput[]
    deleteMany?: imageAnnonceScalarWhereInput | imageAnnonceScalarWhereInput[]
  }

  export type commentaireUncheckedUpdateManyWithoutAnnoncesNestedInput = {
    create?: XOR<commentaireCreateWithoutAnnoncesInput, commentaireUncheckedCreateWithoutAnnoncesInput> | commentaireCreateWithoutAnnoncesInput[] | commentaireUncheckedCreateWithoutAnnoncesInput[]
    connectOrCreate?: commentaireCreateOrConnectWithoutAnnoncesInput | commentaireCreateOrConnectWithoutAnnoncesInput[]
    upsert?: commentaireUpsertWithWhereUniqueWithoutAnnoncesInput | commentaireUpsertWithWhereUniqueWithoutAnnoncesInput[]
    createMany?: commentaireCreateManyAnnoncesInputEnvelope
    set?: commentaireWhereUniqueInput | commentaireWhereUniqueInput[]
    disconnect?: commentaireWhereUniqueInput | commentaireWhereUniqueInput[]
    delete?: commentaireWhereUniqueInput | commentaireWhereUniqueInput[]
    connect?: commentaireWhereUniqueInput | commentaireWhereUniqueInput[]
    update?: commentaireUpdateWithWhereUniqueWithoutAnnoncesInput | commentaireUpdateWithWhereUniqueWithoutAnnoncesInput[]
    updateMany?: commentaireUpdateManyWithWhereWithoutAnnoncesInput | commentaireUpdateManyWithWhereWithoutAnnoncesInput[]
    deleteMany?: commentaireScalarWhereInput | commentaireScalarWhereInput[]
  }

  export type favorisUncheckedUpdateManyWithoutAnnonceNestedInput = {
    create?: XOR<favorisCreateWithoutAnnonceInput, favorisUncheckedCreateWithoutAnnonceInput> | favorisCreateWithoutAnnonceInput[] | favorisUncheckedCreateWithoutAnnonceInput[]
    connectOrCreate?: favorisCreateOrConnectWithoutAnnonceInput | favorisCreateOrConnectWithoutAnnonceInput[]
    upsert?: favorisUpsertWithWhereUniqueWithoutAnnonceInput | favorisUpsertWithWhereUniqueWithoutAnnonceInput[]
    createMany?: favorisCreateManyAnnonceInputEnvelope
    set?: favorisWhereUniqueInput | favorisWhereUniqueInput[]
    disconnect?: favorisWhereUniqueInput | favorisWhereUniqueInput[]
    delete?: favorisWhereUniqueInput | favorisWhereUniqueInput[]
    connect?: favorisWhereUniqueInput | favorisWhereUniqueInput[]
    update?: favorisUpdateWithWhereUniqueWithoutAnnonceInput | favorisUpdateWithWhereUniqueWithoutAnnonceInput[]
    updateMany?: favorisUpdateManyWithWhereWithoutAnnonceInput | favorisUpdateManyWithWhereWithoutAnnonceInput[]
    deleteMany?: favorisScalarWhereInput | favorisScalarWhereInput[]
  }

  export type transactionsUncheckedUpdateManyWithoutAnnonceNestedInput = {
    create?: XOR<transactionsCreateWithoutAnnonceInput, transactionsUncheckedCreateWithoutAnnonceInput> | transactionsCreateWithoutAnnonceInput[] | transactionsUncheckedCreateWithoutAnnonceInput[]
    connectOrCreate?: transactionsCreateOrConnectWithoutAnnonceInput | transactionsCreateOrConnectWithoutAnnonceInput[]
    upsert?: transactionsUpsertWithWhereUniqueWithoutAnnonceInput | transactionsUpsertWithWhereUniqueWithoutAnnonceInput[]
    createMany?: transactionsCreateManyAnnonceInputEnvelope
    set?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    disconnect?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    delete?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    connect?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    update?: transactionsUpdateWithWhereUniqueWithoutAnnonceInput | transactionsUpdateWithWhereUniqueWithoutAnnonceInput[]
    updateMany?: transactionsUpdateManyWithWhereWithoutAnnonceInput | transactionsUpdateManyWithWhereWithoutAnnonceInput[]
    deleteMany?: transactionsScalarWhereInput | transactionsScalarWhereInput[]
  }

  export type annoncesCreateNestedOneWithoutImageAnnoncesInput = {
    create?: XOR<annoncesCreateWithoutImageAnnoncesInput, annoncesUncheckedCreateWithoutImageAnnoncesInput>
    connectOrCreate?: annoncesCreateOrConnectWithoutImageAnnoncesInput
    connect?: annoncesWhereUniqueInput
  }

  export type annoncesUpdateOneRequiredWithoutImageAnnoncesNestedInput = {
    create?: XOR<annoncesCreateWithoutImageAnnoncesInput, annoncesUncheckedCreateWithoutImageAnnoncesInput>
    connectOrCreate?: annoncesCreateOrConnectWithoutImageAnnoncesInput
    upsert?: annoncesUpsertWithoutImageAnnoncesInput
    connect?: annoncesWhereUniqueInput
    update?: XOR<XOR<annoncesUpdateToOneWithWhereWithoutImageAnnoncesInput, annoncesUpdateWithoutImageAnnoncesInput>, annoncesUncheckedUpdateWithoutImageAnnoncesInput>
  }

  export type annoncesCreateNestedOneWithoutCommentaireInput = {
    create?: XOR<annoncesCreateWithoutCommentaireInput, annoncesUncheckedCreateWithoutCommentaireInput>
    connectOrCreate?: annoncesCreateOrConnectWithoutCommentaireInput
    connect?: annoncesWhereUniqueInput
  }

  export type userCreateNestedOneWithoutCommentaireInput = {
    create?: XOR<userCreateWithoutCommentaireInput, userUncheckedCreateWithoutCommentaireInput>
    connectOrCreate?: userCreateOrConnectWithoutCommentaireInput
    connect?: userWhereUniqueInput
  }

  export type annoncesUpdateOneRequiredWithoutCommentaireNestedInput = {
    create?: XOR<annoncesCreateWithoutCommentaireInput, annoncesUncheckedCreateWithoutCommentaireInput>
    connectOrCreate?: annoncesCreateOrConnectWithoutCommentaireInput
    upsert?: annoncesUpsertWithoutCommentaireInput
    connect?: annoncesWhereUniqueInput
    update?: XOR<XOR<annoncesUpdateToOneWithWhereWithoutCommentaireInput, annoncesUpdateWithoutCommentaireInput>, annoncesUncheckedUpdateWithoutCommentaireInput>
  }

  export type userUpdateOneRequiredWithoutCommentaireNestedInput = {
    create?: XOR<userCreateWithoutCommentaireInput, userUncheckedCreateWithoutCommentaireInput>
    connectOrCreate?: userCreateOrConnectWithoutCommentaireInput
    upsert?: userUpsertWithoutCommentaireInput
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutCommentaireInput, userUpdateWithoutCommentaireInput>, userUncheckedUpdateWithoutCommentaireInput>
  }

  export type userCreateNestedOneWithoutTemoignagesInput = {
    create?: XOR<userCreateWithoutTemoignagesInput, userUncheckedCreateWithoutTemoignagesInput>
    connectOrCreate?: userCreateOrConnectWithoutTemoignagesInput
    connect?: userWhereUniqueInput
  }

  export type userUpdateOneRequiredWithoutTemoignagesNestedInput = {
    create?: XOR<userCreateWithoutTemoignagesInput, userUncheckedCreateWithoutTemoignagesInput>
    connectOrCreate?: userCreateOrConnectWithoutTemoignagesInput
    upsert?: userUpsertWithoutTemoignagesInput
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutTemoignagesInput, userUpdateWithoutTemoignagesInput>, userUncheckedUpdateWithoutTemoignagesInput>
  }

  export type userCreateNestedOneWithoutAdresseFacturationInput = {
    create?: XOR<userCreateWithoutAdresseFacturationInput, userUncheckedCreateWithoutAdresseFacturationInput>
    connectOrCreate?: userCreateOrConnectWithoutAdresseFacturationInput
    connect?: userWhereUniqueInput
  }

  export type userUpdateOneRequiredWithoutAdresseFacturationNestedInput = {
    create?: XOR<userCreateWithoutAdresseFacturationInput, userUncheckedCreateWithoutAdresseFacturationInput>
    connectOrCreate?: userCreateOrConnectWithoutAdresseFacturationInput
    upsert?: userUpsertWithoutAdresseFacturationInput
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutAdresseFacturationInput, userUpdateWithoutAdresseFacturationInput>, userUncheckedUpdateWithoutAdresseFacturationInput>
  }

  export type logoCreateNestedManyWithoutEngagementInput = {
    create?: XOR<logoCreateWithoutEngagementInput, logoUncheckedCreateWithoutEngagementInput> | logoCreateWithoutEngagementInput[] | logoUncheckedCreateWithoutEngagementInput[]
    connectOrCreate?: logoCreateOrConnectWithoutEngagementInput | logoCreateOrConnectWithoutEngagementInput[]
    createMany?: logoCreateManyEngagementInputEnvelope
    connect?: logoWhereUniqueInput | logoWhereUniqueInput[]
  }

  export type contenuPartenaireCreateNestedManyWithoutEngagementInput = {
    create?: XOR<contenuPartenaireCreateWithoutEngagementInput, contenuPartenaireUncheckedCreateWithoutEngagementInput> | contenuPartenaireCreateWithoutEngagementInput[] | contenuPartenaireUncheckedCreateWithoutEngagementInput[]
    connectOrCreate?: contenuPartenaireCreateOrConnectWithoutEngagementInput | contenuPartenaireCreateOrConnectWithoutEngagementInput[]
    createMany?: contenuPartenaireCreateManyEngagementInputEnvelope
    connect?: contenuPartenaireWhereUniqueInput | contenuPartenaireWhereUniqueInput[]
  }

  export type logoUncheckedCreateNestedManyWithoutEngagementInput = {
    create?: XOR<logoCreateWithoutEngagementInput, logoUncheckedCreateWithoutEngagementInput> | logoCreateWithoutEngagementInput[] | logoUncheckedCreateWithoutEngagementInput[]
    connectOrCreate?: logoCreateOrConnectWithoutEngagementInput | logoCreateOrConnectWithoutEngagementInput[]
    createMany?: logoCreateManyEngagementInputEnvelope
    connect?: logoWhereUniqueInput | logoWhereUniqueInput[]
  }

  export type contenuPartenaireUncheckedCreateNestedManyWithoutEngagementInput = {
    create?: XOR<contenuPartenaireCreateWithoutEngagementInput, contenuPartenaireUncheckedCreateWithoutEngagementInput> | contenuPartenaireCreateWithoutEngagementInput[] | contenuPartenaireUncheckedCreateWithoutEngagementInput[]
    connectOrCreate?: contenuPartenaireCreateOrConnectWithoutEngagementInput | contenuPartenaireCreateOrConnectWithoutEngagementInput[]
    createMany?: contenuPartenaireCreateManyEngagementInputEnvelope
    connect?: contenuPartenaireWhereUniqueInput | contenuPartenaireWhereUniqueInput[]
  }

  export type EnumstatutPartenaireFieldUpdateOperationsInput = {
    set?: $Enums.statutPartenaire
  }

  export type EnumdureeFieldUpdateOperationsInput = {
    set?: $Enums.duree
  }

  export type logoUpdateManyWithoutEngagementNestedInput = {
    create?: XOR<logoCreateWithoutEngagementInput, logoUncheckedCreateWithoutEngagementInput> | logoCreateWithoutEngagementInput[] | logoUncheckedCreateWithoutEngagementInput[]
    connectOrCreate?: logoCreateOrConnectWithoutEngagementInput | logoCreateOrConnectWithoutEngagementInput[]
    upsert?: logoUpsertWithWhereUniqueWithoutEngagementInput | logoUpsertWithWhereUniqueWithoutEngagementInput[]
    createMany?: logoCreateManyEngagementInputEnvelope
    set?: logoWhereUniqueInput | logoWhereUniqueInput[]
    disconnect?: logoWhereUniqueInput | logoWhereUniqueInput[]
    delete?: logoWhereUniqueInput | logoWhereUniqueInput[]
    connect?: logoWhereUniqueInput | logoWhereUniqueInput[]
    update?: logoUpdateWithWhereUniqueWithoutEngagementInput | logoUpdateWithWhereUniqueWithoutEngagementInput[]
    updateMany?: logoUpdateManyWithWhereWithoutEngagementInput | logoUpdateManyWithWhereWithoutEngagementInput[]
    deleteMany?: logoScalarWhereInput | logoScalarWhereInput[]
  }

  export type contenuPartenaireUpdateManyWithoutEngagementNestedInput = {
    create?: XOR<contenuPartenaireCreateWithoutEngagementInput, contenuPartenaireUncheckedCreateWithoutEngagementInput> | contenuPartenaireCreateWithoutEngagementInput[] | contenuPartenaireUncheckedCreateWithoutEngagementInput[]
    connectOrCreate?: contenuPartenaireCreateOrConnectWithoutEngagementInput | contenuPartenaireCreateOrConnectWithoutEngagementInput[]
    upsert?: contenuPartenaireUpsertWithWhereUniqueWithoutEngagementInput | contenuPartenaireUpsertWithWhereUniqueWithoutEngagementInput[]
    createMany?: contenuPartenaireCreateManyEngagementInputEnvelope
    set?: contenuPartenaireWhereUniqueInput | contenuPartenaireWhereUniqueInput[]
    disconnect?: contenuPartenaireWhereUniqueInput | contenuPartenaireWhereUniqueInput[]
    delete?: contenuPartenaireWhereUniqueInput | contenuPartenaireWhereUniqueInput[]
    connect?: contenuPartenaireWhereUniqueInput | contenuPartenaireWhereUniqueInput[]
    update?: contenuPartenaireUpdateWithWhereUniqueWithoutEngagementInput | contenuPartenaireUpdateWithWhereUniqueWithoutEngagementInput[]
    updateMany?: contenuPartenaireUpdateManyWithWhereWithoutEngagementInput | contenuPartenaireUpdateManyWithWhereWithoutEngagementInput[]
    deleteMany?: contenuPartenaireScalarWhereInput | contenuPartenaireScalarWhereInput[]
  }

  export type logoUncheckedUpdateManyWithoutEngagementNestedInput = {
    create?: XOR<logoCreateWithoutEngagementInput, logoUncheckedCreateWithoutEngagementInput> | logoCreateWithoutEngagementInput[] | logoUncheckedCreateWithoutEngagementInput[]
    connectOrCreate?: logoCreateOrConnectWithoutEngagementInput | logoCreateOrConnectWithoutEngagementInput[]
    upsert?: logoUpsertWithWhereUniqueWithoutEngagementInput | logoUpsertWithWhereUniqueWithoutEngagementInput[]
    createMany?: logoCreateManyEngagementInputEnvelope
    set?: logoWhereUniqueInput | logoWhereUniqueInput[]
    disconnect?: logoWhereUniqueInput | logoWhereUniqueInput[]
    delete?: logoWhereUniqueInput | logoWhereUniqueInput[]
    connect?: logoWhereUniqueInput | logoWhereUniqueInput[]
    update?: logoUpdateWithWhereUniqueWithoutEngagementInput | logoUpdateWithWhereUniqueWithoutEngagementInput[]
    updateMany?: logoUpdateManyWithWhereWithoutEngagementInput | logoUpdateManyWithWhereWithoutEngagementInput[]
    deleteMany?: logoScalarWhereInput | logoScalarWhereInput[]
  }

  export type contenuPartenaireUncheckedUpdateManyWithoutEngagementNestedInput = {
    create?: XOR<contenuPartenaireCreateWithoutEngagementInput, contenuPartenaireUncheckedCreateWithoutEngagementInput> | contenuPartenaireCreateWithoutEngagementInput[] | contenuPartenaireUncheckedCreateWithoutEngagementInput[]
    connectOrCreate?: contenuPartenaireCreateOrConnectWithoutEngagementInput | contenuPartenaireCreateOrConnectWithoutEngagementInput[]
    upsert?: contenuPartenaireUpsertWithWhereUniqueWithoutEngagementInput | contenuPartenaireUpsertWithWhereUniqueWithoutEngagementInput[]
    createMany?: contenuPartenaireCreateManyEngagementInputEnvelope
    set?: contenuPartenaireWhereUniqueInput | contenuPartenaireWhereUniqueInput[]
    disconnect?: contenuPartenaireWhereUniqueInput | contenuPartenaireWhereUniqueInput[]
    delete?: contenuPartenaireWhereUniqueInput | contenuPartenaireWhereUniqueInput[]
    connect?: contenuPartenaireWhereUniqueInput | contenuPartenaireWhereUniqueInput[]
    update?: contenuPartenaireUpdateWithWhereUniqueWithoutEngagementInput | contenuPartenaireUpdateWithWhereUniqueWithoutEngagementInput[]
    updateMany?: contenuPartenaireUpdateManyWithWhereWithoutEngagementInput | contenuPartenaireUpdateManyWithWhereWithoutEngagementInput[]
    deleteMany?: contenuPartenaireScalarWhereInput | contenuPartenaireScalarWhereInput[]
  }

  export type engagementCreateNestedOneWithoutContenuPartenaireInput = {
    create?: XOR<engagementCreateWithoutContenuPartenaireInput, engagementUncheckedCreateWithoutContenuPartenaireInput>
    connectOrCreate?: engagementCreateOrConnectWithoutContenuPartenaireInput
    connect?: engagementWhereUniqueInput
  }

  export type engagementUpdateOneRequiredWithoutContenuPartenaireNestedInput = {
    create?: XOR<engagementCreateWithoutContenuPartenaireInput, engagementUncheckedCreateWithoutContenuPartenaireInput>
    connectOrCreate?: engagementCreateOrConnectWithoutContenuPartenaireInput
    upsert?: engagementUpsertWithoutContenuPartenaireInput
    connect?: engagementWhereUniqueInput
    update?: XOR<XOR<engagementUpdateToOneWithWhereWithoutContenuPartenaireInput, engagementUpdateWithoutContenuPartenaireInput>, engagementUncheckedUpdateWithoutContenuPartenaireInput>
  }

  export type engagementCreateNestedOneWithoutLogoInput = {
    create?: XOR<engagementCreateWithoutLogoInput, engagementUncheckedCreateWithoutLogoInput>
    connectOrCreate?: engagementCreateOrConnectWithoutLogoInput
    connect?: engagementWhereUniqueInput
  }

  export type engagementUpdateOneRequiredWithoutLogoNestedInput = {
    create?: XOR<engagementCreateWithoutLogoInput, engagementUncheckedCreateWithoutLogoInput>
    connectOrCreate?: engagementCreateOrConnectWithoutLogoInput
    upsert?: engagementUpsertWithoutLogoInput
    connect?: engagementWhereUniqueInput
    update?: XOR<XOR<engagementUpdateToOneWithWhereWithoutLogoInput, engagementUpdateWithoutLogoInput>, engagementUncheckedUpdateWithoutLogoInput>
  }

  export type imageCreateNestedManyWithoutArticleInput = {
    create?: XOR<imageCreateWithoutArticleInput, imageUncheckedCreateWithoutArticleInput> | imageCreateWithoutArticleInput[] | imageUncheckedCreateWithoutArticleInput[]
    connectOrCreate?: imageCreateOrConnectWithoutArticleInput | imageCreateOrConnectWithoutArticleInput[]
    createMany?: imageCreateManyArticleInputEnvelope
    connect?: imageWhereUniqueInput | imageWhereUniqueInput[]
  }

  export type imageUncheckedCreateNestedManyWithoutArticleInput = {
    create?: XOR<imageCreateWithoutArticleInput, imageUncheckedCreateWithoutArticleInput> | imageCreateWithoutArticleInput[] | imageUncheckedCreateWithoutArticleInput[]
    connectOrCreate?: imageCreateOrConnectWithoutArticleInput | imageCreateOrConnectWithoutArticleInput[]
    createMany?: imageCreateManyArticleInputEnvelope
    connect?: imageWhereUniqueInput | imageWhereUniqueInput[]
  }

  export type imageUpdateManyWithoutArticleNestedInput = {
    create?: XOR<imageCreateWithoutArticleInput, imageUncheckedCreateWithoutArticleInput> | imageCreateWithoutArticleInput[] | imageUncheckedCreateWithoutArticleInput[]
    connectOrCreate?: imageCreateOrConnectWithoutArticleInput | imageCreateOrConnectWithoutArticleInput[]
    upsert?: imageUpsertWithWhereUniqueWithoutArticleInput | imageUpsertWithWhereUniqueWithoutArticleInput[]
    createMany?: imageCreateManyArticleInputEnvelope
    set?: imageWhereUniqueInput | imageWhereUniqueInput[]
    disconnect?: imageWhereUniqueInput | imageWhereUniqueInput[]
    delete?: imageWhereUniqueInput | imageWhereUniqueInput[]
    connect?: imageWhereUniqueInput | imageWhereUniqueInput[]
    update?: imageUpdateWithWhereUniqueWithoutArticleInput | imageUpdateWithWhereUniqueWithoutArticleInput[]
    updateMany?: imageUpdateManyWithWhereWithoutArticleInput | imageUpdateManyWithWhereWithoutArticleInput[]
    deleteMany?: imageScalarWhereInput | imageScalarWhereInput[]
  }

  export type imageUncheckedUpdateManyWithoutArticleNestedInput = {
    create?: XOR<imageCreateWithoutArticleInput, imageUncheckedCreateWithoutArticleInput> | imageCreateWithoutArticleInput[] | imageUncheckedCreateWithoutArticleInput[]
    connectOrCreate?: imageCreateOrConnectWithoutArticleInput | imageCreateOrConnectWithoutArticleInput[]
    upsert?: imageUpsertWithWhereUniqueWithoutArticleInput | imageUpsertWithWhereUniqueWithoutArticleInput[]
    createMany?: imageCreateManyArticleInputEnvelope
    set?: imageWhereUniqueInput | imageWhereUniqueInput[]
    disconnect?: imageWhereUniqueInput | imageWhereUniqueInput[]
    delete?: imageWhereUniqueInput | imageWhereUniqueInput[]
    connect?: imageWhereUniqueInput | imageWhereUniqueInput[]
    update?: imageUpdateWithWhereUniqueWithoutArticleInput | imageUpdateWithWhereUniqueWithoutArticleInput[]
    updateMany?: imageUpdateManyWithWhereWithoutArticleInput | imageUpdateManyWithWhereWithoutArticleInput[]
    deleteMany?: imageScalarWhereInput | imageScalarWhereInput[]
  }

  export type articleCreateNestedOneWithoutImagesInput = {
    create?: XOR<articleCreateWithoutImagesInput, articleUncheckedCreateWithoutImagesInput>
    connectOrCreate?: articleCreateOrConnectWithoutImagesInput
    connect?: articleWhereUniqueInput
  }

  export type articleUpdateOneRequiredWithoutImagesNestedInput = {
    create?: XOR<articleCreateWithoutImagesInput, articleUncheckedCreateWithoutImagesInput>
    connectOrCreate?: articleCreateOrConnectWithoutImagesInput
    upsert?: articleUpsertWithoutImagesInput
    connect?: articleWhereUniqueInput
    update?: XOR<XOR<articleUpdateToOneWithWhereWithoutImagesInput, articleUpdateWithoutImagesInput>, articleUncheckedUpdateWithoutImagesInput>
  }

  export type annoncesCreateNestedOneWithoutTransactionsInput = {
    create?: XOR<annoncesCreateWithoutTransactionsInput, annoncesUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: annoncesCreateOrConnectWithoutTransactionsInput
    connect?: annoncesWhereUniqueInput
  }

  export type userCreateNestedOneWithoutTransactionsInput = {
    create?: XOR<userCreateWithoutTransactionsInput, userUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: userCreateOrConnectWithoutTransactionsInput
    connect?: userWhereUniqueInput
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type EnumtransactionStatusFieldUpdateOperationsInput = {
    set?: $Enums.transactionStatus
  }

  export type annoncesUpdateOneRequiredWithoutTransactionsNestedInput = {
    create?: XOR<annoncesCreateWithoutTransactionsInput, annoncesUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: annoncesCreateOrConnectWithoutTransactionsInput
    upsert?: annoncesUpsertWithoutTransactionsInput
    connect?: annoncesWhereUniqueInput
    update?: XOR<XOR<annoncesUpdateToOneWithWhereWithoutTransactionsInput, annoncesUpdateWithoutTransactionsInput>, annoncesUncheckedUpdateWithoutTransactionsInput>
  }

  export type userUpdateOneRequiredWithoutTransactionsNestedInput = {
    create?: XOR<userCreateWithoutTransactionsInput, userUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: userCreateOrConnectWithoutTransactionsInput
    upsert?: userUpsertWithoutTransactionsInput
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutTransactionsInput, userUpdateWithoutTransactionsInput>, userUncheckedUpdateWithoutTransactionsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumstatutUserFilter<$PrismaModel = never> = {
    equals?: $Enums.statutUser | EnumstatutUserFieldRefInput<$PrismaModel>
    in?: $Enums.statutUser[] | ListEnumstatutUserFieldRefInput<$PrismaModel>
    notIn?: $Enums.statutUser[] | ListEnumstatutUserFieldRefInput<$PrismaModel>
    not?: NestedEnumstatutUserFilter<$PrismaModel> | $Enums.statutUser
  }

  export type NestedEnumroleFilter<$PrismaModel = never> = {
    equals?: $Enums.role | EnumroleFieldRefInput<$PrismaModel>
    in?: $Enums.role[] | ListEnumroleFieldRefInput<$PrismaModel>
    notIn?: $Enums.role[] | ListEnumroleFieldRefInput<$PrismaModel>
    not?: NestedEnumroleFilter<$PrismaModel> | $Enums.role
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumstatutUserWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.statutUser | EnumstatutUserFieldRefInput<$PrismaModel>
    in?: $Enums.statutUser[] | ListEnumstatutUserFieldRefInput<$PrismaModel>
    notIn?: $Enums.statutUser[] | ListEnumstatutUserFieldRefInput<$PrismaModel>
    not?: NestedEnumstatutUserWithAggregatesFilter<$PrismaModel> | $Enums.statutUser
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumstatutUserFilter<$PrismaModel>
    _max?: NestedEnumstatutUserFilter<$PrismaModel>
  }

  export type NestedEnumroleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.role | EnumroleFieldRefInput<$PrismaModel>
    in?: $Enums.role[] | ListEnumroleFieldRefInput<$PrismaModel>
    notIn?: $Enums.role[] | ListEnumroleFieldRefInput<$PrismaModel>
    not?: NestedEnumroleWithAggregatesFilter<$PrismaModel> | $Enums.role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumroleFilter<$PrismaModel>
    _max?: NestedEnumroleFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumsecteurActiviteFilter<$PrismaModel = never> = {
    equals?: $Enums.secteurActivite | EnumsecteurActiviteFieldRefInput<$PrismaModel>
    in?: $Enums.secteurActivite[] | ListEnumsecteurActiviteFieldRefInput<$PrismaModel>
    notIn?: $Enums.secteurActivite[] | ListEnumsecteurActiviteFieldRefInput<$PrismaModel>
    not?: NestedEnumsecteurActiviteFilter<$PrismaModel> | $Enums.secteurActivite
  }

  export type NestedEnumtypeSocieteFilter<$PrismaModel = never> = {
    equals?: $Enums.typeSociete | EnumtypeSocieteFieldRefInput<$PrismaModel>
    in?: $Enums.typeSociete[] | ListEnumtypeSocieteFieldRefInput<$PrismaModel>
    notIn?: $Enums.typeSociete[] | ListEnumtypeSocieteFieldRefInput<$PrismaModel>
    not?: NestedEnumtypeSocieteFilter<$PrismaModel> | $Enums.typeSociete
  }

  export type NestedEnumsecteurActiviteWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.secteurActivite | EnumsecteurActiviteFieldRefInput<$PrismaModel>
    in?: $Enums.secteurActivite[] | ListEnumsecteurActiviteFieldRefInput<$PrismaModel>
    notIn?: $Enums.secteurActivite[] | ListEnumsecteurActiviteFieldRefInput<$PrismaModel>
    not?: NestedEnumsecteurActiviteWithAggregatesFilter<$PrismaModel> | $Enums.secteurActivite
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumsecteurActiviteFilter<$PrismaModel>
    _max?: NestedEnumsecteurActiviteFilter<$PrismaModel>
  }

  export type NestedEnumtypeSocieteWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.typeSociete | EnumtypeSocieteFieldRefInput<$PrismaModel>
    in?: $Enums.typeSociete[] | ListEnumtypeSocieteFieldRefInput<$PrismaModel>
    notIn?: $Enums.typeSociete[] | ListEnumtypeSocieteFieldRefInput<$PrismaModel>
    not?: NestedEnumtypeSocieteWithAggregatesFilter<$PrismaModel> | $Enums.typeSociete
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumtypeSocieteFilter<$PrismaModel>
    _max?: NestedEnumtypeSocieteFilter<$PrismaModel>
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedEnumtypeTarifNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.typeTarif | EnumtypeTarifFieldRefInput<$PrismaModel> | null
    in?: $Enums.typeTarif[] | ListEnumtypeTarifFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.typeTarif[] | ListEnumtypeTarifFieldRefInput<$PrismaModel> | null
    not?: NestedEnumtypeTarifNullableFilter<$PrismaModel> | $Enums.typeTarif | null
  }

  export type NestedEnumpriorityNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.priority | EnumpriorityFieldRefInput<$PrismaModel> | null
    in?: $Enums.priority[] | ListEnumpriorityFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.priority[] | ListEnumpriorityFieldRefInput<$PrismaModel> | null
    not?: NestedEnumpriorityNullableFilter<$PrismaModel> | $Enums.priority | null
  }

  export type NestedEnumstatutNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.statut | EnumstatutFieldRefInput<$PrismaModel> | null
    in?: $Enums.statut[] | ListEnumstatutFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.statut[] | ListEnumstatutFieldRefInput<$PrismaModel> | null
    not?: NestedEnumstatutNullableFilter<$PrismaModel> | $Enums.statut | null
  }

  export type NestedEnumcategorieAnnonceFilter<$PrismaModel = never> = {
    equals?: $Enums.categorieAnnonce | EnumcategorieAnnonceFieldRefInput<$PrismaModel>
    in?: $Enums.categorieAnnonce[] | ListEnumcategorieAnnonceFieldRefInput<$PrismaModel>
    notIn?: $Enums.categorieAnnonce[] | ListEnumcategorieAnnonceFieldRefInput<$PrismaModel>
    not?: NestedEnumcategorieAnnonceFilter<$PrismaModel> | $Enums.categorieAnnonce
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type NestedEnumtypeTarifNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.typeTarif | EnumtypeTarifFieldRefInput<$PrismaModel> | null
    in?: $Enums.typeTarif[] | ListEnumtypeTarifFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.typeTarif[] | ListEnumtypeTarifFieldRefInput<$PrismaModel> | null
    not?: NestedEnumtypeTarifNullableWithAggregatesFilter<$PrismaModel> | $Enums.typeTarif | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumtypeTarifNullableFilter<$PrismaModel>
    _max?: NestedEnumtypeTarifNullableFilter<$PrismaModel>
  }

  export type NestedEnumpriorityNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.priority | EnumpriorityFieldRefInput<$PrismaModel> | null
    in?: $Enums.priority[] | ListEnumpriorityFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.priority[] | ListEnumpriorityFieldRefInput<$PrismaModel> | null
    not?: NestedEnumpriorityNullableWithAggregatesFilter<$PrismaModel> | $Enums.priority | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumpriorityNullableFilter<$PrismaModel>
    _max?: NestedEnumpriorityNullableFilter<$PrismaModel>
  }

  export type NestedEnumstatutNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.statut | EnumstatutFieldRefInput<$PrismaModel> | null
    in?: $Enums.statut[] | ListEnumstatutFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.statut[] | ListEnumstatutFieldRefInput<$PrismaModel> | null
    not?: NestedEnumstatutNullableWithAggregatesFilter<$PrismaModel> | $Enums.statut | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumstatutNullableFilter<$PrismaModel>
    _max?: NestedEnumstatutNullableFilter<$PrismaModel>
  }

  export type NestedEnumcategorieAnnonceWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.categorieAnnonce | EnumcategorieAnnonceFieldRefInput<$PrismaModel>
    in?: $Enums.categorieAnnonce[] | ListEnumcategorieAnnonceFieldRefInput<$PrismaModel>
    notIn?: $Enums.categorieAnnonce[] | ListEnumcategorieAnnonceFieldRefInput<$PrismaModel>
    not?: NestedEnumcategorieAnnonceWithAggregatesFilter<$PrismaModel> | $Enums.categorieAnnonce
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumcategorieAnnonceFilter<$PrismaModel>
    _max?: NestedEnumcategorieAnnonceFilter<$PrismaModel>
  }

  export type NestedEnumstatutPartenaireFilter<$PrismaModel = never> = {
    equals?: $Enums.statutPartenaire | EnumstatutPartenaireFieldRefInput<$PrismaModel>
    in?: $Enums.statutPartenaire[] | ListEnumstatutPartenaireFieldRefInput<$PrismaModel>
    notIn?: $Enums.statutPartenaire[] | ListEnumstatutPartenaireFieldRefInput<$PrismaModel>
    not?: NestedEnumstatutPartenaireFilter<$PrismaModel> | $Enums.statutPartenaire
  }

  export type NestedEnumdureeFilter<$PrismaModel = never> = {
    equals?: $Enums.duree | EnumdureeFieldRefInput<$PrismaModel>
    in?: $Enums.duree[] | ListEnumdureeFieldRefInput<$PrismaModel>
    notIn?: $Enums.duree[] | ListEnumdureeFieldRefInput<$PrismaModel>
    not?: NestedEnumdureeFilter<$PrismaModel> | $Enums.duree
  }

  export type NestedEnumstatutPartenaireWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.statutPartenaire | EnumstatutPartenaireFieldRefInput<$PrismaModel>
    in?: $Enums.statutPartenaire[] | ListEnumstatutPartenaireFieldRefInput<$PrismaModel>
    notIn?: $Enums.statutPartenaire[] | ListEnumstatutPartenaireFieldRefInput<$PrismaModel>
    not?: NestedEnumstatutPartenaireWithAggregatesFilter<$PrismaModel> | $Enums.statutPartenaire
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumstatutPartenaireFilter<$PrismaModel>
    _max?: NestedEnumstatutPartenaireFilter<$PrismaModel>
  }

  export type NestedEnumdureeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.duree | EnumdureeFieldRefInput<$PrismaModel>
    in?: $Enums.duree[] | ListEnumdureeFieldRefInput<$PrismaModel>
    notIn?: $Enums.duree[] | ListEnumdureeFieldRefInput<$PrismaModel>
    not?: NestedEnumdureeWithAggregatesFilter<$PrismaModel> | $Enums.duree
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumdureeFilter<$PrismaModel>
    _max?: NestedEnumdureeFilter<$PrismaModel>
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedEnumtransactionStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.transactionStatus | EnumtransactionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.transactionStatus[] | ListEnumtransactionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.transactionStatus[] | ListEnumtransactionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumtransactionStatusFilter<$PrismaModel> | $Enums.transactionStatus
  }
  export type NestedJsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedEnumtransactionStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.transactionStatus | EnumtransactionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.transactionStatus[] | ListEnumtransactionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.transactionStatus[] | ListEnumtransactionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumtransactionStatusWithAggregatesFilter<$PrismaModel> | $Enums.transactionStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumtransactionStatusFilter<$PrismaModel>
    _max?: NestedEnumtransactionStatusFilter<$PrismaModel>
  }

  export type profileImageCreateWithoutUserInput = {
    path: string
  }

  export type profileImageUncheckedCreateWithoutUserInput = {
    id?: number
    path: string
  }

  export type profileImageCreateOrConnectWithoutUserInput = {
    where: profileImageWhereUniqueInput
    create: XOR<profileImageCreateWithoutUserInput, profileImageUncheckedCreateWithoutUserInput>
  }

  export type profileImageCreateManyUserInputEnvelope = {
    data: profileImageCreateManyUserInput | profileImageCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type companyCreateWithoutUsersInput = {
    siret: string
    nomSociete: string
    codePostal: string
    adresse: string
    ville: string
    createdAt?: Date | string
    updatedAt?: Date | string
    secteurActivite: $Enums.secteurActivite
    typeSociete: $Enums.typeSociete
  }

  export type companyUncheckedCreateWithoutUsersInput = {
    id?: number
    siret: string
    nomSociete: string
    codePostal: string
    adresse: string
    ville: string
    createdAt?: Date | string
    updatedAt?: Date | string
    secteurActivite: $Enums.secteurActivite
    typeSociete: $Enums.typeSociete
  }

  export type companyCreateOrConnectWithoutUsersInput = {
    where: companyWhereUniqueInput
    create: XOR<companyCreateWithoutUsersInput, companyUncheckedCreateWithoutUsersInput>
  }

  export type annoncesCreateWithoutUserInput = {
    titre: string
    description: string
    prix?: Decimal | DecimalJsLike | number | string | null
    typeTarif?: $Enums.typeTarif | null
    priority?: $Enums.priority | null
    localisation?: string | null
    adresse: string
    statut?: $Enums.statut | null
    createdAt?: Date | string
    updatedAt?: Date | string
    categorieAnnonce: $Enums.categorieAnnonce
    sousCategorie: string
    priceId?: string | null
    imageAnnonces?: imageAnnonceCreateNestedManyWithoutAnnoncesInput
    commentaire?: commentaireCreateNestedManyWithoutAnnoncesInput
    favoris?: favorisCreateNestedManyWithoutAnnonceInput
    transactions?: transactionsCreateNestedManyWithoutAnnonceInput
  }

  export type annoncesUncheckedCreateWithoutUserInput = {
    id?: number
    titre: string
    description: string
    prix?: Decimal | DecimalJsLike | number | string | null
    typeTarif?: $Enums.typeTarif | null
    priority?: $Enums.priority | null
    localisation?: string | null
    adresse: string
    statut?: $Enums.statut | null
    createdAt?: Date | string
    updatedAt?: Date | string
    categorieAnnonce: $Enums.categorieAnnonce
    sousCategorie: string
    priceId?: string | null
    imageAnnonces?: imageAnnonceUncheckedCreateNestedManyWithoutAnnoncesInput
    commentaire?: commentaireUncheckedCreateNestedManyWithoutAnnoncesInput
    favoris?: favorisUncheckedCreateNestedManyWithoutAnnonceInput
    transactions?: transactionsUncheckedCreateNestedManyWithoutAnnonceInput
  }

  export type annoncesCreateOrConnectWithoutUserInput = {
    where: annoncesWhereUniqueInput
    create: XOR<annoncesCreateWithoutUserInput, annoncesUncheckedCreateWithoutUserInput>
  }

  export type annoncesCreateManyUserInputEnvelope = {
    data: annoncesCreateManyUserInput | annoncesCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type commentaireCreateWithoutUserInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    commentaire: string
    note?: number | null
    annonces: annoncesCreateNestedOneWithoutCommentaireInput
  }

  export type commentaireUncheckedCreateWithoutUserInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    commentaire: string
    note?: number | null
    annoncesId: number
  }

  export type commentaireCreateOrConnectWithoutUserInput = {
    where: commentaireWhereUniqueInput
    create: XOR<commentaireCreateWithoutUserInput, commentaireUncheckedCreateWithoutUserInput>
  }

  export type commentaireCreateManyUserInputEnvelope = {
    data: commentaireCreateManyUserInput | commentaireCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type favorisCreateWithoutUserInput = {
    saveDate?: Date | string
    annonce: annoncesCreateNestedOneWithoutFavorisInput
  }

  export type favorisUncheckedCreateWithoutUserInput = {
    id?: number
    saveDate?: Date | string
    annonceId: number
  }

  export type favorisCreateOrConnectWithoutUserInput = {
    where: favorisWhereUniqueInput
    create: XOR<favorisCreateWithoutUserInput, favorisUncheckedCreateWithoutUserInput>
  }

  export type favorisCreateManyUserInputEnvelope = {
    data: favorisCreateManyUserInput | favorisCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type temoignagesCreateWithoutUserInput = {
    temoignage: string
    noteLilee: number
    ville?: string | null
    pays?: string | null
  }

  export type temoignagesUncheckedCreateWithoutUserInput = {
    id?: number
    temoignage: string
    noteLilee: number
    ville?: string | null
    pays?: string | null
  }

  export type temoignagesCreateOrConnectWithoutUserInput = {
    where: temoignagesWhereUniqueInput
    create: XOR<temoignagesCreateWithoutUserInput, temoignagesUncheckedCreateWithoutUserInput>
  }

  export type temoignagesCreateManyUserInputEnvelope = {
    data: temoignagesCreateManyUserInput | temoignagesCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type transactionsCreateWithoutUserInput = {
    dateRange?: JsonNullValueInput | InputJsonValue
    price: Decimal | DecimalJsLike | number | string
    quantity: number
    status?: $Enums.transactionStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    annonce: annoncesCreateNestedOneWithoutTransactionsInput
  }

  export type transactionsUncheckedCreateWithoutUserInput = {
    id?: number
    dateRange?: JsonNullValueInput | InputJsonValue
    price: Decimal | DecimalJsLike | number | string
    quantity: number
    status?: $Enums.transactionStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    annonceId: number
  }

  export type transactionsCreateOrConnectWithoutUserInput = {
    where: transactionsWhereUniqueInput
    create: XOR<transactionsCreateWithoutUserInput, transactionsUncheckedCreateWithoutUserInput>
  }

  export type transactionsCreateManyUserInputEnvelope = {
    data: transactionsCreateManyUserInput | transactionsCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type adresseFacturationCreateWithoutUserInput = {
    nom: string
    adresse: string
    codePostal: string
    ville: string
    pays: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type adresseFacturationUncheckedCreateWithoutUserInput = {
    id?: number
    nom: string
    adresse: string
    codePostal: string
    ville: string
    pays: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type adresseFacturationCreateOrConnectWithoutUserInput = {
    where: adresseFacturationWhereUniqueInput
    create: XOR<adresseFacturationCreateWithoutUserInput, adresseFacturationUncheckedCreateWithoutUserInput>
  }

  export type adresseFacturationCreateManyUserInputEnvelope = {
    data: adresseFacturationCreateManyUserInput | adresseFacturationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type profileImageUpsertWithWhereUniqueWithoutUserInput = {
    where: profileImageWhereUniqueInput
    update: XOR<profileImageUpdateWithoutUserInput, profileImageUncheckedUpdateWithoutUserInput>
    create: XOR<profileImageCreateWithoutUserInput, profileImageUncheckedCreateWithoutUserInput>
  }

  export type profileImageUpdateWithWhereUniqueWithoutUserInput = {
    where: profileImageWhereUniqueInput
    data: XOR<profileImageUpdateWithoutUserInput, profileImageUncheckedUpdateWithoutUserInput>
  }

  export type profileImageUpdateManyWithWhereWithoutUserInput = {
    where: profileImageScalarWhereInput
    data: XOR<profileImageUpdateManyMutationInput, profileImageUncheckedUpdateManyWithoutUserInput>
  }

  export type profileImageScalarWhereInput = {
    AND?: profileImageScalarWhereInput | profileImageScalarWhereInput[]
    OR?: profileImageScalarWhereInput[]
    NOT?: profileImageScalarWhereInput | profileImageScalarWhereInput[]
    id?: IntFilter<"profileImage"> | number
    path?: StringFilter<"profileImage"> | string
    userId?: IntFilter<"profileImage"> | number
  }

  export type companyUpsertWithoutUsersInput = {
    update: XOR<companyUpdateWithoutUsersInput, companyUncheckedUpdateWithoutUsersInput>
    create: XOR<companyCreateWithoutUsersInput, companyUncheckedCreateWithoutUsersInput>
    where?: companyWhereInput
  }

  export type companyUpdateToOneWithWhereWithoutUsersInput = {
    where?: companyWhereInput
    data: XOR<companyUpdateWithoutUsersInput, companyUncheckedUpdateWithoutUsersInput>
  }

  export type companyUpdateWithoutUsersInput = {
    siret?: StringFieldUpdateOperationsInput | string
    nomSociete?: StringFieldUpdateOperationsInput | string
    codePostal?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    ville?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    secteurActivite?: EnumsecteurActiviteFieldUpdateOperationsInput | $Enums.secteurActivite
    typeSociete?: EnumtypeSocieteFieldUpdateOperationsInput | $Enums.typeSociete
  }

  export type companyUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    siret?: StringFieldUpdateOperationsInput | string
    nomSociete?: StringFieldUpdateOperationsInput | string
    codePostal?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    ville?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    secteurActivite?: EnumsecteurActiviteFieldUpdateOperationsInput | $Enums.secteurActivite
    typeSociete?: EnumtypeSocieteFieldUpdateOperationsInput | $Enums.typeSociete
  }

  export type annoncesUpsertWithWhereUniqueWithoutUserInput = {
    where: annoncesWhereUniqueInput
    update: XOR<annoncesUpdateWithoutUserInput, annoncesUncheckedUpdateWithoutUserInput>
    create: XOR<annoncesCreateWithoutUserInput, annoncesUncheckedCreateWithoutUserInput>
  }

  export type annoncesUpdateWithWhereUniqueWithoutUserInput = {
    where: annoncesWhereUniqueInput
    data: XOR<annoncesUpdateWithoutUserInput, annoncesUncheckedUpdateWithoutUserInput>
  }

  export type annoncesUpdateManyWithWhereWithoutUserInput = {
    where: annoncesScalarWhereInput
    data: XOR<annoncesUpdateManyMutationInput, annoncesUncheckedUpdateManyWithoutUserInput>
  }

  export type annoncesScalarWhereInput = {
    AND?: annoncesScalarWhereInput | annoncesScalarWhereInput[]
    OR?: annoncesScalarWhereInput[]
    NOT?: annoncesScalarWhereInput | annoncesScalarWhereInput[]
    id?: IntFilter<"annonces"> | number
    titre?: StringFilter<"annonces"> | string
    description?: StringFilter<"annonces"> | string
    prix?: DecimalNullableFilter<"annonces"> | Decimal | DecimalJsLike | number | string | null
    typeTarif?: EnumtypeTarifNullableFilter<"annonces"> | $Enums.typeTarif | null
    priority?: EnumpriorityNullableFilter<"annonces"> | $Enums.priority | null
    localisation?: StringNullableFilter<"annonces"> | string | null
    adresse?: StringFilter<"annonces"> | string
    statut?: EnumstatutNullableFilter<"annonces"> | $Enums.statut | null
    createdAt?: DateTimeFilter<"annonces"> | Date | string
    updatedAt?: DateTimeFilter<"annonces"> | Date | string
    categorieAnnonce?: EnumcategorieAnnonceFilter<"annonces"> | $Enums.categorieAnnonce
    sousCategorie?: StringFilter<"annonces"> | string
    userId?: IntFilter<"annonces"> | number
    priceId?: StringNullableFilter<"annonces"> | string | null
  }

  export type commentaireUpsertWithWhereUniqueWithoutUserInput = {
    where: commentaireWhereUniqueInput
    update: XOR<commentaireUpdateWithoutUserInput, commentaireUncheckedUpdateWithoutUserInput>
    create: XOR<commentaireCreateWithoutUserInput, commentaireUncheckedCreateWithoutUserInput>
  }

  export type commentaireUpdateWithWhereUniqueWithoutUserInput = {
    where: commentaireWhereUniqueInput
    data: XOR<commentaireUpdateWithoutUserInput, commentaireUncheckedUpdateWithoutUserInput>
  }

  export type commentaireUpdateManyWithWhereWithoutUserInput = {
    where: commentaireScalarWhereInput
    data: XOR<commentaireUpdateManyMutationInput, commentaireUncheckedUpdateManyWithoutUserInput>
  }

  export type commentaireScalarWhereInput = {
    AND?: commentaireScalarWhereInput | commentaireScalarWhereInput[]
    OR?: commentaireScalarWhereInput[]
    NOT?: commentaireScalarWhereInput | commentaireScalarWhereInput[]
    id?: IntFilter<"commentaire"> | number
    createdAt?: DateTimeFilter<"commentaire"> | Date | string
    updatedAt?: DateTimeFilter<"commentaire"> | Date | string
    commentaire?: StringFilter<"commentaire"> | string
    note?: IntNullableFilter<"commentaire"> | number | null
    annoncesId?: IntFilter<"commentaire"> | number
    userId?: IntFilter<"commentaire"> | number
  }

  export type favorisUpsertWithWhereUniqueWithoutUserInput = {
    where: favorisWhereUniqueInput
    update: XOR<favorisUpdateWithoutUserInput, favorisUncheckedUpdateWithoutUserInput>
    create: XOR<favorisCreateWithoutUserInput, favorisUncheckedCreateWithoutUserInput>
  }

  export type favorisUpdateWithWhereUniqueWithoutUserInput = {
    where: favorisWhereUniqueInput
    data: XOR<favorisUpdateWithoutUserInput, favorisUncheckedUpdateWithoutUserInput>
  }

  export type favorisUpdateManyWithWhereWithoutUserInput = {
    where: favorisScalarWhereInput
    data: XOR<favorisUpdateManyMutationInput, favorisUncheckedUpdateManyWithoutUserInput>
  }

  export type favorisScalarWhereInput = {
    AND?: favorisScalarWhereInput | favorisScalarWhereInput[]
    OR?: favorisScalarWhereInput[]
    NOT?: favorisScalarWhereInput | favorisScalarWhereInput[]
    id?: IntFilter<"favoris"> | number
    saveDate?: DateTimeFilter<"favoris"> | Date | string
    userId?: IntFilter<"favoris"> | number
    annonceId?: IntFilter<"favoris"> | number
  }

  export type temoignagesUpsertWithWhereUniqueWithoutUserInput = {
    where: temoignagesWhereUniqueInput
    update: XOR<temoignagesUpdateWithoutUserInput, temoignagesUncheckedUpdateWithoutUserInput>
    create: XOR<temoignagesCreateWithoutUserInput, temoignagesUncheckedCreateWithoutUserInput>
  }

  export type temoignagesUpdateWithWhereUniqueWithoutUserInput = {
    where: temoignagesWhereUniqueInput
    data: XOR<temoignagesUpdateWithoutUserInput, temoignagesUncheckedUpdateWithoutUserInput>
  }

  export type temoignagesUpdateManyWithWhereWithoutUserInput = {
    where: temoignagesScalarWhereInput
    data: XOR<temoignagesUpdateManyMutationInput, temoignagesUncheckedUpdateManyWithoutUserInput>
  }

  export type temoignagesScalarWhereInput = {
    AND?: temoignagesScalarWhereInput | temoignagesScalarWhereInput[]
    OR?: temoignagesScalarWhereInput[]
    NOT?: temoignagesScalarWhereInput | temoignagesScalarWhereInput[]
    id?: IntFilter<"temoignages"> | number
    temoignage?: StringFilter<"temoignages"> | string
    noteLilee?: IntFilter<"temoignages"> | number
    ville?: StringNullableFilter<"temoignages"> | string | null
    pays?: StringNullableFilter<"temoignages"> | string | null
    userId?: IntFilter<"temoignages"> | number
  }

  export type transactionsUpsertWithWhereUniqueWithoutUserInput = {
    where: transactionsWhereUniqueInput
    update: XOR<transactionsUpdateWithoutUserInput, transactionsUncheckedUpdateWithoutUserInput>
    create: XOR<transactionsCreateWithoutUserInput, transactionsUncheckedCreateWithoutUserInput>
  }

  export type transactionsUpdateWithWhereUniqueWithoutUserInput = {
    where: transactionsWhereUniqueInput
    data: XOR<transactionsUpdateWithoutUserInput, transactionsUncheckedUpdateWithoutUserInput>
  }

  export type transactionsUpdateManyWithWhereWithoutUserInput = {
    where: transactionsScalarWhereInput
    data: XOR<transactionsUpdateManyMutationInput, transactionsUncheckedUpdateManyWithoutUserInput>
  }

  export type transactionsScalarWhereInput = {
    AND?: transactionsScalarWhereInput | transactionsScalarWhereInput[]
    OR?: transactionsScalarWhereInput[]
    NOT?: transactionsScalarWhereInput | transactionsScalarWhereInput[]
    id?: IntFilter<"transactions"> | number
    dateRange?: JsonFilter<"transactions">
    price?: DecimalFilter<"transactions"> | Decimal | DecimalJsLike | number | string
    quantity?: IntFilter<"transactions"> | number
    status?: EnumtransactionStatusFilter<"transactions"> | $Enums.transactionStatus
    createdAt?: DateTimeFilter<"transactions"> | Date | string
    updatedAt?: DateTimeFilter<"transactions"> | Date | string
    annonceId?: IntFilter<"transactions"> | number
    userId?: IntFilter<"transactions"> | number
  }

  export type adresseFacturationUpsertWithWhereUniqueWithoutUserInput = {
    where: adresseFacturationWhereUniqueInput
    update: XOR<adresseFacturationUpdateWithoutUserInput, adresseFacturationUncheckedUpdateWithoutUserInput>
    create: XOR<adresseFacturationCreateWithoutUserInput, adresseFacturationUncheckedCreateWithoutUserInput>
  }

  export type adresseFacturationUpdateWithWhereUniqueWithoutUserInput = {
    where: adresseFacturationWhereUniqueInput
    data: XOR<adresseFacturationUpdateWithoutUserInput, adresseFacturationUncheckedUpdateWithoutUserInput>
  }

  export type adresseFacturationUpdateManyWithWhereWithoutUserInput = {
    where: adresseFacturationScalarWhereInput
    data: XOR<adresseFacturationUpdateManyMutationInput, adresseFacturationUncheckedUpdateManyWithoutUserInput>
  }

  export type adresseFacturationScalarWhereInput = {
    AND?: adresseFacturationScalarWhereInput | adresseFacturationScalarWhereInput[]
    OR?: adresseFacturationScalarWhereInput[]
    NOT?: adresseFacturationScalarWhereInput | adresseFacturationScalarWhereInput[]
    id?: IntFilter<"adresseFacturation"> | number
    nom?: StringFilter<"adresseFacturation"> | string
    adresse?: StringFilter<"adresseFacturation"> | string
    codePostal?: StringFilter<"adresseFacturation"> | string
    ville?: StringFilter<"adresseFacturation"> | string
    pays?: StringFilter<"adresseFacturation"> | string
    createdAt?: DateTimeFilter<"adresseFacturation"> | Date | string
    updatedAt?: DateTimeFilter<"adresseFacturation"> | Date | string
    userId?: IntFilter<"adresseFacturation"> | number
  }

  export type userCreateWithoutCompanyInput = {
    nom: string
    prenom: string
    email: string
    phone: string
    hashPassword: string
    statutUser: $Enums.statutUser
    role: $Enums.role
    createdAt?: Date | string
    updatedAt?: Date | string
    stripeAccountId?: string | null
    stripeAccountCompleted?: boolean
    profileImages?: profileImageCreateNestedManyWithoutUserInput
    annonces?: annoncesCreateNestedManyWithoutUserInput
    commentaire?: commentaireCreateNestedManyWithoutUserInput
    favoris?: favorisCreateNestedManyWithoutUserInput
    temoignages?: temoignagesCreateNestedManyWithoutUserInput
    transactions?: transactionsCreateNestedManyWithoutUserInput
    adresseFacturation?: adresseFacturationCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutCompanyInput = {
    id?: number
    nom: string
    prenom: string
    email: string
    phone: string
    hashPassword: string
    statutUser: $Enums.statutUser
    role: $Enums.role
    createdAt?: Date | string
    updatedAt?: Date | string
    stripeAccountId?: string | null
    stripeAccountCompleted?: boolean
    profileImages?: profileImageUncheckedCreateNestedManyWithoutUserInput
    annonces?: annoncesUncheckedCreateNestedManyWithoutUserInput
    commentaire?: commentaireUncheckedCreateNestedManyWithoutUserInput
    favoris?: favorisUncheckedCreateNestedManyWithoutUserInput
    temoignages?: temoignagesUncheckedCreateNestedManyWithoutUserInput
    transactions?: transactionsUncheckedCreateNestedManyWithoutUserInput
    adresseFacturation?: adresseFacturationUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutCompanyInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutCompanyInput, userUncheckedCreateWithoutCompanyInput>
  }

  export type userCreateManyCompanyInputEnvelope = {
    data: userCreateManyCompanyInput | userCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type userUpsertWithWhereUniqueWithoutCompanyInput = {
    where: userWhereUniqueInput
    update: XOR<userUpdateWithoutCompanyInput, userUncheckedUpdateWithoutCompanyInput>
    create: XOR<userCreateWithoutCompanyInput, userUncheckedCreateWithoutCompanyInput>
  }

  export type userUpdateWithWhereUniqueWithoutCompanyInput = {
    where: userWhereUniqueInput
    data: XOR<userUpdateWithoutCompanyInput, userUncheckedUpdateWithoutCompanyInput>
  }

  export type userUpdateManyWithWhereWithoutCompanyInput = {
    where: userScalarWhereInput
    data: XOR<userUpdateManyMutationInput, userUncheckedUpdateManyWithoutCompanyInput>
  }

  export type userScalarWhereInput = {
    AND?: userScalarWhereInput | userScalarWhereInput[]
    OR?: userScalarWhereInput[]
    NOT?: userScalarWhereInput | userScalarWhereInput[]
    id?: IntFilter<"user"> | number
    nom?: StringFilter<"user"> | string
    prenom?: StringFilter<"user"> | string
    email?: StringFilter<"user"> | string
    phone?: StringFilter<"user"> | string
    hashPassword?: StringFilter<"user"> | string
    statutUser?: EnumstatutUserFilter<"user"> | $Enums.statutUser
    role?: EnumroleFilter<"user"> | $Enums.role
    createdAt?: DateTimeFilter<"user"> | Date | string
    updatedAt?: DateTimeFilter<"user"> | Date | string
    companyId?: IntNullableFilter<"user"> | number | null
    stripeAccountId?: StringNullableFilter<"user"> | string | null
    stripeAccountCompleted?: BoolFilter<"user"> | boolean
  }

  export type userCreateWithoutProfileImagesInput = {
    nom: string
    prenom: string
    email: string
    phone: string
    hashPassword: string
    statutUser: $Enums.statutUser
    role: $Enums.role
    createdAt?: Date | string
    updatedAt?: Date | string
    stripeAccountId?: string | null
    stripeAccountCompleted?: boolean
    company?: companyCreateNestedOneWithoutUsersInput
    annonces?: annoncesCreateNestedManyWithoutUserInput
    commentaire?: commentaireCreateNestedManyWithoutUserInput
    favoris?: favorisCreateNestedManyWithoutUserInput
    temoignages?: temoignagesCreateNestedManyWithoutUserInput
    transactions?: transactionsCreateNestedManyWithoutUserInput
    adresseFacturation?: adresseFacturationCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutProfileImagesInput = {
    id?: number
    nom: string
    prenom: string
    email: string
    phone: string
    hashPassword: string
    statutUser: $Enums.statutUser
    role: $Enums.role
    createdAt?: Date | string
    updatedAt?: Date | string
    companyId?: number | null
    stripeAccountId?: string | null
    stripeAccountCompleted?: boolean
    annonces?: annoncesUncheckedCreateNestedManyWithoutUserInput
    commentaire?: commentaireUncheckedCreateNestedManyWithoutUserInput
    favoris?: favorisUncheckedCreateNestedManyWithoutUserInput
    temoignages?: temoignagesUncheckedCreateNestedManyWithoutUserInput
    transactions?: transactionsUncheckedCreateNestedManyWithoutUserInput
    adresseFacturation?: adresseFacturationUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutProfileImagesInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutProfileImagesInput, userUncheckedCreateWithoutProfileImagesInput>
  }

  export type userUpsertWithoutProfileImagesInput = {
    update: XOR<userUpdateWithoutProfileImagesInput, userUncheckedUpdateWithoutProfileImagesInput>
    create: XOR<userCreateWithoutProfileImagesInput, userUncheckedCreateWithoutProfileImagesInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutProfileImagesInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutProfileImagesInput, userUncheckedUpdateWithoutProfileImagesInput>
  }

  export type userUpdateWithoutProfileImagesInput = {
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    hashPassword?: StringFieldUpdateOperationsInput | string
    statutUser?: EnumstatutUserFieldUpdateOperationsInput | $Enums.statutUser
    role?: EnumroleFieldUpdateOperationsInput | $Enums.role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stripeAccountId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeAccountCompleted?: BoolFieldUpdateOperationsInput | boolean
    company?: companyUpdateOneWithoutUsersNestedInput
    annonces?: annoncesUpdateManyWithoutUserNestedInput
    commentaire?: commentaireUpdateManyWithoutUserNestedInput
    favoris?: favorisUpdateManyWithoutUserNestedInput
    temoignages?: temoignagesUpdateManyWithoutUserNestedInput
    transactions?: transactionsUpdateManyWithoutUserNestedInput
    adresseFacturation?: adresseFacturationUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutProfileImagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    hashPassword?: StringFieldUpdateOperationsInput | string
    statutUser?: EnumstatutUserFieldUpdateOperationsInput | $Enums.statutUser
    role?: EnumroleFieldUpdateOperationsInput | $Enums.role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companyId?: NullableIntFieldUpdateOperationsInput | number | null
    stripeAccountId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeAccountCompleted?: BoolFieldUpdateOperationsInput | boolean
    annonces?: annoncesUncheckedUpdateManyWithoutUserNestedInput
    commentaire?: commentaireUncheckedUpdateManyWithoutUserNestedInput
    favoris?: favorisUncheckedUpdateManyWithoutUserNestedInput
    temoignages?: temoignagesUncheckedUpdateManyWithoutUserNestedInput
    transactions?: transactionsUncheckedUpdateManyWithoutUserNestedInput
    adresseFacturation?: adresseFacturationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type userCreateWithoutFavorisInput = {
    nom: string
    prenom: string
    email: string
    phone: string
    hashPassword: string
    statutUser: $Enums.statutUser
    role: $Enums.role
    createdAt?: Date | string
    updatedAt?: Date | string
    stripeAccountId?: string | null
    stripeAccountCompleted?: boolean
    profileImages?: profileImageCreateNestedManyWithoutUserInput
    company?: companyCreateNestedOneWithoutUsersInput
    annonces?: annoncesCreateNestedManyWithoutUserInput
    commentaire?: commentaireCreateNestedManyWithoutUserInput
    temoignages?: temoignagesCreateNestedManyWithoutUserInput
    transactions?: transactionsCreateNestedManyWithoutUserInput
    adresseFacturation?: adresseFacturationCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutFavorisInput = {
    id?: number
    nom: string
    prenom: string
    email: string
    phone: string
    hashPassword: string
    statutUser: $Enums.statutUser
    role: $Enums.role
    createdAt?: Date | string
    updatedAt?: Date | string
    companyId?: number | null
    stripeAccountId?: string | null
    stripeAccountCompleted?: boolean
    profileImages?: profileImageUncheckedCreateNestedManyWithoutUserInput
    annonces?: annoncesUncheckedCreateNestedManyWithoutUserInput
    commentaire?: commentaireUncheckedCreateNestedManyWithoutUserInput
    temoignages?: temoignagesUncheckedCreateNestedManyWithoutUserInput
    transactions?: transactionsUncheckedCreateNestedManyWithoutUserInput
    adresseFacturation?: adresseFacturationUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutFavorisInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutFavorisInput, userUncheckedCreateWithoutFavorisInput>
  }

  export type annoncesCreateWithoutFavorisInput = {
    titre: string
    description: string
    prix?: Decimal | DecimalJsLike | number | string | null
    typeTarif?: $Enums.typeTarif | null
    priority?: $Enums.priority | null
    localisation?: string | null
    adresse: string
    statut?: $Enums.statut | null
    createdAt?: Date | string
    updatedAt?: Date | string
    categorieAnnonce: $Enums.categorieAnnonce
    sousCategorie: string
    priceId?: string | null
    imageAnnonces?: imageAnnonceCreateNestedManyWithoutAnnoncesInput
    user: userCreateNestedOneWithoutAnnoncesInput
    commentaire?: commentaireCreateNestedManyWithoutAnnoncesInput
    transactions?: transactionsCreateNestedManyWithoutAnnonceInput
  }

  export type annoncesUncheckedCreateWithoutFavorisInput = {
    id?: number
    titre: string
    description: string
    prix?: Decimal | DecimalJsLike | number | string | null
    typeTarif?: $Enums.typeTarif | null
    priority?: $Enums.priority | null
    localisation?: string | null
    adresse: string
    statut?: $Enums.statut | null
    createdAt?: Date | string
    updatedAt?: Date | string
    categorieAnnonce: $Enums.categorieAnnonce
    sousCategorie: string
    userId: number
    priceId?: string | null
    imageAnnonces?: imageAnnonceUncheckedCreateNestedManyWithoutAnnoncesInput
    commentaire?: commentaireUncheckedCreateNestedManyWithoutAnnoncesInput
    transactions?: transactionsUncheckedCreateNestedManyWithoutAnnonceInput
  }

  export type annoncesCreateOrConnectWithoutFavorisInput = {
    where: annoncesWhereUniqueInput
    create: XOR<annoncesCreateWithoutFavorisInput, annoncesUncheckedCreateWithoutFavorisInput>
  }

  export type userUpsertWithoutFavorisInput = {
    update: XOR<userUpdateWithoutFavorisInput, userUncheckedUpdateWithoutFavorisInput>
    create: XOR<userCreateWithoutFavorisInput, userUncheckedCreateWithoutFavorisInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutFavorisInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutFavorisInput, userUncheckedUpdateWithoutFavorisInput>
  }

  export type userUpdateWithoutFavorisInput = {
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    hashPassword?: StringFieldUpdateOperationsInput | string
    statutUser?: EnumstatutUserFieldUpdateOperationsInput | $Enums.statutUser
    role?: EnumroleFieldUpdateOperationsInput | $Enums.role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stripeAccountId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeAccountCompleted?: BoolFieldUpdateOperationsInput | boolean
    profileImages?: profileImageUpdateManyWithoutUserNestedInput
    company?: companyUpdateOneWithoutUsersNestedInput
    annonces?: annoncesUpdateManyWithoutUserNestedInput
    commentaire?: commentaireUpdateManyWithoutUserNestedInput
    temoignages?: temoignagesUpdateManyWithoutUserNestedInput
    transactions?: transactionsUpdateManyWithoutUserNestedInput
    adresseFacturation?: adresseFacturationUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutFavorisInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    hashPassword?: StringFieldUpdateOperationsInput | string
    statutUser?: EnumstatutUserFieldUpdateOperationsInput | $Enums.statutUser
    role?: EnumroleFieldUpdateOperationsInput | $Enums.role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companyId?: NullableIntFieldUpdateOperationsInput | number | null
    stripeAccountId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeAccountCompleted?: BoolFieldUpdateOperationsInput | boolean
    profileImages?: profileImageUncheckedUpdateManyWithoutUserNestedInput
    annonces?: annoncesUncheckedUpdateManyWithoutUserNestedInput
    commentaire?: commentaireUncheckedUpdateManyWithoutUserNestedInput
    temoignages?: temoignagesUncheckedUpdateManyWithoutUserNestedInput
    transactions?: transactionsUncheckedUpdateManyWithoutUserNestedInput
    adresseFacturation?: adresseFacturationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type annoncesUpsertWithoutFavorisInput = {
    update: XOR<annoncesUpdateWithoutFavorisInput, annoncesUncheckedUpdateWithoutFavorisInput>
    create: XOR<annoncesCreateWithoutFavorisInput, annoncesUncheckedCreateWithoutFavorisInput>
    where?: annoncesWhereInput
  }

  export type annoncesUpdateToOneWithWhereWithoutFavorisInput = {
    where?: annoncesWhereInput
    data: XOR<annoncesUpdateWithoutFavorisInput, annoncesUncheckedUpdateWithoutFavorisInput>
  }

  export type annoncesUpdateWithoutFavorisInput = {
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    prix?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    typeTarif?: NullableEnumtypeTarifFieldUpdateOperationsInput | $Enums.typeTarif | null
    priority?: NullableEnumpriorityFieldUpdateOperationsInput | $Enums.priority | null
    localisation?: NullableStringFieldUpdateOperationsInput | string | null
    adresse?: StringFieldUpdateOperationsInput | string
    statut?: NullableEnumstatutFieldUpdateOperationsInput | $Enums.statut | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categorieAnnonce?: EnumcategorieAnnonceFieldUpdateOperationsInput | $Enums.categorieAnnonce
    sousCategorie?: StringFieldUpdateOperationsInput | string
    priceId?: NullableStringFieldUpdateOperationsInput | string | null
    imageAnnonces?: imageAnnonceUpdateManyWithoutAnnoncesNestedInput
    user?: userUpdateOneRequiredWithoutAnnoncesNestedInput
    commentaire?: commentaireUpdateManyWithoutAnnoncesNestedInput
    transactions?: transactionsUpdateManyWithoutAnnonceNestedInput
  }

  export type annoncesUncheckedUpdateWithoutFavorisInput = {
    id?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    prix?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    typeTarif?: NullableEnumtypeTarifFieldUpdateOperationsInput | $Enums.typeTarif | null
    priority?: NullableEnumpriorityFieldUpdateOperationsInput | $Enums.priority | null
    localisation?: NullableStringFieldUpdateOperationsInput | string | null
    adresse?: StringFieldUpdateOperationsInput | string
    statut?: NullableEnumstatutFieldUpdateOperationsInput | $Enums.statut | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categorieAnnonce?: EnumcategorieAnnonceFieldUpdateOperationsInput | $Enums.categorieAnnonce
    sousCategorie?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    priceId?: NullableStringFieldUpdateOperationsInput | string | null
    imageAnnonces?: imageAnnonceUncheckedUpdateManyWithoutAnnoncesNestedInput
    commentaire?: commentaireUncheckedUpdateManyWithoutAnnoncesNestedInput
    transactions?: transactionsUncheckedUpdateManyWithoutAnnonceNestedInput
  }

  export type imageAnnonceCreateWithoutAnnoncesInput = {
    path: string
  }

  export type imageAnnonceUncheckedCreateWithoutAnnoncesInput = {
    id?: number
    path: string
  }

  export type imageAnnonceCreateOrConnectWithoutAnnoncesInput = {
    where: imageAnnonceWhereUniqueInput
    create: XOR<imageAnnonceCreateWithoutAnnoncesInput, imageAnnonceUncheckedCreateWithoutAnnoncesInput>
  }

  export type imageAnnonceCreateManyAnnoncesInputEnvelope = {
    data: imageAnnonceCreateManyAnnoncesInput | imageAnnonceCreateManyAnnoncesInput[]
    skipDuplicates?: boolean
  }

  export type userCreateWithoutAnnoncesInput = {
    nom: string
    prenom: string
    email: string
    phone: string
    hashPassword: string
    statutUser: $Enums.statutUser
    role: $Enums.role
    createdAt?: Date | string
    updatedAt?: Date | string
    stripeAccountId?: string | null
    stripeAccountCompleted?: boolean
    profileImages?: profileImageCreateNestedManyWithoutUserInput
    company?: companyCreateNestedOneWithoutUsersInput
    commentaire?: commentaireCreateNestedManyWithoutUserInput
    favoris?: favorisCreateNestedManyWithoutUserInput
    temoignages?: temoignagesCreateNestedManyWithoutUserInput
    transactions?: transactionsCreateNestedManyWithoutUserInput
    adresseFacturation?: adresseFacturationCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutAnnoncesInput = {
    id?: number
    nom: string
    prenom: string
    email: string
    phone: string
    hashPassword: string
    statutUser: $Enums.statutUser
    role: $Enums.role
    createdAt?: Date | string
    updatedAt?: Date | string
    companyId?: number | null
    stripeAccountId?: string | null
    stripeAccountCompleted?: boolean
    profileImages?: profileImageUncheckedCreateNestedManyWithoutUserInput
    commentaire?: commentaireUncheckedCreateNestedManyWithoutUserInput
    favoris?: favorisUncheckedCreateNestedManyWithoutUserInput
    temoignages?: temoignagesUncheckedCreateNestedManyWithoutUserInput
    transactions?: transactionsUncheckedCreateNestedManyWithoutUserInput
    adresseFacturation?: adresseFacturationUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutAnnoncesInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutAnnoncesInput, userUncheckedCreateWithoutAnnoncesInput>
  }

  export type commentaireCreateWithoutAnnoncesInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    commentaire: string
    note?: number | null
    user: userCreateNestedOneWithoutCommentaireInput
  }

  export type commentaireUncheckedCreateWithoutAnnoncesInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    commentaire: string
    note?: number | null
    userId: number
  }

  export type commentaireCreateOrConnectWithoutAnnoncesInput = {
    where: commentaireWhereUniqueInput
    create: XOR<commentaireCreateWithoutAnnoncesInput, commentaireUncheckedCreateWithoutAnnoncesInput>
  }

  export type commentaireCreateManyAnnoncesInputEnvelope = {
    data: commentaireCreateManyAnnoncesInput | commentaireCreateManyAnnoncesInput[]
    skipDuplicates?: boolean
  }

  export type favorisCreateWithoutAnnonceInput = {
    saveDate?: Date | string
    user: userCreateNestedOneWithoutFavorisInput
  }

  export type favorisUncheckedCreateWithoutAnnonceInput = {
    id?: number
    saveDate?: Date | string
    userId: number
  }

  export type favorisCreateOrConnectWithoutAnnonceInput = {
    where: favorisWhereUniqueInput
    create: XOR<favorisCreateWithoutAnnonceInput, favorisUncheckedCreateWithoutAnnonceInput>
  }

  export type favorisCreateManyAnnonceInputEnvelope = {
    data: favorisCreateManyAnnonceInput | favorisCreateManyAnnonceInput[]
    skipDuplicates?: boolean
  }

  export type transactionsCreateWithoutAnnonceInput = {
    dateRange?: JsonNullValueInput | InputJsonValue
    price: Decimal | DecimalJsLike | number | string
    quantity: number
    status?: $Enums.transactionStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    user: userCreateNestedOneWithoutTransactionsInput
  }

  export type transactionsUncheckedCreateWithoutAnnonceInput = {
    id?: number
    dateRange?: JsonNullValueInput | InputJsonValue
    price: Decimal | DecimalJsLike | number | string
    quantity: number
    status?: $Enums.transactionStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: number
  }

  export type transactionsCreateOrConnectWithoutAnnonceInput = {
    where: transactionsWhereUniqueInput
    create: XOR<transactionsCreateWithoutAnnonceInput, transactionsUncheckedCreateWithoutAnnonceInput>
  }

  export type transactionsCreateManyAnnonceInputEnvelope = {
    data: transactionsCreateManyAnnonceInput | transactionsCreateManyAnnonceInput[]
    skipDuplicates?: boolean
  }

  export type imageAnnonceUpsertWithWhereUniqueWithoutAnnoncesInput = {
    where: imageAnnonceWhereUniqueInput
    update: XOR<imageAnnonceUpdateWithoutAnnoncesInput, imageAnnonceUncheckedUpdateWithoutAnnoncesInput>
    create: XOR<imageAnnonceCreateWithoutAnnoncesInput, imageAnnonceUncheckedCreateWithoutAnnoncesInput>
  }

  export type imageAnnonceUpdateWithWhereUniqueWithoutAnnoncesInput = {
    where: imageAnnonceWhereUniqueInput
    data: XOR<imageAnnonceUpdateWithoutAnnoncesInput, imageAnnonceUncheckedUpdateWithoutAnnoncesInput>
  }

  export type imageAnnonceUpdateManyWithWhereWithoutAnnoncesInput = {
    where: imageAnnonceScalarWhereInput
    data: XOR<imageAnnonceUpdateManyMutationInput, imageAnnonceUncheckedUpdateManyWithoutAnnoncesInput>
  }

  export type imageAnnonceScalarWhereInput = {
    AND?: imageAnnonceScalarWhereInput | imageAnnonceScalarWhereInput[]
    OR?: imageAnnonceScalarWhereInput[]
    NOT?: imageAnnonceScalarWhereInput | imageAnnonceScalarWhereInput[]
    id?: IntFilter<"imageAnnonce"> | number
    path?: StringFilter<"imageAnnonce"> | string
    annoncesId?: IntFilter<"imageAnnonce"> | number
  }

  export type userUpsertWithoutAnnoncesInput = {
    update: XOR<userUpdateWithoutAnnoncesInput, userUncheckedUpdateWithoutAnnoncesInput>
    create: XOR<userCreateWithoutAnnoncesInput, userUncheckedCreateWithoutAnnoncesInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutAnnoncesInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutAnnoncesInput, userUncheckedUpdateWithoutAnnoncesInput>
  }

  export type userUpdateWithoutAnnoncesInput = {
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    hashPassword?: StringFieldUpdateOperationsInput | string
    statutUser?: EnumstatutUserFieldUpdateOperationsInput | $Enums.statutUser
    role?: EnumroleFieldUpdateOperationsInput | $Enums.role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stripeAccountId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeAccountCompleted?: BoolFieldUpdateOperationsInput | boolean
    profileImages?: profileImageUpdateManyWithoutUserNestedInput
    company?: companyUpdateOneWithoutUsersNestedInput
    commentaire?: commentaireUpdateManyWithoutUserNestedInput
    favoris?: favorisUpdateManyWithoutUserNestedInput
    temoignages?: temoignagesUpdateManyWithoutUserNestedInput
    transactions?: transactionsUpdateManyWithoutUserNestedInput
    adresseFacturation?: adresseFacturationUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutAnnoncesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    hashPassword?: StringFieldUpdateOperationsInput | string
    statutUser?: EnumstatutUserFieldUpdateOperationsInput | $Enums.statutUser
    role?: EnumroleFieldUpdateOperationsInput | $Enums.role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companyId?: NullableIntFieldUpdateOperationsInput | number | null
    stripeAccountId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeAccountCompleted?: BoolFieldUpdateOperationsInput | boolean
    profileImages?: profileImageUncheckedUpdateManyWithoutUserNestedInput
    commentaire?: commentaireUncheckedUpdateManyWithoutUserNestedInput
    favoris?: favorisUncheckedUpdateManyWithoutUserNestedInput
    temoignages?: temoignagesUncheckedUpdateManyWithoutUserNestedInput
    transactions?: transactionsUncheckedUpdateManyWithoutUserNestedInput
    adresseFacturation?: adresseFacturationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type commentaireUpsertWithWhereUniqueWithoutAnnoncesInput = {
    where: commentaireWhereUniqueInput
    update: XOR<commentaireUpdateWithoutAnnoncesInput, commentaireUncheckedUpdateWithoutAnnoncesInput>
    create: XOR<commentaireCreateWithoutAnnoncesInput, commentaireUncheckedCreateWithoutAnnoncesInput>
  }

  export type commentaireUpdateWithWhereUniqueWithoutAnnoncesInput = {
    where: commentaireWhereUniqueInput
    data: XOR<commentaireUpdateWithoutAnnoncesInput, commentaireUncheckedUpdateWithoutAnnoncesInput>
  }

  export type commentaireUpdateManyWithWhereWithoutAnnoncesInput = {
    where: commentaireScalarWhereInput
    data: XOR<commentaireUpdateManyMutationInput, commentaireUncheckedUpdateManyWithoutAnnoncesInput>
  }

  export type favorisUpsertWithWhereUniqueWithoutAnnonceInput = {
    where: favorisWhereUniqueInput
    update: XOR<favorisUpdateWithoutAnnonceInput, favorisUncheckedUpdateWithoutAnnonceInput>
    create: XOR<favorisCreateWithoutAnnonceInput, favorisUncheckedCreateWithoutAnnonceInput>
  }

  export type favorisUpdateWithWhereUniqueWithoutAnnonceInput = {
    where: favorisWhereUniqueInput
    data: XOR<favorisUpdateWithoutAnnonceInput, favorisUncheckedUpdateWithoutAnnonceInput>
  }

  export type favorisUpdateManyWithWhereWithoutAnnonceInput = {
    where: favorisScalarWhereInput
    data: XOR<favorisUpdateManyMutationInput, favorisUncheckedUpdateManyWithoutAnnonceInput>
  }

  export type transactionsUpsertWithWhereUniqueWithoutAnnonceInput = {
    where: transactionsWhereUniqueInput
    update: XOR<transactionsUpdateWithoutAnnonceInput, transactionsUncheckedUpdateWithoutAnnonceInput>
    create: XOR<transactionsCreateWithoutAnnonceInput, transactionsUncheckedCreateWithoutAnnonceInput>
  }

  export type transactionsUpdateWithWhereUniqueWithoutAnnonceInput = {
    where: transactionsWhereUniqueInput
    data: XOR<transactionsUpdateWithoutAnnonceInput, transactionsUncheckedUpdateWithoutAnnonceInput>
  }

  export type transactionsUpdateManyWithWhereWithoutAnnonceInput = {
    where: transactionsScalarWhereInput
    data: XOR<transactionsUpdateManyMutationInput, transactionsUncheckedUpdateManyWithoutAnnonceInput>
  }

  export type annoncesCreateWithoutImageAnnoncesInput = {
    titre: string
    description: string
    prix?: Decimal | DecimalJsLike | number | string | null
    typeTarif?: $Enums.typeTarif | null
    priority?: $Enums.priority | null
    localisation?: string | null
    adresse: string
    statut?: $Enums.statut | null
    createdAt?: Date | string
    updatedAt?: Date | string
    categorieAnnonce: $Enums.categorieAnnonce
    sousCategorie: string
    priceId?: string | null
    user: userCreateNestedOneWithoutAnnoncesInput
    commentaire?: commentaireCreateNestedManyWithoutAnnoncesInput
    favoris?: favorisCreateNestedManyWithoutAnnonceInput
    transactions?: transactionsCreateNestedManyWithoutAnnonceInput
  }

  export type annoncesUncheckedCreateWithoutImageAnnoncesInput = {
    id?: number
    titre: string
    description: string
    prix?: Decimal | DecimalJsLike | number | string | null
    typeTarif?: $Enums.typeTarif | null
    priority?: $Enums.priority | null
    localisation?: string | null
    adresse: string
    statut?: $Enums.statut | null
    createdAt?: Date | string
    updatedAt?: Date | string
    categorieAnnonce: $Enums.categorieAnnonce
    sousCategorie: string
    userId: number
    priceId?: string | null
    commentaire?: commentaireUncheckedCreateNestedManyWithoutAnnoncesInput
    favoris?: favorisUncheckedCreateNestedManyWithoutAnnonceInput
    transactions?: transactionsUncheckedCreateNestedManyWithoutAnnonceInput
  }

  export type annoncesCreateOrConnectWithoutImageAnnoncesInput = {
    where: annoncesWhereUniqueInput
    create: XOR<annoncesCreateWithoutImageAnnoncesInput, annoncesUncheckedCreateWithoutImageAnnoncesInput>
  }

  export type annoncesUpsertWithoutImageAnnoncesInput = {
    update: XOR<annoncesUpdateWithoutImageAnnoncesInput, annoncesUncheckedUpdateWithoutImageAnnoncesInput>
    create: XOR<annoncesCreateWithoutImageAnnoncesInput, annoncesUncheckedCreateWithoutImageAnnoncesInput>
    where?: annoncesWhereInput
  }

  export type annoncesUpdateToOneWithWhereWithoutImageAnnoncesInput = {
    where?: annoncesWhereInput
    data: XOR<annoncesUpdateWithoutImageAnnoncesInput, annoncesUncheckedUpdateWithoutImageAnnoncesInput>
  }

  export type annoncesUpdateWithoutImageAnnoncesInput = {
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    prix?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    typeTarif?: NullableEnumtypeTarifFieldUpdateOperationsInput | $Enums.typeTarif | null
    priority?: NullableEnumpriorityFieldUpdateOperationsInput | $Enums.priority | null
    localisation?: NullableStringFieldUpdateOperationsInput | string | null
    adresse?: StringFieldUpdateOperationsInput | string
    statut?: NullableEnumstatutFieldUpdateOperationsInput | $Enums.statut | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categorieAnnonce?: EnumcategorieAnnonceFieldUpdateOperationsInput | $Enums.categorieAnnonce
    sousCategorie?: StringFieldUpdateOperationsInput | string
    priceId?: NullableStringFieldUpdateOperationsInput | string | null
    user?: userUpdateOneRequiredWithoutAnnoncesNestedInput
    commentaire?: commentaireUpdateManyWithoutAnnoncesNestedInput
    favoris?: favorisUpdateManyWithoutAnnonceNestedInput
    transactions?: transactionsUpdateManyWithoutAnnonceNestedInput
  }

  export type annoncesUncheckedUpdateWithoutImageAnnoncesInput = {
    id?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    prix?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    typeTarif?: NullableEnumtypeTarifFieldUpdateOperationsInput | $Enums.typeTarif | null
    priority?: NullableEnumpriorityFieldUpdateOperationsInput | $Enums.priority | null
    localisation?: NullableStringFieldUpdateOperationsInput | string | null
    adresse?: StringFieldUpdateOperationsInput | string
    statut?: NullableEnumstatutFieldUpdateOperationsInput | $Enums.statut | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categorieAnnonce?: EnumcategorieAnnonceFieldUpdateOperationsInput | $Enums.categorieAnnonce
    sousCategorie?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    priceId?: NullableStringFieldUpdateOperationsInput | string | null
    commentaire?: commentaireUncheckedUpdateManyWithoutAnnoncesNestedInput
    favoris?: favorisUncheckedUpdateManyWithoutAnnonceNestedInput
    transactions?: transactionsUncheckedUpdateManyWithoutAnnonceNestedInput
  }

  export type annoncesCreateWithoutCommentaireInput = {
    titre: string
    description: string
    prix?: Decimal | DecimalJsLike | number | string | null
    typeTarif?: $Enums.typeTarif | null
    priority?: $Enums.priority | null
    localisation?: string | null
    adresse: string
    statut?: $Enums.statut | null
    createdAt?: Date | string
    updatedAt?: Date | string
    categorieAnnonce: $Enums.categorieAnnonce
    sousCategorie: string
    priceId?: string | null
    imageAnnonces?: imageAnnonceCreateNestedManyWithoutAnnoncesInput
    user: userCreateNestedOneWithoutAnnoncesInput
    favoris?: favorisCreateNestedManyWithoutAnnonceInput
    transactions?: transactionsCreateNestedManyWithoutAnnonceInput
  }

  export type annoncesUncheckedCreateWithoutCommentaireInput = {
    id?: number
    titre: string
    description: string
    prix?: Decimal | DecimalJsLike | number | string | null
    typeTarif?: $Enums.typeTarif | null
    priority?: $Enums.priority | null
    localisation?: string | null
    adresse: string
    statut?: $Enums.statut | null
    createdAt?: Date | string
    updatedAt?: Date | string
    categorieAnnonce: $Enums.categorieAnnonce
    sousCategorie: string
    userId: number
    priceId?: string | null
    imageAnnonces?: imageAnnonceUncheckedCreateNestedManyWithoutAnnoncesInput
    favoris?: favorisUncheckedCreateNestedManyWithoutAnnonceInput
    transactions?: transactionsUncheckedCreateNestedManyWithoutAnnonceInput
  }

  export type annoncesCreateOrConnectWithoutCommentaireInput = {
    where: annoncesWhereUniqueInput
    create: XOR<annoncesCreateWithoutCommentaireInput, annoncesUncheckedCreateWithoutCommentaireInput>
  }

  export type userCreateWithoutCommentaireInput = {
    nom: string
    prenom: string
    email: string
    phone: string
    hashPassword: string
    statutUser: $Enums.statutUser
    role: $Enums.role
    createdAt?: Date | string
    updatedAt?: Date | string
    stripeAccountId?: string | null
    stripeAccountCompleted?: boolean
    profileImages?: profileImageCreateNestedManyWithoutUserInput
    company?: companyCreateNestedOneWithoutUsersInput
    annonces?: annoncesCreateNestedManyWithoutUserInput
    favoris?: favorisCreateNestedManyWithoutUserInput
    temoignages?: temoignagesCreateNestedManyWithoutUserInput
    transactions?: transactionsCreateNestedManyWithoutUserInput
    adresseFacturation?: adresseFacturationCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutCommentaireInput = {
    id?: number
    nom: string
    prenom: string
    email: string
    phone: string
    hashPassword: string
    statutUser: $Enums.statutUser
    role: $Enums.role
    createdAt?: Date | string
    updatedAt?: Date | string
    companyId?: number | null
    stripeAccountId?: string | null
    stripeAccountCompleted?: boolean
    profileImages?: profileImageUncheckedCreateNestedManyWithoutUserInput
    annonces?: annoncesUncheckedCreateNestedManyWithoutUserInput
    favoris?: favorisUncheckedCreateNestedManyWithoutUserInput
    temoignages?: temoignagesUncheckedCreateNestedManyWithoutUserInput
    transactions?: transactionsUncheckedCreateNestedManyWithoutUserInput
    adresseFacturation?: adresseFacturationUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutCommentaireInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutCommentaireInput, userUncheckedCreateWithoutCommentaireInput>
  }

  export type annoncesUpsertWithoutCommentaireInput = {
    update: XOR<annoncesUpdateWithoutCommentaireInput, annoncesUncheckedUpdateWithoutCommentaireInput>
    create: XOR<annoncesCreateWithoutCommentaireInput, annoncesUncheckedCreateWithoutCommentaireInput>
    where?: annoncesWhereInput
  }

  export type annoncesUpdateToOneWithWhereWithoutCommentaireInput = {
    where?: annoncesWhereInput
    data: XOR<annoncesUpdateWithoutCommentaireInput, annoncesUncheckedUpdateWithoutCommentaireInput>
  }

  export type annoncesUpdateWithoutCommentaireInput = {
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    prix?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    typeTarif?: NullableEnumtypeTarifFieldUpdateOperationsInput | $Enums.typeTarif | null
    priority?: NullableEnumpriorityFieldUpdateOperationsInput | $Enums.priority | null
    localisation?: NullableStringFieldUpdateOperationsInput | string | null
    adresse?: StringFieldUpdateOperationsInput | string
    statut?: NullableEnumstatutFieldUpdateOperationsInput | $Enums.statut | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categorieAnnonce?: EnumcategorieAnnonceFieldUpdateOperationsInput | $Enums.categorieAnnonce
    sousCategorie?: StringFieldUpdateOperationsInput | string
    priceId?: NullableStringFieldUpdateOperationsInput | string | null
    imageAnnonces?: imageAnnonceUpdateManyWithoutAnnoncesNestedInput
    user?: userUpdateOneRequiredWithoutAnnoncesNestedInput
    favoris?: favorisUpdateManyWithoutAnnonceNestedInput
    transactions?: transactionsUpdateManyWithoutAnnonceNestedInput
  }

  export type annoncesUncheckedUpdateWithoutCommentaireInput = {
    id?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    prix?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    typeTarif?: NullableEnumtypeTarifFieldUpdateOperationsInput | $Enums.typeTarif | null
    priority?: NullableEnumpriorityFieldUpdateOperationsInput | $Enums.priority | null
    localisation?: NullableStringFieldUpdateOperationsInput | string | null
    adresse?: StringFieldUpdateOperationsInput | string
    statut?: NullableEnumstatutFieldUpdateOperationsInput | $Enums.statut | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categorieAnnonce?: EnumcategorieAnnonceFieldUpdateOperationsInput | $Enums.categorieAnnonce
    sousCategorie?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    priceId?: NullableStringFieldUpdateOperationsInput | string | null
    imageAnnonces?: imageAnnonceUncheckedUpdateManyWithoutAnnoncesNestedInput
    favoris?: favorisUncheckedUpdateManyWithoutAnnonceNestedInput
    transactions?: transactionsUncheckedUpdateManyWithoutAnnonceNestedInput
  }

  export type userUpsertWithoutCommentaireInput = {
    update: XOR<userUpdateWithoutCommentaireInput, userUncheckedUpdateWithoutCommentaireInput>
    create: XOR<userCreateWithoutCommentaireInput, userUncheckedCreateWithoutCommentaireInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutCommentaireInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutCommentaireInput, userUncheckedUpdateWithoutCommentaireInput>
  }

  export type userUpdateWithoutCommentaireInput = {
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    hashPassword?: StringFieldUpdateOperationsInput | string
    statutUser?: EnumstatutUserFieldUpdateOperationsInput | $Enums.statutUser
    role?: EnumroleFieldUpdateOperationsInput | $Enums.role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stripeAccountId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeAccountCompleted?: BoolFieldUpdateOperationsInput | boolean
    profileImages?: profileImageUpdateManyWithoutUserNestedInput
    company?: companyUpdateOneWithoutUsersNestedInput
    annonces?: annoncesUpdateManyWithoutUserNestedInput
    favoris?: favorisUpdateManyWithoutUserNestedInput
    temoignages?: temoignagesUpdateManyWithoutUserNestedInput
    transactions?: transactionsUpdateManyWithoutUserNestedInput
    adresseFacturation?: adresseFacturationUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutCommentaireInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    hashPassword?: StringFieldUpdateOperationsInput | string
    statutUser?: EnumstatutUserFieldUpdateOperationsInput | $Enums.statutUser
    role?: EnumroleFieldUpdateOperationsInput | $Enums.role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companyId?: NullableIntFieldUpdateOperationsInput | number | null
    stripeAccountId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeAccountCompleted?: BoolFieldUpdateOperationsInput | boolean
    profileImages?: profileImageUncheckedUpdateManyWithoutUserNestedInput
    annonces?: annoncesUncheckedUpdateManyWithoutUserNestedInput
    favoris?: favorisUncheckedUpdateManyWithoutUserNestedInput
    temoignages?: temoignagesUncheckedUpdateManyWithoutUserNestedInput
    transactions?: transactionsUncheckedUpdateManyWithoutUserNestedInput
    adresseFacturation?: adresseFacturationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type userCreateWithoutTemoignagesInput = {
    nom: string
    prenom: string
    email: string
    phone: string
    hashPassword: string
    statutUser: $Enums.statutUser
    role: $Enums.role
    createdAt?: Date | string
    updatedAt?: Date | string
    stripeAccountId?: string | null
    stripeAccountCompleted?: boolean
    profileImages?: profileImageCreateNestedManyWithoutUserInput
    company?: companyCreateNestedOneWithoutUsersInput
    annonces?: annoncesCreateNestedManyWithoutUserInput
    commentaire?: commentaireCreateNestedManyWithoutUserInput
    favoris?: favorisCreateNestedManyWithoutUserInput
    transactions?: transactionsCreateNestedManyWithoutUserInput
    adresseFacturation?: adresseFacturationCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutTemoignagesInput = {
    id?: number
    nom: string
    prenom: string
    email: string
    phone: string
    hashPassword: string
    statutUser: $Enums.statutUser
    role: $Enums.role
    createdAt?: Date | string
    updatedAt?: Date | string
    companyId?: number | null
    stripeAccountId?: string | null
    stripeAccountCompleted?: boolean
    profileImages?: profileImageUncheckedCreateNestedManyWithoutUserInput
    annonces?: annoncesUncheckedCreateNestedManyWithoutUserInput
    commentaire?: commentaireUncheckedCreateNestedManyWithoutUserInput
    favoris?: favorisUncheckedCreateNestedManyWithoutUserInput
    transactions?: transactionsUncheckedCreateNestedManyWithoutUserInput
    adresseFacturation?: adresseFacturationUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutTemoignagesInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutTemoignagesInput, userUncheckedCreateWithoutTemoignagesInput>
  }

  export type userUpsertWithoutTemoignagesInput = {
    update: XOR<userUpdateWithoutTemoignagesInput, userUncheckedUpdateWithoutTemoignagesInput>
    create: XOR<userCreateWithoutTemoignagesInput, userUncheckedCreateWithoutTemoignagesInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutTemoignagesInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutTemoignagesInput, userUncheckedUpdateWithoutTemoignagesInput>
  }

  export type userUpdateWithoutTemoignagesInput = {
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    hashPassword?: StringFieldUpdateOperationsInput | string
    statutUser?: EnumstatutUserFieldUpdateOperationsInput | $Enums.statutUser
    role?: EnumroleFieldUpdateOperationsInput | $Enums.role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stripeAccountId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeAccountCompleted?: BoolFieldUpdateOperationsInput | boolean
    profileImages?: profileImageUpdateManyWithoutUserNestedInput
    company?: companyUpdateOneWithoutUsersNestedInput
    annonces?: annoncesUpdateManyWithoutUserNestedInput
    commentaire?: commentaireUpdateManyWithoutUserNestedInput
    favoris?: favorisUpdateManyWithoutUserNestedInput
    transactions?: transactionsUpdateManyWithoutUserNestedInput
    adresseFacturation?: adresseFacturationUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutTemoignagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    hashPassword?: StringFieldUpdateOperationsInput | string
    statutUser?: EnumstatutUserFieldUpdateOperationsInput | $Enums.statutUser
    role?: EnumroleFieldUpdateOperationsInput | $Enums.role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companyId?: NullableIntFieldUpdateOperationsInput | number | null
    stripeAccountId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeAccountCompleted?: BoolFieldUpdateOperationsInput | boolean
    profileImages?: profileImageUncheckedUpdateManyWithoutUserNestedInput
    annonces?: annoncesUncheckedUpdateManyWithoutUserNestedInput
    commentaire?: commentaireUncheckedUpdateManyWithoutUserNestedInput
    favoris?: favorisUncheckedUpdateManyWithoutUserNestedInput
    transactions?: transactionsUncheckedUpdateManyWithoutUserNestedInput
    adresseFacturation?: adresseFacturationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type userCreateWithoutAdresseFacturationInput = {
    nom: string
    prenom: string
    email: string
    phone: string
    hashPassword: string
    statutUser: $Enums.statutUser
    role: $Enums.role
    createdAt?: Date | string
    updatedAt?: Date | string
    stripeAccountId?: string | null
    stripeAccountCompleted?: boolean
    profileImages?: profileImageCreateNestedManyWithoutUserInput
    company?: companyCreateNestedOneWithoutUsersInput
    annonces?: annoncesCreateNestedManyWithoutUserInput
    commentaire?: commentaireCreateNestedManyWithoutUserInput
    favoris?: favorisCreateNestedManyWithoutUserInput
    temoignages?: temoignagesCreateNestedManyWithoutUserInput
    transactions?: transactionsCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutAdresseFacturationInput = {
    id?: number
    nom: string
    prenom: string
    email: string
    phone: string
    hashPassword: string
    statutUser: $Enums.statutUser
    role: $Enums.role
    createdAt?: Date | string
    updatedAt?: Date | string
    companyId?: number | null
    stripeAccountId?: string | null
    stripeAccountCompleted?: boolean
    profileImages?: profileImageUncheckedCreateNestedManyWithoutUserInput
    annonces?: annoncesUncheckedCreateNestedManyWithoutUserInput
    commentaire?: commentaireUncheckedCreateNestedManyWithoutUserInput
    favoris?: favorisUncheckedCreateNestedManyWithoutUserInput
    temoignages?: temoignagesUncheckedCreateNestedManyWithoutUserInput
    transactions?: transactionsUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutAdresseFacturationInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutAdresseFacturationInput, userUncheckedCreateWithoutAdresseFacturationInput>
  }

  export type userUpsertWithoutAdresseFacturationInput = {
    update: XOR<userUpdateWithoutAdresseFacturationInput, userUncheckedUpdateWithoutAdresseFacturationInput>
    create: XOR<userCreateWithoutAdresseFacturationInput, userUncheckedCreateWithoutAdresseFacturationInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutAdresseFacturationInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutAdresseFacturationInput, userUncheckedUpdateWithoutAdresseFacturationInput>
  }

  export type userUpdateWithoutAdresseFacturationInput = {
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    hashPassword?: StringFieldUpdateOperationsInput | string
    statutUser?: EnumstatutUserFieldUpdateOperationsInput | $Enums.statutUser
    role?: EnumroleFieldUpdateOperationsInput | $Enums.role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stripeAccountId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeAccountCompleted?: BoolFieldUpdateOperationsInput | boolean
    profileImages?: profileImageUpdateManyWithoutUserNestedInput
    company?: companyUpdateOneWithoutUsersNestedInput
    annonces?: annoncesUpdateManyWithoutUserNestedInput
    commentaire?: commentaireUpdateManyWithoutUserNestedInput
    favoris?: favorisUpdateManyWithoutUserNestedInput
    temoignages?: temoignagesUpdateManyWithoutUserNestedInput
    transactions?: transactionsUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutAdresseFacturationInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    hashPassword?: StringFieldUpdateOperationsInput | string
    statutUser?: EnumstatutUserFieldUpdateOperationsInput | $Enums.statutUser
    role?: EnumroleFieldUpdateOperationsInput | $Enums.role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companyId?: NullableIntFieldUpdateOperationsInput | number | null
    stripeAccountId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeAccountCompleted?: BoolFieldUpdateOperationsInput | boolean
    profileImages?: profileImageUncheckedUpdateManyWithoutUserNestedInput
    annonces?: annoncesUncheckedUpdateManyWithoutUserNestedInput
    commentaire?: commentaireUncheckedUpdateManyWithoutUserNestedInput
    favoris?: favorisUncheckedUpdateManyWithoutUserNestedInput
    temoignages?: temoignagesUncheckedUpdateManyWithoutUserNestedInput
    transactions?: transactionsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type logoCreateWithoutEngagementInput = {
    path: string
  }

  export type logoUncheckedCreateWithoutEngagementInput = {
    id?: number
    path: string
  }

  export type logoCreateOrConnectWithoutEngagementInput = {
    where: logoWhereUniqueInput
    create: XOR<logoCreateWithoutEngagementInput, logoUncheckedCreateWithoutEngagementInput>
  }

  export type logoCreateManyEngagementInputEnvelope = {
    data: logoCreateManyEngagementInput | logoCreateManyEngagementInput[]
    skipDuplicates?: boolean
  }

  export type contenuPartenaireCreateWithoutEngagementInput = {
    path: string
  }

  export type contenuPartenaireUncheckedCreateWithoutEngagementInput = {
    id?: number
    path: string
  }

  export type contenuPartenaireCreateOrConnectWithoutEngagementInput = {
    where: contenuPartenaireWhereUniqueInput
    create: XOR<contenuPartenaireCreateWithoutEngagementInput, contenuPartenaireUncheckedCreateWithoutEngagementInput>
  }

  export type contenuPartenaireCreateManyEngagementInputEnvelope = {
    data: contenuPartenaireCreateManyEngagementInput | contenuPartenaireCreateManyEngagementInput[]
    skipDuplicates?: boolean
  }

  export type logoUpsertWithWhereUniqueWithoutEngagementInput = {
    where: logoWhereUniqueInput
    update: XOR<logoUpdateWithoutEngagementInput, logoUncheckedUpdateWithoutEngagementInput>
    create: XOR<logoCreateWithoutEngagementInput, logoUncheckedCreateWithoutEngagementInput>
  }

  export type logoUpdateWithWhereUniqueWithoutEngagementInput = {
    where: logoWhereUniqueInput
    data: XOR<logoUpdateWithoutEngagementInput, logoUncheckedUpdateWithoutEngagementInput>
  }

  export type logoUpdateManyWithWhereWithoutEngagementInput = {
    where: logoScalarWhereInput
    data: XOR<logoUpdateManyMutationInput, logoUncheckedUpdateManyWithoutEngagementInput>
  }

  export type logoScalarWhereInput = {
    AND?: logoScalarWhereInput | logoScalarWhereInput[]
    OR?: logoScalarWhereInput[]
    NOT?: logoScalarWhereInput | logoScalarWhereInput[]
    id?: IntFilter<"logo"> | number
    path?: StringFilter<"logo"> | string
    engagementId?: IntFilter<"logo"> | number
  }

  export type contenuPartenaireUpsertWithWhereUniqueWithoutEngagementInput = {
    where: contenuPartenaireWhereUniqueInput
    update: XOR<contenuPartenaireUpdateWithoutEngagementInput, contenuPartenaireUncheckedUpdateWithoutEngagementInput>
    create: XOR<contenuPartenaireCreateWithoutEngagementInput, contenuPartenaireUncheckedCreateWithoutEngagementInput>
  }

  export type contenuPartenaireUpdateWithWhereUniqueWithoutEngagementInput = {
    where: contenuPartenaireWhereUniqueInput
    data: XOR<contenuPartenaireUpdateWithoutEngagementInput, contenuPartenaireUncheckedUpdateWithoutEngagementInput>
  }

  export type contenuPartenaireUpdateManyWithWhereWithoutEngagementInput = {
    where: contenuPartenaireScalarWhereInput
    data: XOR<contenuPartenaireUpdateManyMutationInput, contenuPartenaireUncheckedUpdateManyWithoutEngagementInput>
  }

  export type contenuPartenaireScalarWhereInput = {
    AND?: contenuPartenaireScalarWhereInput | contenuPartenaireScalarWhereInput[]
    OR?: contenuPartenaireScalarWhereInput[]
    NOT?: contenuPartenaireScalarWhereInput | contenuPartenaireScalarWhereInput[]
    id?: IntFilter<"contenuPartenaire"> | number
    path?: StringFilter<"contenuPartenaire"> | string
    engagementId?: IntFilter<"contenuPartenaire"> | number
  }

  export type engagementCreateWithoutContenuPartenaireInput = {
    nom: string
    createdAt?: Date | string
    updatedAt?: Date | string
    statutPartenaire?: $Enums.statutPartenaire
    siteWeb?: string | null
    adresse: string
    email: string
    phone: string
    facebook?: string | null
    instagram?: string | null
    twitter?: string | null
    linkedin?: string | null
    tikTok?: string | null
    youtube?: string | null
    duree: $Enums.duree
    description?: string | null
    logo?: logoCreateNestedManyWithoutEngagementInput
  }

  export type engagementUncheckedCreateWithoutContenuPartenaireInput = {
    id?: number
    nom: string
    createdAt?: Date | string
    updatedAt?: Date | string
    statutPartenaire?: $Enums.statutPartenaire
    siteWeb?: string | null
    adresse: string
    email: string
    phone: string
    facebook?: string | null
    instagram?: string | null
    twitter?: string | null
    linkedin?: string | null
    tikTok?: string | null
    youtube?: string | null
    duree: $Enums.duree
    description?: string | null
    logo?: logoUncheckedCreateNestedManyWithoutEngagementInput
  }

  export type engagementCreateOrConnectWithoutContenuPartenaireInput = {
    where: engagementWhereUniqueInput
    create: XOR<engagementCreateWithoutContenuPartenaireInput, engagementUncheckedCreateWithoutContenuPartenaireInput>
  }

  export type engagementUpsertWithoutContenuPartenaireInput = {
    update: XOR<engagementUpdateWithoutContenuPartenaireInput, engagementUncheckedUpdateWithoutContenuPartenaireInput>
    create: XOR<engagementCreateWithoutContenuPartenaireInput, engagementUncheckedCreateWithoutContenuPartenaireInput>
    where?: engagementWhereInput
  }

  export type engagementUpdateToOneWithWhereWithoutContenuPartenaireInput = {
    where?: engagementWhereInput
    data: XOR<engagementUpdateWithoutContenuPartenaireInput, engagementUncheckedUpdateWithoutContenuPartenaireInput>
  }

  export type engagementUpdateWithoutContenuPartenaireInput = {
    nom?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    statutPartenaire?: EnumstatutPartenaireFieldUpdateOperationsInput | $Enums.statutPartenaire
    siteWeb?: NullableStringFieldUpdateOperationsInput | string | null
    adresse?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    twitter?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    tikTok?: NullableStringFieldUpdateOperationsInput | string | null
    youtube?: NullableStringFieldUpdateOperationsInput | string | null
    duree?: EnumdureeFieldUpdateOperationsInput | $Enums.duree
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: logoUpdateManyWithoutEngagementNestedInput
  }

  export type engagementUncheckedUpdateWithoutContenuPartenaireInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    statutPartenaire?: EnumstatutPartenaireFieldUpdateOperationsInput | $Enums.statutPartenaire
    siteWeb?: NullableStringFieldUpdateOperationsInput | string | null
    adresse?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    twitter?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    tikTok?: NullableStringFieldUpdateOperationsInput | string | null
    youtube?: NullableStringFieldUpdateOperationsInput | string | null
    duree?: EnumdureeFieldUpdateOperationsInput | $Enums.duree
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: logoUncheckedUpdateManyWithoutEngagementNestedInput
  }

  export type engagementCreateWithoutLogoInput = {
    nom: string
    createdAt?: Date | string
    updatedAt?: Date | string
    statutPartenaire?: $Enums.statutPartenaire
    siteWeb?: string | null
    adresse: string
    email: string
    phone: string
    facebook?: string | null
    instagram?: string | null
    twitter?: string | null
    linkedin?: string | null
    tikTok?: string | null
    youtube?: string | null
    duree: $Enums.duree
    description?: string | null
    contenuPartenaire?: contenuPartenaireCreateNestedManyWithoutEngagementInput
  }

  export type engagementUncheckedCreateWithoutLogoInput = {
    id?: number
    nom: string
    createdAt?: Date | string
    updatedAt?: Date | string
    statutPartenaire?: $Enums.statutPartenaire
    siteWeb?: string | null
    adresse: string
    email: string
    phone: string
    facebook?: string | null
    instagram?: string | null
    twitter?: string | null
    linkedin?: string | null
    tikTok?: string | null
    youtube?: string | null
    duree: $Enums.duree
    description?: string | null
    contenuPartenaire?: contenuPartenaireUncheckedCreateNestedManyWithoutEngagementInput
  }

  export type engagementCreateOrConnectWithoutLogoInput = {
    where: engagementWhereUniqueInput
    create: XOR<engagementCreateWithoutLogoInput, engagementUncheckedCreateWithoutLogoInput>
  }

  export type engagementUpsertWithoutLogoInput = {
    update: XOR<engagementUpdateWithoutLogoInput, engagementUncheckedUpdateWithoutLogoInput>
    create: XOR<engagementCreateWithoutLogoInput, engagementUncheckedCreateWithoutLogoInput>
    where?: engagementWhereInput
  }

  export type engagementUpdateToOneWithWhereWithoutLogoInput = {
    where?: engagementWhereInput
    data: XOR<engagementUpdateWithoutLogoInput, engagementUncheckedUpdateWithoutLogoInput>
  }

  export type engagementUpdateWithoutLogoInput = {
    nom?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    statutPartenaire?: EnumstatutPartenaireFieldUpdateOperationsInput | $Enums.statutPartenaire
    siteWeb?: NullableStringFieldUpdateOperationsInput | string | null
    adresse?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    twitter?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    tikTok?: NullableStringFieldUpdateOperationsInput | string | null
    youtube?: NullableStringFieldUpdateOperationsInput | string | null
    duree?: EnumdureeFieldUpdateOperationsInput | $Enums.duree
    description?: NullableStringFieldUpdateOperationsInput | string | null
    contenuPartenaire?: contenuPartenaireUpdateManyWithoutEngagementNestedInput
  }

  export type engagementUncheckedUpdateWithoutLogoInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    statutPartenaire?: EnumstatutPartenaireFieldUpdateOperationsInput | $Enums.statutPartenaire
    siteWeb?: NullableStringFieldUpdateOperationsInput | string | null
    adresse?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    twitter?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    tikTok?: NullableStringFieldUpdateOperationsInput | string | null
    youtube?: NullableStringFieldUpdateOperationsInput | string | null
    duree?: EnumdureeFieldUpdateOperationsInput | $Enums.duree
    description?: NullableStringFieldUpdateOperationsInput | string | null
    contenuPartenaire?: contenuPartenaireUncheckedUpdateManyWithoutEngagementNestedInput
  }

  export type imageCreateWithoutArticleInput = {
    path: string
  }

  export type imageUncheckedCreateWithoutArticleInput = {
    id?: number
    path: string
  }

  export type imageCreateOrConnectWithoutArticleInput = {
    where: imageWhereUniqueInput
    create: XOR<imageCreateWithoutArticleInput, imageUncheckedCreateWithoutArticleInput>
  }

  export type imageCreateManyArticleInputEnvelope = {
    data: imageCreateManyArticleInput | imageCreateManyArticleInput[]
    skipDuplicates?: boolean
  }

  export type imageUpsertWithWhereUniqueWithoutArticleInput = {
    where: imageWhereUniqueInput
    update: XOR<imageUpdateWithoutArticleInput, imageUncheckedUpdateWithoutArticleInput>
    create: XOR<imageCreateWithoutArticleInput, imageUncheckedCreateWithoutArticleInput>
  }

  export type imageUpdateWithWhereUniqueWithoutArticleInput = {
    where: imageWhereUniqueInput
    data: XOR<imageUpdateWithoutArticleInput, imageUncheckedUpdateWithoutArticleInput>
  }

  export type imageUpdateManyWithWhereWithoutArticleInput = {
    where: imageScalarWhereInput
    data: XOR<imageUpdateManyMutationInput, imageUncheckedUpdateManyWithoutArticleInput>
  }

  export type imageScalarWhereInput = {
    AND?: imageScalarWhereInput | imageScalarWhereInput[]
    OR?: imageScalarWhereInput[]
    NOT?: imageScalarWhereInput | imageScalarWhereInput[]
    id?: IntFilter<"image"> | number
    path?: StringFilter<"image"> | string
    articleId?: IntFilter<"image"> | number
  }

  export type articleCreateWithoutImagesInput = {
    titre: string
    contenu: string
    categorieArticle: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type articleUncheckedCreateWithoutImagesInput = {
    id?: number
    titre: string
    contenu: string
    categorieArticle: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type articleCreateOrConnectWithoutImagesInput = {
    where: articleWhereUniqueInput
    create: XOR<articleCreateWithoutImagesInput, articleUncheckedCreateWithoutImagesInput>
  }

  export type articleUpsertWithoutImagesInput = {
    update: XOR<articleUpdateWithoutImagesInput, articleUncheckedUpdateWithoutImagesInput>
    create: XOR<articleCreateWithoutImagesInput, articleUncheckedCreateWithoutImagesInput>
    where?: articleWhereInput
  }

  export type articleUpdateToOneWithWhereWithoutImagesInput = {
    where?: articleWhereInput
    data: XOR<articleUpdateWithoutImagesInput, articleUncheckedUpdateWithoutImagesInput>
  }

  export type articleUpdateWithoutImagesInput = {
    titre?: StringFieldUpdateOperationsInput | string
    contenu?: StringFieldUpdateOperationsInput | string
    categorieArticle?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type articleUncheckedUpdateWithoutImagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    contenu?: StringFieldUpdateOperationsInput | string
    categorieArticle?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type annoncesCreateWithoutTransactionsInput = {
    titre: string
    description: string
    prix?: Decimal | DecimalJsLike | number | string | null
    typeTarif?: $Enums.typeTarif | null
    priority?: $Enums.priority | null
    localisation?: string | null
    adresse: string
    statut?: $Enums.statut | null
    createdAt?: Date | string
    updatedAt?: Date | string
    categorieAnnonce: $Enums.categorieAnnonce
    sousCategorie: string
    priceId?: string | null
    imageAnnonces?: imageAnnonceCreateNestedManyWithoutAnnoncesInput
    user: userCreateNestedOneWithoutAnnoncesInput
    commentaire?: commentaireCreateNestedManyWithoutAnnoncesInput
    favoris?: favorisCreateNestedManyWithoutAnnonceInput
  }

  export type annoncesUncheckedCreateWithoutTransactionsInput = {
    id?: number
    titre: string
    description: string
    prix?: Decimal | DecimalJsLike | number | string | null
    typeTarif?: $Enums.typeTarif | null
    priority?: $Enums.priority | null
    localisation?: string | null
    adresse: string
    statut?: $Enums.statut | null
    createdAt?: Date | string
    updatedAt?: Date | string
    categorieAnnonce: $Enums.categorieAnnonce
    sousCategorie: string
    userId: number
    priceId?: string | null
    imageAnnonces?: imageAnnonceUncheckedCreateNestedManyWithoutAnnoncesInput
    commentaire?: commentaireUncheckedCreateNestedManyWithoutAnnoncesInput
    favoris?: favorisUncheckedCreateNestedManyWithoutAnnonceInput
  }

  export type annoncesCreateOrConnectWithoutTransactionsInput = {
    where: annoncesWhereUniqueInput
    create: XOR<annoncesCreateWithoutTransactionsInput, annoncesUncheckedCreateWithoutTransactionsInput>
  }

  export type userCreateWithoutTransactionsInput = {
    nom: string
    prenom: string
    email: string
    phone: string
    hashPassword: string
    statutUser: $Enums.statutUser
    role: $Enums.role
    createdAt?: Date | string
    updatedAt?: Date | string
    stripeAccountId?: string | null
    stripeAccountCompleted?: boolean
    profileImages?: profileImageCreateNestedManyWithoutUserInput
    company?: companyCreateNestedOneWithoutUsersInput
    annonces?: annoncesCreateNestedManyWithoutUserInput
    commentaire?: commentaireCreateNestedManyWithoutUserInput
    favoris?: favorisCreateNestedManyWithoutUserInput
    temoignages?: temoignagesCreateNestedManyWithoutUserInput
    adresseFacturation?: adresseFacturationCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutTransactionsInput = {
    id?: number
    nom: string
    prenom: string
    email: string
    phone: string
    hashPassword: string
    statutUser: $Enums.statutUser
    role: $Enums.role
    createdAt?: Date | string
    updatedAt?: Date | string
    companyId?: number | null
    stripeAccountId?: string | null
    stripeAccountCompleted?: boolean
    profileImages?: profileImageUncheckedCreateNestedManyWithoutUserInput
    annonces?: annoncesUncheckedCreateNestedManyWithoutUserInput
    commentaire?: commentaireUncheckedCreateNestedManyWithoutUserInput
    favoris?: favorisUncheckedCreateNestedManyWithoutUserInput
    temoignages?: temoignagesUncheckedCreateNestedManyWithoutUserInput
    adresseFacturation?: adresseFacturationUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutTransactionsInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutTransactionsInput, userUncheckedCreateWithoutTransactionsInput>
  }

  export type annoncesUpsertWithoutTransactionsInput = {
    update: XOR<annoncesUpdateWithoutTransactionsInput, annoncesUncheckedUpdateWithoutTransactionsInput>
    create: XOR<annoncesCreateWithoutTransactionsInput, annoncesUncheckedCreateWithoutTransactionsInput>
    where?: annoncesWhereInput
  }

  export type annoncesUpdateToOneWithWhereWithoutTransactionsInput = {
    where?: annoncesWhereInput
    data: XOR<annoncesUpdateWithoutTransactionsInput, annoncesUncheckedUpdateWithoutTransactionsInput>
  }

  export type annoncesUpdateWithoutTransactionsInput = {
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    prix?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    typeTarif?: NullableEnumtypeTarifFieldUpdateOperationsInput | $Enums.typeTarif | null
    priority?: NullableEnumpriorityFieldUpdateOperationsInput | $Enums.priority | null
    localisation?: NullableStringFieldUpdateOperationsInput | string | null
    adresse?: StringFieldUpdateOperationsInput | string
    statut?: NullableEnumstatutFieldUpdateOperationsInput | $Enums.statut | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categorieAnnonce?: EnumcategorieAnnonceFieldUpdateOperationsInput | $Enums.categorieAnnonce
    sousCategorie?: StringFieldUpdateOperationsInput | string
    priceId?: NullableStringFieldUpdateOperationsInput | string | null
    imageAnnonces?: imageAnnonceUpdateManyWithoutAnnoncesNestedInput
    user?: userUpdateOneRequiredWithoutAnnoncesNestedInput
    commentaire?: commentaireUpdateManyWithoutAnnoncesNestedInput
    favoris?: favorisUpdateManyWithoutAnnonceNestedInput
  }

  export type annoncesUncheckedUpdateWithoutTransactionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    prix?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    typeTarif?: NullableEnumtypeTarifFieldUpdateOperationsInput | $Enums.typeTarif | null
    priority?: NullableEnumpriorityFieldUpdateOperationsInput | $Enums.priority | null
    localisation?: NullableStringFieldUpdateOperationsInput | string | null
    adresse?: StringFieldUpdateOperationsInput | string
    statut?: NullableEnumstatutFieldUpdateOperationsInput | $Enums.statut | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categorieAnnonce?: EnumcategorieAnnonceFieldUpdateOperationsInput | $Enums.categorieAnnonce
    sousCategorie?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    priceId?: NullableStringFieldUpdateOperationsInput | string | null
    imageAnnonces?: imageAnnonceUncheckedUpdateManyWithoutAnnoncesNestedInput
    commentaire?: commentaireUncheckedUpdateManyWithoutAnnoncesNestedInput
    favoris?: favorisUncheckedUpdateManyWithoutAnnonceNestedInput
  }

  export type userUpsertWithoutTransactionsInput = {
    update: XOR<userUpdateWithoutTransactionsInput, userUncheckedUpdateWithoutTransactionsInput>
    create: XOR<userCreateWithoutTransactionsInput, userUncheckedCreateWithoutTransactionsInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutTransactionsInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutTransactionsInput, userUncheckedUpdateWithoutTransactionsInput>
  }

  export type userUpdateWithoutTransactionsInput = {
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    hashPassword?: StringFieldUpdateOperationsInput | string
    statutUser?: EnumstatutUserFieldUpdateOperationsInput | $Enums.statutUser
    role?: EnumroleFieldUpdateOperationsInput | $Enums.role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stripeAccountId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeAccountCompleted?: BoolFieldUpdateOperationsInput | boolean
    profileImages?: profileImageUpdateManyWithoutUserNestedInput
    company?: companyUpdateOneWithoutUsersNestedInput
    annonces?: annoncesUpdateManyWithoutUserNestedInput
    commentaire?: commentaireUpdateManyWithoutUserNestedInput
    favoris?: favorisUpdateManyWithoutUserNestedInput
    temoignages?: temoignagesUpdateManyWithoutUserNestedInput
    adresseFacturation?: adresseFacturationUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutTransactionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    hashPassword?: StringFieldUpdateOperationsInput | string
    statutUser?: EnumstatutUserFieldUpdateOperationsInput | $Enums.statutUser
    role?: EnumroleFieldUpdateOperationsInput | $Enums.role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companyId?: NullableIntFieldUpdateOperationsInput | number | null
    stripeAccountId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeAccountCompleted?: BoolFieldUpdateOperationsInput | boolean
    profileImages?: profileImageUncheckedUpdateManyWithoutUserNestedInput
    annonces?: annoncesUncheckedUpdateManyWithoutUserNestedInput
    commentaire?: commentaireUncheckedUpdateManyWithoutUserNestedInput
    favoris?: favorisUncheckedUpdateManyWithoutUserNestedInput
    temoignages?: temoignagesUncheckedUpdateManyWithoutUserNestedInput
    adresseFacturation?: adresseFacturationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type profileImageCreateManyUserInput = {
    id?: number
    path: string
  }

  export type annoncesCreateManyUserInput = {
    id?: number
    titre: string
    description: string
    prix?: Decimal | DecimalJsLike | number | string | null
    typeTarif?: $Enums.typeTarif | null
    priority?: $Enums.priority | null
    localisation?: string | null
    adresse: string
    statut?: $Enums.statut | null
    createdAt?: Date | string
    updatedAt?: Date | string
    categorieAnnonce: $Enums.categorieAnnonce
    sousCategorie: string
    priceId?: string | null
  }

  export type commentaireCreateManyUserInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    commentaire: string
    note?: number | null
    annoncesId: number
  }

  export type favorisCreateManyUserInput = {
    id?: number
    saveDate?: Date | string
    annonceId: number
  }

  export type temoignagesCreateManyUserInput = {
    id?: number
    temoignage: string
    noteLilee: number
    ville?: string | null
    pays?: string | null
  }

  export type transactionsCreateManyUserInput = {
    id?: number
    dateRange?: JsonNullValueInput | InputJsonValue
    price: Decimal | DecimalJsLike | number | string
    quantity: number
    status?: $Enums.transactionStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    annonceId: number
  }

  export type adresseFacturationCreateManyUserInput = {
    id?: number
    nom: string
    adresse: string
    codePostal: string
    ville: string
    pays: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type profileImageUpdateWithoutUserInput = {
    path?: StringFieldUpdateOperationsInput | string
  }

  export type profileImageUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
  }

  export type profileImageUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
  }

  export type annoncesUpdateWithoutUserInput = {
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    prix?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    typeTarif?: NullableEnumtypeTarifFieldUpdateOperationsInput | $Enums.typeTarif | null
    priority?: NullableEnumpriorityFieldUpdateOperationsInput | $Enums.priority | null
    localisation?: NullableStringFieldUpdateOperationsInput | string | null
    adresse?: StringFieldUpdateOperationsInput | string
    statut?: NullableEnumstatutFieldUpdateOperationsInput | $Enums.statut | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categorieAnnonce?: EnumcategorieAnnonceFieldUpdateOperationsInput | $Enums.categorieAnnonce
    sousCategorie?: StringFieldUpdateOperationsInput | string
    priceId?: NullableStringFieldUpdateOperationsInput | string | null
    imageAnnonces?: imageAnnonceUpdateManyWithoutAnnoncesNestedInput
    commentaire?: commentaireUpdateManyWithoutAnnoncesNestedInput
    favoris?: favorisUpdateManyWithoutAnnonceNestedInput
    transactions?: transactionsUpdateManyWithoutAnnonceNestedInput
  }

  export type annoncesUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    prix?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    typeTarif?: NullableEnumtypeTarifFieldUpdateOperationsInput | $Enums.typeTarif | null
    priority?: NullableEnumpriorityFieldUpdateOperationsInput | $Enums.priority | null
    localisation?: NullableStringFieldUpdateOperationsInput | string | null
    adresse?: StringFieldUpdateOperationsInput | string
    statut?: NullableEnumstatutFieldUpdateOperationsInput | $Enums.statut | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categorieAnnonce?: EnumcategorieAnnonceFieldUpdateOperationsInput | $Enums.categorieAnnonce
    sousCategorie?: StringFieldUpdateOperationsInput | string
    priceId?: NullableStringFieldUpdateOperationsInput | string | null
    imageAnnonces?: imageAnnonceUncheckedUpdateManyWithoutAnnoncesNestedInput
    commentaire?: commentaireUncheckedUpdateManyWithoutAnnoncesNestedInput
    favoris?: favorisUncheckedUpdateManyWithoutAnnonceNestedInput
    transactions?: transactionsUncheckedUpdateManyWithoutAnnonceNestedInput
  }

  export type annoncesUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    prix?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    typeTarif?: NullableEnumtypeTarifFieldUpdateOperationsInput | $Enums.typeTarif | null
    priority?: NullableEnumpriorityFieldUpdateOperationsInput | $Enums.priority | null
    localisation?: NullableStringFieldUpdateOperationsInput | string | null
    adresse?: StringFieldUpdateOperationsInput | string
    statut?: NullableEnumstatutFieldUpdateOperationsInput | $Enums.statut | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categorieAnnonce?: EnumcategorieAnnonceFieldUpdateOperationsInput | $Enums.categorieAnnonce
    sousCategorie?: StringFieldUpdateOperationsInput | string
    priceId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type commentaireUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    commentaire?: StringFieldUpdateOperationsInput | string
    note?: NullableIntFieldUpdateOperationsInput | number | null
    annonces?: annoncesUpdateOneRequiredWithoutCommentaireNestedInput
  }

  export type commentaireUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    commentaire?: StringFieldUpdateOperationsInput | string
    note?: NullableIntFieldUpdateOperationsInput | number | null
    annoncesId?: IntFieldUpdateOperationsInput | number
  }

  export type commentaireUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    commentaire?: StringFieldUpdateOperationsInput | string
    note?: NullableIntFieldUpdateOperationsInput | number | null
    annoncesId?: IntFieldUpdateOperationsInput | number
  }

  export type favorisUpdateWithoutUserInput = {
    saveDate?: DateTimeFieldUpdateOperationsInput | Date | string
    annonce?: annoncesUpdateOneRequiredWithoutFavorisNestedInput
  }

  export type favorisUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    saveDate?: DateTimeFieldUpdateOperationsInput | Date | string
    annonceId?: IntFieldUpdateOperationsInput | number
  }

  export type favorisUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    saveDate?: DateTimeFieldUpdateOperationsInput | Date | string
    annonceId?: IntFieldUpdateOperationsInput | number
  }

  export type temoignagesUpdateWithoutUserInput = {
    temoignage?: StringFieldUpdateOperationsInput | string
    noteLilee?: IntFieldUpdateOperationsInput | number
    ville?: NullableStringFieldUpdateOperationsInput | string | null
    pays?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type temoignagesUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    temoignage?: StringFieldUpdateOperationsInput | string
    noteLilee?: IntFieldUpdateOperationsInput | number
    ville?: NullableStringFieldUpdateOperationsInput | string | null
    pays?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type temoignagesUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    temoignage?: StringFieldUpdateOperationsInput | string
    noteLilee?: IntFieldUpdateOperationsInput | number
    ville?: NullableStringFieldUpdateOperationsInput | string | null
    pays?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type transactionsUpdateWithoutUserInput = {
    dateRange?: JsonNullValueInput | InputJsonValue
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantity?: IntFieldUpdateOperationsInput | number
    status?: EnumtransactionStatusFieldUpdateOperationsInput | $Enums.transactionStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    annonce?: annoncesUpdateOneRequiredWithoutTransactionsNestedInput
  }

  export type transactionsUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateRange?: JsonNullValueInput | InputJsonValue
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantity?: IntFieldUpdateOperationsInput | number
    status?: EnumtransactionStatusFieldUpdateOperationsInput | $Enums.transactionStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    annonceId?: IntFieldUpdateOperationsInput | number
  }

  export type transactionsUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateRange?: JsonNullValueInput | InputJsonValue
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantity?: IntFieldUpdateOperationsInput | number
    status?: EnumtransactionStatusFieldUpdateOperationsInput | $Enums.transactionStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    annonceId?: IntFieldUpdateOperationsInput | number
  }

  export type adresseFacturationUpdateWithoutUserInput = {
    nom?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    codePostal?: StringFieldUpdateOperationsInput | string
    ville?: StringFieldUpdateOperationsInput | string
    pays?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type adresseFacturationUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    codePostal?: StringFieldUpdateOperationsInput | string
    ville?: StringFieldUpdateOperationsInput | string
    pays?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type adresseFacturationUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    codePostal?: StringFieldUpdateOperationsInput | string
    ville?: StringFieldUpdateOperationsInput | string
    pays?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type userCreateManyCompanyInput = {
    id?: number
    nom: string
    prenom: string
    email: string
    phone: string
    hashPassword: string
    statutUser: $Enums.statutUser
    role: $Enums.role
    createdAt?: Date | string
    updatedAt?: Date | string
    stripeAccountId?: string | null
    stripeAccountCompleted?: boolean
  }

  export type userUpdateWithoutCompanyInput = {
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    hashPassword?: StringFieldUpdateOperationsInput | string
    statutUser?: EnumstatutUserFieldUpdateOperationsInput | $Enums.statutUser
    role?: EnumroleFieldUpdateOperationsInput | $Enums.role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stripeAccountId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeAccountCompleted?: BoolFieldUpdateOperationsInput | boolean
    profileImages?: profileImageUpdateManyWithoutUserNestedInput
    annonces?: annoncesUpdateManyWithoutUserNestedInput
    commentaire?: commentaireUpdateManyWithoutUserNestedInput
    favoris?: favorisUpdateManyWithoutUserNestedInput
    temoignages?: temoignagesUpdateManyWithoutUserNestedInput
    transactions?: transactionsUpdateManyWithoutUserNestedInput
    adresseFacturation?: adresseFacturationUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutCompanyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    hashPassword?: StringFieldUpdateOperationsInput | string
    statutUser?: EnumstatutUserFieldUpdateOperationsInput | $Enums.statutUser
    role?: EnumroleFieldUpdateOperationsInput | $Enums.role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stripeAccountId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeAccountCompleted?: BoolFieldUpdateOperationsInput | boolean
    profileImages?: profileImageUncheckedUpdateManyWithoutUserNestedInput
    annonces?: annoncesUncheckedUpdateManyWithoutUserNestedInput
    commentaire?: commentaireUncheckedUpdateManyWithoutUserNestedInput
    favoris?: favorisUncheckedUpdateManyWithoutUserNestedInput
    temoignages?: temoignagesUncheckedUpdateManyWithoutUserNestedInput
    transactions?: transactionsUncheckedUpdateManyWithoutUserNestedInput
    adresseFacturation?: adresseFacturationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateManyWithoutCompanyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    hashPassword?: StringFieldUpdateOperationsInput | string
    statutUser?: EnumstatutUserFieldUpdateOperationsInput | $Enums.statutUser
    role?: EnumroleFieldUpdateOperationsInput | $Enums.role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stripeAccountId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeAccountCompleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type imageAnnonceCreateManyAnnoncesInput = {
    id?: number
    path: string
  }

  export type commentaireCreateManyAnnoncesInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    commentaire: string
    note?: number | null
    userId: number
  }

  export type favorisCreateManyAnnonceInput = {
    id?: number
    saveDate?: Date | string
    userId: number
  }

  export type transactionsCreateManyAnnonceInput = {
    id?: number
    dateRange?: JsonNullValueInput | InputJsonValue
    price: Decimal | DecimalJsLike | number | string
    quantity: number
    status?: $Enums.transactionStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: number
  }

  export type imageAnnonceUpdateWithoutAnnoncesInput = {
    path?: StringFieldUpdateOperationsInput | string
  }

  export type imageAnnonceUncheckedUpdateWithoutAnnoncesInput = {
    id?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
  }

  export type imageAnnonceUncheckedUpdateManyWithoutAnnoncesInput = {
    id?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
  }

  export type commentaireUpdateWithoutAnnoncesInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    commentaire?: StringFieldUpdateOperationsInput | string
    note?: NullableIntFieldUpdateOperationsInput | number | null
    user?: userUpdateOneRequiredWithoutCommentaireNestedInput
  }

  export type commentaireUncheckedUpdateWithoutAnnoncesInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    commentaire?: StringFieldUpdateOperationsInput | string
    note?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type commentaireUncheckedUpdateManyWithoutAnnoncesInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    commentaire?: StringFieldUpdateOperationsInput | string
    note?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type favorisUpdateWithoutAnnonceInput = {
    saveDate?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: userUpdateOneRequiredWithoutFavorisNestedInput
  }

  export type favorisUncheckedUpdateWithoutAnnonceInput = {
    id?: IntFieldUpdateOperationsInput | number
    saveDate?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type favorisUncheckedUpdateManyWithoutAnnonceInput = {
    id?: IntFieldUpdateOperationsInput | number
    saveDate?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type transactionsUpdateWithoutAnnonceInput = {
    dateRange?: JsonNullValueInput | InputJsonValue
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantity?: IntFieldUpdateOperationsInput | number
    status?: EnumtransactionStatusFieldUpdateOperationsInput | $Enums.transactionStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: userUpdateOneRequiredWithoutTransactionsNestedInput
  }

  export type transactionsUncheckedUpdateWithoutAnnonceInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateRange?: JsonNullValueInput | InputJsonValue
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantity?: IntFieldUpdateOperationsInput | number
    status?: EnumtransactionStatusFieldUpdateOperationsInput | $Enums.transactionStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type transactionsUncheckedUpdateManyWithoutAnnonceInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateRange?: JsonNullValueInput | InputJsonValue
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantity?: IntFieldUpdateOperationsInput | number
    status?: EnumtransactionStatusFieldUpdateOperationsInput | $Enums.transactionStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type logoCreateManyEngagementInput = {
    id?: number
    path: string
  }

  export type contenuPartenaireCreateManyEngagementInput = {
    id?: number
    path: string
  }

  export type logoUpdateWithoutEngagementInput = {
    path?: StringFieldUpdateOperationsInput | string
  }

  export type logoUncheckedUpdateWithoutEngagementInput = {
    id?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
  }

  export type logoUncheckedUpdateManyWithoutEngagementInput = {
    id?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
  }

  export type contenuPartenaireUpdateWithoutEngagementInput = {
    path?: StringFieldUpdateOperationsInput | string
  }

  export type contenuPartenaireUncheckedUpdateWithoutEngagementInput = {
    id?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
  }

  export type contenuPartenaireUncheckedUpdateManyWithoutEngagementInput = {
    id?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
  }

  export type imageCreateManyArticleInput = {
    id?: number
    path: string
  }

  export type imageUpdateWithoutArticleInput = {
    path?: StringFieldUpdateOperationsInput | string
  }

  export type imageUncheckedUpdateWithoutArticleInput = {
    id?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
  }

  export type imageUncheckedUpdateManyWithoutArticleInput = {
    id?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}